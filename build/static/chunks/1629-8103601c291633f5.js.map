{"version":3,"file":"static/chunks/1629-8103601c291633f5.js","mappings":"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","sources":["webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/PresenceContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/frameloop/render-step.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/frameloop/batcher.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/frameloop/frame.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/frameloop/sync-time.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/MotionContext/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/LazyContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/frameloop/microtask.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/is-ref-object.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/variant-props.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/MotionContext/create.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/definitions.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/load-features.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/symbol.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/transform.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/use-props.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/path.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/use-props.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/use-render.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/render.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/render.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/resolve-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/config-motion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/config-motion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/events/add-dom-event.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/events/event-info.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/events/add-pointer-event.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/Feature.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/hover.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/focus.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/press.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/gestures.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/shallow-compare.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/time-conversion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/ease.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/circ.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/back.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/anticipate.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/utils/map.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/offsets/fill.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/offsets/default.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/offsets/time.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/inertia.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/js/driver-frameloop.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/js/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/memo.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/instant.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/complex/filter.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/is-none.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/transitions.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/use-will-change/is.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/setters.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/animation-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/animation/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/animations.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/distance.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/geometry/models.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/utils/measure.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/get-context-window.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/drag/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/pan/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/node/state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/shared/stack.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/styles/transform.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/delay.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/debug/record.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/drag.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/motion-values.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/store.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/VisualElement.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/layout.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/motion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/GlobalConfig.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/array.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/clamp.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/errors.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/interpolate.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/is-browser.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/mix/color.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/mix/complex.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/mix/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/mix/number.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/noop.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/pipe.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/progress.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/subscription-manager.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/use-constant.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/color/hex.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/color/hsla.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/color/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/color/rgba.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/color/utils.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/complex/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/numbers/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/numbers/units.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/utils.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs","webpack://_N_E/<anon>"],"sourcesContent":["import { createContext } from 'react';\n\nconst LayoutGroupContext = createContext({});\n\nexport { LayoutGroupContext };\n","import { createContext } from 'react';\n\n/**\n * @public\n */\nconst MotionConfigContext = createContext({\n    transformPagePoint: (p) => p,\n    isStatic: false,\n    reducedMotion: \"never\",\n});\n\nexport { MotionConfigContext };\n","import { createContext } from 'react';\n\n/**\n * @public\n */\nconst PresenceContext = createContext(null);\n\nexport { PresenceContext };\n","class Queue {\n    constructor() {\n        this.order = [];\n        this.scheduled = new Set();\n    }\n    add(process) {\n        if (!this.scheduled.has(process)) {\n            this.scheduled.add(process);\n            this.order.push(process);\n            return true;\n        }\n    }\n    remove(process) {\n        const index = this.order.indexOf(process);\n        if (index !== -1) {\n            this.order.splice(index, 1);\n            this.scheduled.delete(process);\n        }\n    }\n    clear() {\n        this.order.length = 0;\n        this.scheduled.clear();\n    }\n}\nfunction createRenderStep(runNextFrame) {\n    /**\n     * We create and reuse two queues, one to queue jobs for the current frame\n     * and one for the next. We reuse to avoid triggering GC after x frames.\n     */\n    let thisFrame = new Queue();\n    let nextFrame = new Queue();\n    let numToRun = 0;\n    /**\n     * Track whether we're currently processing jobs in this step. This way\n     * we can decide whether to schedule new jobs for this frame or next.\n     */\n    let isProcessing = false;\n    let flushNextFrame = false;\n    /**\n     * A set of processes which were marked keepAlive when scheduled.\n     */\n    const toKeepAlive = new WeakSet();\n    const step = {\n        /**\n         * Schedule a process to run on the next frame.\n         */\n        schedule: (callback, keepAlive = false, immediate = false) => {\n            const addToCurrentFrame = immediate && isProcessing;\n            const queue = addToCurrentFrame ? thisFrame : nextFrame;\n            if (keepAlive)\n                toKeepAlive.add(callback);\n            if (queue.add(callback) && addToCurrentFrame && isProcessing) {\n                // If we're adding it to the currently running queue, update its measured size\n                numToRun = thisFrame.order.length;\n            }\n            return callback;\n        },\n        /**\n         * Cancel the provided callback from running on the next frame.\n         */\n        cancel: (callback) => {\n            nextFrame.remove(callback);\n            toKeepAlive.delete(callback);\n        },\n        /**\n         * Execute all schedule callbacks.\n         */\n        process: (frameData) => {\n            /**\n             * If we're already processing we've probably been triggered by a flushSync\n             * inside an existing process. Instead of executing, mark flushNextFrame\n             * as true and ensure we flush the following frame at the end of this one.\n             */\n            if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [thisFrame, nextFrame] = [nextFrame, thisFrame];\n            // Clear the next frame queue\n            nextFrame.clear();\n            // Execute this frame\n            numToRun = thisFrame.order.length;\n            if (numToRun) {\n                for (let i = 0; i < numToRun; i++) {\n                    const callback = thisFrame.order[i];\n                    if (toKeepAlive.has(callback)) {\n                        step.schedule(callback);\n                        runNextFrame();\n                    }\n                    callback(frameData);\n                }\n            }\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        },\n    };\n    return step;\n}\n\nexport { createRenderStep };\n","import { MotionGlobalConfig } from '../utils/GlobalConfig.mjs';\nimport { createRenderStep } from './render-step.mjs';\n\nconst stepsOrder = [\n    \"prepare\",\n    \"read\",\n    \"update\",\n    \"preRender\",\n    \"render\",\n    \"postRender\",\n];\nconst maxElapsed = 40;\nfunction createRenderBatcher(scheduleNextBatch, allowKeepAlive) {\n    let runNextFrame = false;\n    let useDefaultElapsed = true;\n    const state = {\n        delta: 0,\n        timestamp: 0,\n        isProcessing: false,\n    };\n    const steps = stepsOrder.reduce((acc, key) => {\n        acc[key] = createRenderStep(() => (runNextFrame = true));\n        return acc;\n    }, {});\n    const processStep = (stepId) => {\n        steps[stepId].process(state);\n    };\n    const processBatch = () => {\n        const timestamp = MotionGlobalConfig.useManualTiming\n            ? state.timestamp\n            : performance.now();\n        runNextFrame = false;\n        state.delta = useDefaultElapsed\n            ? 1000 / 60\n            : Math.max(Math.min(timestamp - state.timestamp, maxElapsed), 1);\n        state.timestamp = timestamp;\n        state.isProcessing = true;\n        stepsOrder.forEach(processStep);\n        state.isProcessing = false;\n        if (runNextFrame && allowKeepAlive) {\n            useDefaultElapsed = false;\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const wake = () => {\n        runNextFrame = true;\n        useDefaultElapsed = true;\n        if (!state.isProcessing) {\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const schedule = stepsOrder.reduce((acc, key) => {\n        const step = steps[key];\n        acc[key] = (process, keepAlive = false, immediate = false) => {\n            if (!runNextFrame)\n                wake();\n            return step.schedule(process, keepAlive, immediate);\n        };\n        return acc;\n    }, {});\n    const cancel = (process) => stepsOrder.forEach((key) => steps[key].cancel(process));\n    return { schedule, cancel, state, steps };\n}\n\nexport { createRenderBatcher, stepsOrder };\n","import { noop } from '../utils/noop.mjs';\nimport { createRenderBatcher } from './batcher.mjs';\n\nconst { schedule: frame, cancel: cancelFrame, state: frameData, steps, } = createRenderBatcher(typeof requestAnimationFrame !== \"undefined\" ? requestAnimationFrame : noop, true);\n\nexport { cancelFrame, frame, frameData, steps };\n","import { MotionGlobalConfig } from '../utils/GlobalConfig.mjs';\nimport { frameData } from './frame.mjs';\n\nlet now;\nfunction clearTime() {\n    now = undefined;\n}\n/**\n * An eventloop-synchronous alternative to performance.now().\n *\n * Ensures that time measurements remain consistent within a synchronous context.\n * Usually calling performance.now() twice within the same synchronous context\n * will return different values which isn't useful for animations when we're usually\n * trying to sync animations to the same frame.\n */\nconst time = {\n    now: () => {\n        if (now === undefined) {\n            time.set(frameData.isProcessing || MotionGlobalConfig.useManualTiming\n                ? frameData.timestamp\n                : performance.now());\n        }\n        return now;\n    },\n    set: (newTime) => {\n        now = newTime;\n        queueMicrotask(clearTime);\n    },\n};\n\nexport { time };\n","import { createContext } from 'react';\n\nconst MotionContext = createContext({});\n\nexport { MotionContext };\n","import { createContext } from 'react';\n\nconst LazyContext = createContext({ strict: false });\n\nexport { LazyContext };\n","/**\n * Convert camelCase to dash-case properties.\n */\nconst camelToDash = (str) => str.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n\nexport { camelToDash };\n","import { camelToDash } from '../../render/dom/utils/camel-to-dash.mjs';\n\nconst optimizedAppearDataId = \"framerAppearId\";\nconst optimizedAppearDataAttribute = \"data-\" + camelToDash(optimizedAppearDataId);\n\nexport { optimizedAppearDataAttribute, optimizedAppearDataId };\n","import { createRenderBatcher } from './batcher.mjs';\n\nconst { schedule: microtask, cancel: cancelMicrotask } = createRenderBatcher(queueMicrotask, false);\n\nexport { cancelMicrotask, microtask };\n","import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\n\nfunction useVisualElement(Component, visualState, props, createVisualElement) {\n    const { visualElement: parent } = useContext(MotionContext);\n    const lazyContext = useContext(LazyContext);\n    const presenceContext = useContext(PresenceContext);\n    const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = useRef();\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */\n    createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext\n                ? presenceContext.initial === false\n                : false,\n            reducedMotionConfig,\n        });\n    }\n    const visualElement = visualElementRef.current;\n    useInsertionEffect(() => {\n        visualElement && visualElement.update(props, presenceContext);\n    });\n    /**\n     * Cache this value as we want to know whether HandoffAppearAnimations\n     * was present on initial render - it will be deleted after this.\n     */\n    const wantsHandoff = useRef(Boolean(props[optimizedAppearDataAttribute] && !window.HandoffComplete));\n    useIsomorphicLayoutEffect(() => {\n        if (!visualElement)\n            return;\n        microtask.postRender(visualElement.render);\n        /**\n         * Ideally this function would always run in a useEffect.\n         *\n         * However, if we have optimised appear animations to handoff from,\n         * it needs to happen synchronously to ensure there's no flash of\n         * incorrect styles in the event of a hydration error.\n         *\n         * So if we detect a situtation where optimised appear animations\n         * are running, we use useLayoutEffect to trigger animations.\n         */\n        if (wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    useEffect(() => {\n        if (!visualElement)\n            return;\n        visualElement.updateFeatures();\n        if (!wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n        if (wantsHandoff.current) {\n            wantsHandoff.current = false;\n            // This ensures all future calls to animateChanges() will run in useEffect\n            window.HandoffComplete = true;\n        }\n    });\n    return visualElement;\n}\n\nexport { useVisualElement };\n","function isRefObject(ref) {\n    return (ref &&\n        typeof ref === \"object\" &&\n        Object.prototype.hasOwnProperty.call(ref, \"current\"));\n}\n\nexport { isRefObject };\n","import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return useCallback((instance) => {\n        instance && visualState.mount && visualState.mount(instance);\n        if (visualElement) {\n            instance\n                ? visualElement.mount(instance)\n                : visualElement.unmount();\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\nexport { useMotionRef };\n","/**\n * Decides if the supplied variable is variant label\n */\nfunction isVariantLabel(v) {\n    return typeof v === \"string\" || Array.isArray(v);\n}\n\nexport { isVariantLabel };\n","function isAnimationControls(v) {\n    return (v !== null &&\n        typeof v === \"object\" &&\n        typeof v.start === \"function\");\n}\n\nexport { isAnimationControls };\n","const variantPriorityOrder = [\n    \"animate\",\n    \"whileInView\",\n    \"whileFocus\",\n    \"whileHover\",\n    \"whileTap\",\n    \"whileDrag\",\n    \"exit\",\n];\nconst variantProps = [\"initial\", ...variantPriorityOrder];\n\nexport { variantPriorityOrder, variantProps };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { variantProps } from './variant-props.mjs';\n\nfunction isControllingVariants(props) {\n    return (isAnimationControls(props.animate) ||\n        variantProps.some((name) => isVariantLabel(props[name])));\n}\nfunction isVariantNode(props) {\n    return Boolean(isControllingVariants(props) || props.variants);\n}\n\nexport { isControllingVariants, isVariantNode };\n","import { isVariantLabel } from '../../render/utils/is-variant-label.mjs';\nimport { isControllingVariants } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction getCurrentTreeVariants(props, context) {\n    if (isControllingVariants(props)) {\n        const { initial, animate } = props;\n        return {\n            initial: initial === false || isVariantLabel(initial)\n                ? initial\n                : undefined,\n            animate: isVariantLabel(animate) ? animate : undefined,\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\n\nexport { getCurrentTreeVariants };\n","import { useContext, useMemo } from 'react';\nimport { MotionContext } from './index.mjs';\nimport { getCurrentTreeVariants } from './utils.mjs';\n\nfunction useCreateMotionContext(props) {\n    const { initial, animate } = getCurrentTreeVariants(props, useContext(MotionContext));\n    return useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);\n}\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\n\nexport { useCreateMotionContext };\n","const featureProps = {\n    animation: [\n        \"animate\",\n        \"variants\",\n        \"whileHover\",\n        \"whileTap\",\n        \"exit\",\n        \"whileInView\",\n        \"whileFocus\",\n        \"whileDrag\",\n    ],\n    exit: [\"exit\"],\n    drag: [\"drag\", \"dragControls\"],\n    focus: [\"whileFocus\"],\n    hover: [\"whileHover\", \"onHoverStart\", \"onHoverEnd\"],\n    tap: [\"whileTap\", \"onTap\", \"onTapStart\", \"onTapCancel\"],\n    pan: [\"onPan\", \"onPanStart\", \"onPanSessionStart\", \"onPanEnd\"],\n    inView: [\"whileInView\", \"onViewportEnter\", \"onViewportLeave\"],\n    layout: [\"layout\", \"layoutId\"],\n};\nconst featureDefinitions = {};\nfor (const key in featureProps) {\n    featureDefinitions[key] = {\n        isEnabled: (props) => featureProps[key].some((name) => !!props[name]),\n    };\n}\n\nexport { featureDefinitions };\n","import { featureDefinitions } from './definitions.mjs';\n\nfunction loadFeatures(features) {\n    for (const key in features) {\n        featureDefinitions[key] = {\n            ...featureDefinitions[key],\n            ...features[key],\n        };\n    }\n}\n\nexport { loadFeatures };\n","import { createContext } from 'react';\n\n/**\n * Internal, exported only for usage in Framer\n */\nconst SwitchLayoutGroupContext = createContext({});\n\nexport { SwitchLayoutGroupContext };\n","const motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n\nexport { motionComponentSymbol };\n","import * as React from 'react';\nimport { forwardRef, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../context/MotionContext/index.mjs';\nimport { useVisualElement } from './utils/use-visual-element.mjs';\nimport { useMotionRef } from './utils/use-motion-ref.mjs';\nimport { useCreateMotionContext } from '../context/MotionContext/create.mjs';\nimport { loadFeatures } from './features/load-features.mjs';\nimport { isBrowser } from '../utils/is-browser.mjs';\nimport { LayoutGroupContext } from '../context/LayoutGroupContext.mjs';\nimport { LazyContext } from '../context/LazyContext.mjs';\nimport { SwitchLayoutGroupContext } from '../context/SwitchLayoutGroupContext.mjs';\nimport { motionComponentSymbol } from './utils/symbol.mjs';\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component, }) {\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        /**\n         * If we need to measure the element we load this functionality in a\n         * separate class component in order to gain access to getSnapshotBeforeUpdate.\n         */\n        let MeasureLayout;\n        const configAndProps = {\n            ...useContext(MotionConfigContext),\n            ...props,\n            layoutId: useLayoutId(props),\n        };\n        const { isStatic } = configAndProps;\n        const context = useCreateMotionContext(props);\n        const visualState = useVisualState(props, isStatic);\n        if (!isStatic && isBrowser) {\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */\n            context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement);\n            /**\n             * Load Motion gesture and animation features. These are rendered as renderless\n             * components so each feature can optionally make use of React lifecycle methods.\n             */\n            const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n            const isStrict = useContext(LazyContext).strict;\n            if (context.visualElement) {\n                MeasureLayout = context.visualElement.loadFeatures(\n                // Note: Pass the full new combined props to correctly re-render dynamic feature components.\n                configAndProps, isStrict, preloadedFeatures, initialLayoutGroupConfig);\n            }\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */\n        return (React.createElement(MotionContext.Provider, { value: context },\n            MeasureLayout && context.visualElement ? (React.createElement(MeasureLayout, { visualElement: context.visualElement, ...configAndProps })) : null,\n            useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)));\n    }\n    const ForwardRefComponent = forwardRef(MotionComponent);\n    ForwardRefComponent[motionComponentSymbol] = Component;\n    return ForwardRefComponent;\n}\nfunction useLayoutId({ layoutId }) {\n    const layoutGroupId = useContext(LayoutGroupContext).id;\n    return layoutGroupId && layoutId !== undefined\n        ? layoutGroupId + \"-\" + layoutId\n        : layoutId;\n}\n\nexport { createMotionComponent };\n","import { createMotionComponent } from '../../motion/index.mjs';\n\n/**\n * Convert any React component into a `motion` component. The provided component\n * **must** use `React.forwardRef` to the underlying DOM component you want to animate.\n *\n * ```jsx\n * const Component = React.forwardRef((props, ref) => {\n *   return <div ref={ref} />\n * })\n *\n * const MotionComponent = motion(Component)\n * ```\n *\n * @public\n */\nfunction createMotionProxy(createConfig) {\n    function custom(Component, customMotionComponentConfig = {}) {\n        return createMotionComponent(createConfig(Component, customMotionComponentConfig));\n    }\n    if (typeof Proxy === \"undefined\") {\n        return custom;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */\n    const componentCache = new Map();\n    return new Proxy(custom, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */\n        get: (_target, key) => {\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */\n            if (!componentCache.has(key)) {\n                componentCache.set(key, custom(key));\n            }\n            return componentCache.get(key);\n        },\n    });\n}\n\nexport { createMotionProxy };\n","/**\n * We keep these listed seperately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */\nconst lowercaseSVGElements = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"switch\",\n    \"symbol\",\n    \"svg\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\",\n];\n\nexport { lowercaseSVGElements };\n","import { lowercaseSVGElements } from '../../svg/lowercase-elements.mjs';\n\nfunction isSVGComponent(Component) {\n    if (\n    /**\n     * If it's not a string, it's a custom React component. Currently we only support\n     * HTML custom React components.\n     */\n    typeof Component !== \"string\" ||\n        /**\n         * If it contains a dash, the element is a custom HTML webcomponent.\n         */\n        Component.includes(\"-\")) {\n        return false;\n    }\n    else if (\n    /**\n     * If it's in our list of lowercase SVG tags, it's an SVG component\n     */\n    lowercaseSVGElements.indexOf(Component) > -1 ||\n        /**\n         * If it contains a capital letter, it's an SVG component\n         */\n        /[A-Z]/.test(Component)) {\n        return true;\n    }\n    return false;\n}\n\nexport { isSVGComponent };\n","const scaleCorrectors = {};\nfunction addScaleCorrector(correctors) {\n    Object.assign(scaleCorrectors, correctors);\n}\n\nexport { addScaleCorrector, scaleCorrectors };\n","/**\n * Generate a list of every possible transform key.\n */\nconst transformPropOrder = [\n    \"transformPerspective\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"translateX\",\n    \"translateY\",\n    \"translateZ\",\n    \"scale\",\n    \"scaleX\",\n    \"scaleY\",\n    \"rotate\",\n    \"rotateX\",\n    \"rotateY\",\n    \"rotateZ\",\n    \"skew\",\n    \"skewX\",\n    \"skewY\",\n];\n/**\n * A quick lookup for transform props.\n */\nconst transformProps = new Set(transformPropOrder);\n\nexport { transformPropOrder, transformProps };\n","import { scaleCorrectors } from '../../projection/styles/scale-correction.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\n\nfunction isForcedMotionValue(key, { layout, layoutId }) {\n    return (transformProps.has(key) ||\n        key.startsWith(\"origin\") ||\n        ((layout || layoutId !== undefined) &&\n            (!!scaleCorrectors[key] || key === \"opacity\")));\n}\n\nexport { isForcedMotionValue };\n","import { transformPropOrder } from './transform.mjs';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(transform, { enableHardwareAcceleration = true, allowTransformNone = true, }, transformIsDefault, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        if (transform[key] !== undefined) {\n            const transformName = translateAlias[key] || key;\n            transformString += `${transformName}(${transform[key]}) `;\n        }\n    }\n    if (enableHardwareAcceleration && !transform.z) {\n        transformString += \"translateZ(0)\";\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (allowTransformNone && transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n","/**\n * Provided a value and a ValueType, returns the value as that value type.\n */\nconst getValueAsType = (value, type) => {\n    return type && typeof value === \"number\"\n        ? type.transform(value)\n        : value;\n};\n\nexport { getValueAsType };\n","import { number } from '../../../value/types/numbers/index.mjs';\n\nconst int = {\n    ...number,\n    transform: Math.round,\n};\n\nexport { int };\n","import { scale, alpha } from '../../../value/types/numbers/index.mjs';\nimport { px, degrees, progressPercentage } from '../../../value/types/numbers/units.mjs';\nimport { int } from './type-int.mjs';\n\nconst numberValueTypes = {\n    // Border props\n    borderWidth: px,\n    borderTopWidth: px,\n    borderRightWidth: px,\n    borderBottomWidth: px,\n    borderLeftWidth: px,\n    borderRadius: px,\n    radius: px,\n    borderTopLeftRadius: px,\n    borderTopRightRadius: px,\n    borderBottomRightRadius: px,\n    borderBottomLeftRadius: px,\n    // Positioning props\n    width: px,\n    maxWidth: px,\n    height: px,\n    maxHeight: px,\n    size: px,\n    top: px,\n    right: px,\n    bottom: px,\n    left: px,\n    // Spacing props\n    padding: px,\n    paddingTop: px,\n    paddingRight: px,\n    paddingBottom: px,\n    paddingLeft: px,\n    margin: px,\n    marginTop: px,\n    marginRight: px,\n    marginBottom: px,\n    marginLeft: px,\n    // Transform props\n    rotate: degrees,\n    rotateX: degrees,\n    rotateY: degrees,\n    rotateZ: degrees,\n    scale,\n    scaleX: scale,\n    scaleY: scale,\n    scaleZ: scale,\n    skew: degrees,\n    skewX: degrees,\n    skewY: degrees,\n    distance: px,\n    translateX: px,\n    translateY: px,\n    translateZ: px,\n    x: px,\n    y: px,\n    z: px,\n    perspective: px,\n    transformPerspective: px,\n    opacity: alpha,\n    originX: progressPercentage,\n    originY: progressPercentage,\n    originZ: px,\n    // Misc\n    zIndex: int,\n    // SVG\n    fillOpacity: alpha,\n    strokeOpacity: alpha,\n    numOctaves: int,\n};\n\nexport { numberValueTypes };\n","import { buildTransform } from './build-transform.mjs';\nimport { isCSSVariableName } from '../../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nfunction buildHTMLStyles(state, latestValues, options, transformTemplate) {\n    const { style, vars, transform, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    // Does the calculated transform essentially equal \"none\"?\n    let transformIsNone = true;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept seperately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        /**\n         * If this is a CSS variable we don't do any further processing.\n         */\n        if (isCSSVariableName(key)) {\n            vars[key] = value;\n            continue;\n        }\n        // Convert the value to its default value type, ie 0 -> \"0px\"\n        const valueType = numberValueTypes[key];\n        const valueAsType = getValueAsType(value, valueType);\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            transform[key] = valueAsType;\n            // If we already know we have a non-default transform, early return\n            if (!transformIsNone)\n                continue;\n            // Otherwise check to see if this is a default transform\n            if (value !== (valueType.default || 0))\n                transformIsNone = false;\n        }\n        else if (key.startsWith(\"origin\")) {\n            // If this is a transform origin, flag and enable further transform-origin processing\n            hasTransformOrigin = true;\n            transformOrigin[key] = valueAsType;\n        }\n        else {\n            style[key] = valueAsType;\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(state.transform, options, transformIsNone, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nexport { buildHTMLStyles };\n","const createHtmlRenderState = () => ({\n    style: {},\n    transform: {},\n    transformOrigin: {},\n    vars: {},\n});\n\nexport { createHtmlRenderState };\n","import { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (const key in source) {\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState, isStatic) {\n    return useMemo(() => {\n        const state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState, isStatic) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState, isStatic));\n    return style;\n}\nfunction useHTMLProps(props, visualState, isStatic) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState, isStatic);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined &&\n        (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps };\n","/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */\nconst validMotionProps = new Set([\n    \"animate\",\n    \"exit\",\n    \"variants\",\n    \"initial\",\n    \"style\",\n    \"values\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"custom\",\n    \"inherit\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"_dragX\",\n    \"_dragY\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"globalTapTarget\",\n    \"ignoreStrict\",\n    \"viewport\",\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */\nfunction isValidMotionProp(key) {\n    return (key.startsWith(\"while\") ||\n        (key.startsWith(\"drag\") && key !== \"draggable\") ||\n        key.startsWith(\"layout\") ||\n        key.startsWith(\"onTap\") ||\n        key.startsWith(\"onPan\") ||\n        key.startsWith(\"onLayout\") ||\n        validMotionProps.has(key));\n}\n\nexport { isValidMotionProp };\n","import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\n\nlet shouldForward = (key) => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp)\n        return;\n    // Explicitly filter our events\n    shouldForward = (key) => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n}\ncatch (_a) {\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for (const key in props) {\n        /**\n         * values is considered a valid prop by Emotion, so if it's present\n         * this will be rendered out to the DOM unless explicitly filtered.\n         *\n         * We check the type as it could be used with the `feColorMatrix`\n         * element, which we support.\n         */\n        if (key === \"values\" && typeof props.values === \"object\")\n            continue;\n        if (shouldForward(key) ||\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\n            (!isDom && !isValidMotionProp(key)) ||\n            // If trying to use native HTML drag events, forward drag listeners\n            (props[\"draggable\"] && key.startsWith(\"onDrag\"))) {\n            filteredProps[key] = props[key];\n        }\n    }\n    return filteredProps;\n}\n\nexport { filterProps, loadExternalIsValidProp };\n","import { px } from '../../../value/types/numbers/units.mjs';\n\nfunction calcOrigin(origin, offset, size) {\n    return typeof origin === \"string\"\n        ? origin\n        : px.transform(offset + size * origin);\n}\n/**\n * The SVG transform origin defaults are different to CSS and is less intuitive,\n * so we use the measured dimensions of the SVG to reconcile these.\n */\nfunction calcSVGTransformOrigin(dimensions, originX, originY) {\n    const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);\n    const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);\n    return `${pxOriginX} ${pxOriginY}`;\n}\n\nexport { calcSVGTransformOrigin };\n","import { px } from '../../../value/types/numbers/units.mjs';\n\nconst dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\",\n};\nconst camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\",\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */\nfunction buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {\n    // Normalise path length by setting SVG attribute pathLength to 1\n    attrs.pathLength = 1;\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    const keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = px.transform(-offset);\n    // Build the dash array\n    const pathLength = px.transform(length);\n    const pathSpacing = px.transform(spacing);\n    attrs[keys.array] = `${pathLength} ${pathSpacing}`;\n}\n\nexport { buildSVGPath };\n","import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { calcSVGTransformOrigin } from './transform-origin.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, { attrX, attrY, attrScale, originX, originY, pathLength, pathSpacing = 1, pathOffset = 0, \n// This is object creation, which we try to avoid per-frame.\n...latest }, options, isSVGTag, transformTemplate) {\n    buildHTMLStyles(state, latest, options, transformTemplate);\n    /**\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n     * as normal HTML tags.\n     */\n    if (isSVGTag) {\n        if (state.style.viewBox) {\n            state.attrs.viewBox = state.style.viewBox;\n        }\n        return;\n    }\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style, dimensions } = state;\n    /**\n     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n     * and copy it into style.\n     */\n    if (attrs.transform) {\n        if (dimensions)\n            style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    // Parse transformOrigin\n    if (dimensions &&\n        (originX !== undefined || originY !== undefined || style.transform)) {\n        style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n    }\n    // Render attrX/attrY/attrScale as attributes\n    if (attrX !== undefined)\n        attrs.x = attrX;\n    if (attrY !== undefined)\n        attrs.y = attrY;\n    if (attrScale !== undefined)\n        attrs.scale = attrScale;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\nexport { buildSVGAttrs };\n","import { createHtmlRenderState } from '../../html/utils/create-render-state.mjs';\n\nconst createSvgRenderState = () => ({\n    ...createHtmlRenderState(),\n    attrs: {},\n});\n\nexport { createSvgRenderState };\n","const isSVGTag = (tag) => typeof tag === \"string\" && tag.toLowerCase() === \"svg\";\n\nexport { isSVGTag };\n","import { useMemo } from 'react';\nimport { copyRawValuesOnly } from '../html/use-props.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n    const visualProps = useMemo(() => {\n        const state = createSvgRenderState();\n        buildSVGAttrs(state, visualState, { enableHardwareAcceleration: false }, isSVGTag(Component), props.transformTemplate);\n        return {\n            ...state.attrs,\n            style: { ...state.style },\n        };\n    }, [visualState]);\n    if (props.style) {\n        const rawStyles = {};\n        copyRawValuesOnly(rawStyles, props.style, props);\n        visualProps.style = { ...rawStyles, ...visualProps.style };\n    }\n    return visualProps;\n}\n\nexport { useSVGProps };\n","import { Fragment, useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction createUseRender(forwardMotionProps = false) {\n    const useRender = (Component, props, ref, { latestValues }, isStatic) => {\n        const useVisualProps = isSVGComponent(Component)\n            ? useSVGProps\n            : useHTMLProps;\n        const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n        const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n        const elementProps = Component !== Fragment\n            ? { ...filteredProps, ...visualProps, ref }\n            : {};\n        /**\n         * If component has been handed a motion value as its child,\n         * memoise its initial value and render that. Subsequent updates\n         * will be handled by the onChange handler\n         */\n        const { children } = props;\n        const renderedChildren = useMemo(() => (isMotionValue(children) ? children.get() : children), [children]);\n        return createElement(Component, {\n            ...elementProps,\n            children: renderedChildren,\n        });\n    };\n    return useRender;\n}\n\nexport { createUseRender };\n","function renderHTML(element, { style, vars }, styleProp, projection) {\n    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));\n    // Loop over any CSS variables and assign those.\n    for (const key in vars) {\n        element.style.setProperty(key, vars[key]);\n    }\n}\n\nexport { renderHTML };\n","/**\n * A set of attribute names that are always read/written as camel case.\n */\nconst camelCaseAttributes = new Set([\n    \"baseFrequency\",\n    \"diffuseConstant\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerWidth\",\n    \"numOctaves\",\n    \"targetX\",\n    \"targetY\",\n    \"surfaceScale\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"stdDeviation\",\n    \"tableValues\",\n    \"viewBox\",\n    \"gradientTransform\",\n    \"pathLength\",\n    \"startOffset\",\n    \"textLength\",\n    \"lengthAdjust\",\n]);\n\nexport { camelCaseAttributes };\n","import { camelToDash } from '../../dom/utils/camel-to-dash.mjs';\nimport { renderHTML } from '../../html/utils/render.mjs';\nimport { camelCaseAttributes } from './camel-case-attrs.mjs';\n\nfunction renderSVG(element, renderState, _styleProp, projection) {\n    renderHTML(element, renderState, undefined, projection);\n    for (const key in renderState.attrs) {\n        element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);\n    }\n}\n\nexport { renderSVG };\n","import { isForcedMotionValue } from '../../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps) {\n    const { style } = props;\n    const newValues = {};\n    for (const key in style) {\n        if (isMotionValue(style[key]) ||\n            (prevProps.style && isMotionValue(prevProps.style[key])) ||\n            isForcedMotionValue(key, props)) {\n            newValues[key] = style[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","import { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\nimport { scrapeMotionValuesFromProps as scrapeMotionValuesFromProps$1 } from '../../html/utils/scrape-motion-values.mjs';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps) {\n    const newValues = scrapeMotionValuesFromProps$1(props, prevProps);\n    for (const key in props) {\n        if (isMotionValue(props[key]) || isMotionValue(prevProps[key])) {\n            const targetKey = transformPropOrder.indexOf(key) !== -1\n                ? \"attr\" + key.charAt(0).toUpperCase() + key.substring(1)\n                : key;\n            newValues[targetKey] = props[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","function resolveVariantFromProps(props, definition, custom, currentValues = {}, currentVelocity = {}) {\n    /**\n     * If the variant definition is a function, resolve.\n     */\n    if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */\n    if (typeof definition === \"string\") {\n        definition = props.variants && props.variants[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */\n    if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    return definition;\n}\n\nexport { resolveVariantFromProps };\n","const isKeyframesTarget = (v) => {\n    return Array.isArray(v);\n};\n\nexport { isKeyframesTarget };\n","import { isKeyframesTarget } from '../animation/utils/is-keyframes-target.mjs';\n\nconst isCustomValue = (v) => {\n    return Boolean(v && typeof v === \"object\" && v.mix && v.toValue);\n};\nconst resolveFinalValueInKeyframes = (v) => {\n    // TODO maybe throw if v.length - 1 is placeholder token?\n    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;\n};\n\nexport { isCustomValue, resolveFinalValueInKeyframes };\n","import { isCustomValue } from '../../utils/resolve-value.mjs';\nimport { isMotionValue } from './is-motion-value.mjs';\n\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */\nfunction resolveMotionValue(value) {\n    const unwrappedValue = isMotionValue(value) ? value.get() : value;\n    return isCustomValue(unwrappedValue)\n        ? unwrappedValue.toValue()\n        : unwrappedValue;\n}\n\nexport { resolveMotionValue };\n","import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, onMount, }, props, context, presenceContext) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    if (onMount) {\n        state.mount = (instance) => onMount(props, instance, state);\n    }\n    return state;\n}\nconst makeUseVisualState = (config) => (props, isStatic) => {\n    const context = useContext(MotionContext);\n    const presenceContext = useContext(PresenceContext);\n    const make = () => makeState(config, props, context, presenceContext);\n    return isStatic ? make() : useConstant(make);\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props, {});\n    for (const key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    if (context &&\n        isVariantNode$1 &&\n        !isControllingVariants$1 &&\n        props.inherit !== false) {\n        if (initial === undefined)\n            initial = context.initial;\n        if (animate === undefined)\n            animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext\n        ? presenceContext.initial === false\n        : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !isAnimationControls(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n        list.forEach((definition) => {\n            const resolved = resolveVariantFromProps(props, definition);\n            if (!resolved)\n                return;\n            const { transitionEnd, transition, ...target } = resolved;\n            for (const key in target) {\n                let valueTarget = target[key];\n                if (Array.isArray(valueTarget)) {\n                    /**\n                     * Take final keyframe if the initial animation is blocked because\n                     * we want to initialise at the end of that blocked animation.\n                     */\n                    const index = isInitialAnimationBlocked\n                        ? valueTarget.length - 1\n                        : 0;\n                    valueTarget = valueTarget[index];\n                }\n                if (valueTarget !== null) {\n                    values[key] = valueTarget;\n                }\n            }\n            for (const key in transitionEnd)\n                values[key] = transitionEnd[key];\n        });\n    }\n    return values;\n}\n\nexport { makeUseVisualState };\n","import { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst svgMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n        createRenderState: createSvgRenderState,\n        onMount: (props, instance, { renderState, latestValues }) => {\n            frame.read(() => {\n                try {\n                    renderState.dimensions =\n                        typeof instance.getBBox ===\n                            \"function\"\n                            ? instance.getBBox()\n                            : instance.getBoundingClientRect();\n                }\n                catch (e) {\n                    // Most likely trying to measure an unrendered element under Firefox\n                    renderState.dimensions = {\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0,\n                    };\n                }\n            });\n            frame.render(() => {\n                buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, isSVGTag(instance.tagName), props.transformTemplate);\n                renderSVG(instance, renderState);\n            });\n        },\n    }),\n};\n\nexport { svgMotionConfig };\n","import { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nconst htmlMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps,\n        createRenderState: createHtmlRenderState,\n    }),\n};\n\nexport { htmlMotionConfig };\n","import { isSVGComponent } from './is-svg-component.mjs';\nimport { createUseRender } from '../use-render.mjs';\nimport { svgMotionConfig } from '../../svg/config-motion.mjs';\nimport { htmlMotionConfig } from '../../html/config-motion.mjs';\n\nfunction createDomMotionConfig(Component, { forwardMotionProps = false }, preloadedFeatures, createVisualElement) {\n    const baseConfig = isSVGComponent(Component)\n        ? svgMotionConfig\n        : htmlMotionConfig;\n    return {\n        ...baseConfig,\n        preloadedFeatures,\n        useRender: createUseRender(forwardMotionProps),\n        createVisualElement,\n        Component,\n    };\n}\n\nexport { createDomMotionConfig };\n","function addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n\nexport { addDomEvent };\n","const isPrimaryPointer = (event) => {\n    if (event.pointerType === \"mouse\") {\n        return typeof event.button !== \"number\" || event.button <= 0;\n    }\n    else {\n        /**\n         * isPrimary is true for all mice buttons, whereas every touch point\n         * is regarded as its own input. So subsequent concurrent touch points\n         * will be false.\n         *\n         * Specifically match against false here as incomplete versions of\n         * PointerEvents in very old browser might have it set as undefined.\n         */\n        return event.isPrimary !== false;\n    }\n};\n\nexport { isPrimaryPointer };\n","import { isPrimaryPointer } from './utils/is-primary-pointer.mjs';\n\nfunction extractEventInfo(event, pointType = \"page\") {\n    return {\n        point: {\n            x: event[pointType + \"X\"],\n            y: event[pointType + \"Y\"],\n        },\n    };\n}\nconst addPointerInfo = (handler) => {\n    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\n\nexport { addPointerInfo, extractEventInfo };\n","import { addDomEvent } from './add-dom-event.mjs';\nimport { addPointerInfo } from './event-info.mjs';\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\n\nexport { addPointerEvent };\n","function createLock(name) {\n    let lock = null;\n    return () => {\n        const openLock = () => {\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nconst globalHorizontalLock = createLock(\"dragHorizontal\");\nconst globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    let lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    }\n    else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    }\n    else {\n        const openHorizontal = globalHorizontalLock();\n        const openVertical = globalVerticalLock();\n        if (openHorizontal && openVertical) {\n            lock = () => {\n                openHorizontal();\n                openVertical();\n            };\n        }\n        else {\n            // Release the locks because we don't use them\n            if (openHorizontal)\n                openHorizontal();\n            if (openVertical)\n                openVertical();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    const openGestureLock = getGlobalLock(true);\n    if (!openGestureLock)\n        return true;\n    openGestureLock();\n    return false;\n}\n\nexport { createLock, getGlobalLock, isDragActive };\n","class Feature {\n    constructor(node) {\n        this.isMounted = false;\n        this.node = node;\n    }\n    update() { }\n}\n\nexport { Feature };\n","import { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction addHoverEvent(node, isActive) {\n    const eventName = \"pointer\" + (isActive ? \"enter\" : \"leave\");\n    const callbackName = \"onHover\" + (isActive ? \"Start\" : \"End\");\n    const handleEvent = (event, info) => {\n        if (event.pointerType === \"touch\" || isDragActive())\n            return;\n        const props = node.getProps();\n        if (node.animationState && props.whileHover) {\n            node.animationState.setActive(\"whileHover\", isActive);\n        }\n        if (props[callbackName]) {\n            frame.update(() => props[callbackName](event, info));\n        }\n    };\n    return addPointerEvent(node.current, eventName, handleEvent, {\n        passive: !node.getProps()[callbackName],\n    });\n}\nclass HoverGesture extends Feature {\n    mount() {\n        this.unmount = pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n    }\n    unmount() { }\n}\n\nexport { HoverGesture };\n","import { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\n\nclass FocusGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n    }\n    unmount() { }\n}\n\nexport { FocusGesture };\n","/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nconst isNodeOrChild = (parent, child) => {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nexport { isNodeOrChild };\n","import { extractEventInfo } from '../events/event-info.mjs';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { noop } from '../utils/noop.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction fireSyntheticPointerEvent(name, handler) {\n    if (!handler)\n        return;\n    const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n    handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\nclass PressGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removeStartListeners = noop;\n        this.removeEndListeners = noop;\n        this.removeAccessibleListeners = noop;\n        this.startPointerPress = (startEvent, startInfo) => {\n            if (this.isPressing)\n                return;\n            this.removeEndListeners();\n            const props = this.node.getProps();\n            const endPointerPress = (endEvent, endInfo) => {\n                if (!this.checkPressEnd())\n                    return;\n                const { onTap, onTapCancel, globalTapTarget } = this.node.getProps();\n                frame.update(() => {\n                    /**\n                     * We only count this as a tap gesture if the event.target is the same\n                     * as, or a child of, this component's element\n                     */\n                    !globalTapTarget &&\n                        !isNodeOrChild(this.node.current, endEvent.target)\n                        ? onTapCancel && onTapCancel(endEvent, endInfo)\n                        : onTap && onTap(endEvent, endInfo);\n                });\n            };\n            const removePointerUpListener = addPointerEvent(window, \"pointerup\", endPointerPress, { passive: !(props.onTap || props[\"onPointerUp\"]) });\n            const removePointerCancelListener = addPointerEvent(window, \"pointercancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props.onTapCancel || props[\"onPointerCancel\"]) });\n            this.removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);\n            this.startPress(startEvent, startInfo);\n        };\n        this.startAccessiblePress = () => {\n            const handleKeydown = (keydownEvent) => {\n                if (keydownEvent.key !== \"Enter\" || this.isPressing)\n                    return;\n                const handleKeyup = (keyupEvent) => {\n                    if (keyupEvent.key !== \"Enter\" || !this.checkPressEnd())\n                        return;\n                    fireSyntheticPointerEvent(\"up\", (event, info) => {\n                        const { onTap } = this.node.getProps();\n                        if (onTap) {\n                            frame.update(() => onTap(event, info));\n                        }\n                    });\n                };\n                this.removeEndListeners();\n                this.removeEndListeners = addDomEvent(this.node.current, \"keyup\", handleKeyup);\n                fireSyntheticPointerEvent(\"down\", (event, info) => {\n                    this.startPress(event, info);\n                });\n            };\n            const removeKeydownListener = addDomEvent(this.node.current, \"keydown\", handleKeydown);\n            const handleBlur = () => {\n                if (!this.isPressing)\n                    return;\n                fireSyntheticPointerEvent(\"cancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));\n            };\n            const removeBlurListener = addDomEvent(this.node.current, \"blur\", handleBlur);\n            this.removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);\n        };\n    }\n    startPress(event, info) {\n        this.isPressing = true;\n        const { onTapStart, whileTap } = this.node.getProps();\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", true);\n        }\n        if (onTapStart) {\n            frame.update(() => onTapStart(event, info));\n        }\n    }\n    checkPressEnd() {\n        this.removeEndListeners();\n        this.isPressing = false;\n        const props = this.node.getProps();\n        if (props.whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", false);\n        }\n        return !isDragActive();\n    }\n    cancelPress(event, info) {\n        if (!this.checkPressEnd())\n            return;\n        const { onTapCancel } = this.node.getProps();\n        if (onTapCancel) {\n            frame.update(() => onTapCancel(event, info));\n        }\n    }\n    mount() {\n        const props = this.node.getProps();\n        const removePointerListener = addPointerEvent(props.globalTapTarget ? window : this.node.current, \"pointerdown\", this.startPointerPress, { passive: !(props.onTapStart || props[\"onPointerStart\"]) });\n        const removeFocusListener = addDomEvent(this.node.current, \"focus\", this.startAccessiblePress);\n        this.removeStartListeners = pipe(removePointerListener, removeFocusListener);\n    }\n    unmount() {\n        this.removeStartListeners();\n        this.removeEndListeners();\n        this.removeAccessibleListeners();\n    }\n}\n\nexport { PressGesture };\n","/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nexport { observeIntersection };\n","import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n","import { HoverGesture } from '../../gestures/hover.mjs';\nimport { FocusGesture } from '../../gestures/focus.mjs';\nimport { PressGesture } from '../../gestures/press.mjs';\nimport { InViewFeature } from './viewport/index.mjs';\n\nconst gestureAnimations = {\n    inView: {\n        Feature: InViewFeature,\n    },\n    tap: {\n        Feature: PressGesture,\n    },\n    focus: {\n        Feature: FocusGesture,\n    },\n    hover: {\n        Feature: HoverGesture,\n    },\n};\n\nexport { gestureAnimations };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","import { resolveVariantFromProps } from './resolve-variants.mjs';\n\n/**\n * Creates an object containing the latest state of every MotionValue on a VisualElement\n */\nfunction getCurrent(visualElement) {\n    const current = {};\n    visualElement.values.forEach((value, key) => (current[key] = value.get()));\n    return current;\n}\n/**\n * Creates an object containing the latest velocity of every MotionValue on a VisualElement\n */\nfunction getVelocity(visualElement) {\n    const velocity = {};\n    visualElement.values.forEach((value, key) => (velocity[key] = value.getVelocity()));\n    return velocity;\n}\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, getCurrent(visualElement), getVelocity(visualElement));\n}\n\nexport { resolveVariant };\n","/**\n * Converts seconds to milliseconds\n *\n * @param seconds - Time in seconds.\n * @return milliseconds - Converted time in milliseconds.\n */\nconst secondsToMilliseconds = (seconds) => seconds * 1000;\nconst millisecondsToSeconds = (milliseconds) => milliseconds / 1000;\n\nexport { millisecondsToSeconds, secondsToMilliseconds };\n","const instantAnimationState = {\n    current: false,\n};\n\nexport { instantAnimationState };\n","const isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === \"number\";\n\nexport { isBezierDefinition };\n","import { isBezierDefinition } from '../../../easing/utils/is-bezier-definition.mjs';\n\nfunction isWaapiSupportedEasing(easing) {\n    return Boolean(!easing ||\n        (typeof easing === \"string\" && supportedWaapiEasing[easing]) ||\n        isBezierDefinition(easing) ||\n        (Array.isArray(easing) && easing.every(isWaapiSupportedEasing)));\n}\nconst cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;\nconst supportedWaapiEasing = {\n    linear: \"linear\",\n    ease: \"ease\",\n    easeIn: \"ease-in\",\n    easeOut: \"ease-out\",\n    easeInOut: \"ease-in-out\",\n    circIn: cubicBezierAsString([0, 0.65, 0.55, 1]),\n    circOut: cubicBezierAsString([0.55, 0, 1, 0.45]),\n    backIn: cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),\n    backOut: cubicBezierAsString([0.33, 1.53, 0.69, 0.99]),\n};\nfunction mapEasingToNativeEasing(easing) {\n    if (!easing)\n        return undefined;\n    return isBezierDefinition(easing)\n        ? cubicBezierAsString(easing)\n        : Array.isArray(easing)\n            ? easing.map(mapEasingToNativeEasing)\n            : supportedWaapiEasing[easing];\n}\n\nexport { cubicBezierAsString, isWaapiSupportedEasing, mapEasingToNativeEasing, supportedWaapiEasing };\n","import { mapEasingToNativeEasing } from './easing.mjs';\n\nfunction animateStyle(element, valueName, keyframes, { delay = 0, duration, repeat = 0, repeatType = \"loop\", ease, times, } = {}) {\n    const keyframeOptions = { [valueName]: keyframes };\n    if (times)\n        keyframeOptions.offset = times;\n    const easing = mapEasingToNativeEasing(ease);\n    /**\n     * If this is an easing array, apply to keyframes, not animation as a whole\n     */\n    if (Array.isArray(easing))\n        keyframeOptions.easing = easing;\n    return element.animate(keyframeOptions, {\n        delay,\n        duration,\n        easing: !Array.isArray(easing) ? easing : \"linear\",\n        fill: \"both\",\n        iterations: repeat + 1,\n        direction: repeatType === \"reverse\" ? \"alternate\" : \"normal\",\n    });\n}\n\nexport { animateStyle };\n","function getFinalKeyframe(keyframes, { repeat, repeatType = \"loop\" }) {\n    const index = repeat && repeatType !== \"loop\" && repeat % 2 === 1\n        ? 0\n        : keyframes.length - 1;\n    return keyframes[index];\n}\n\nexport { getFinalKeyframe };\n","import { noop } from '../utils/noop.mjs';\n\n/*\n  Bezier function generator\n  This has been modified from Gaëtan Renaudeau's BezierEasing\n  https://github.com/gre/bezier-easing/blob/master/src/index.js\n  https://github.com/gre/bezier-easing/blob/master/LICENSE\n  \n  I've removed the newtonRaphsonIterate algo because in benchmarking it\n  wasn't noticiably faster than binarySubdivision, indeed removing it\n  usually improved times, depending on the curve.\n  I also removed the lookup table, as for the added bundle size and loop we're\n  only cutting ~4 or so subdivision iterations. I bumped the max iterations up\n  to 12 to compensate and this still tended to be faster for no perceivable\n  loss in accuracy.\n  Usage\n    const easeOut = cubicBezier(.17,.67,.83,.67);\n    const x = easeOut(0.5); // returns 0.627...\n*/\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nconst calcBezier = (t, a1, a2) => (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) *\n    t;\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 12;\nfunction binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = lowerBound + (upperBound - lowerBound) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - x;\n        if (currentX > 0.0) {\n            upperBound = currentT;\n        }\n        else {\n            lowerBound = currentT;\n        }\n    } while (Math.abs(currentX) > subdivisionPrecision &&\n        ++i < subdivisionMaxIterations);\n    return currentT;\n}\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    // If this is a linear gradient, return linear easing\n    if (mX1 === mY1 && mX2 === mY2)\n        return noop;\n    const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);\n    // If animation is at start/end, return t without easing\n    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\n\nexport { cubicBezier };\n","import { cubicBezier } from './cubic-bezier.mjs';\n\nconst easeIn = cubicBezier(0.42, 0, 1, 1);\nconst easeOut = cubicBezier(0, 0, 0.58, 1);\nconst easeInOut = cubicBezier(0.42, 0, 0.58, 1);\n\nexport { easeIn, easeInOut, easeOut };\n","const isEasingArray = (ease) => {\n    return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\n\nexport { isEasingArray };\n","// Accepts an easing function and returns a new one that outputs mirrored values for\n// the second half of the animation. Turns easeIn into easeInOut.\nconst mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n\nexport { mirrorEasing };\n","// Accepts an easing function and returns a new one that outputs reversed values.\n// Turns easeIn into easeOut.\nconst reverseEasing = (easing) => (p) => 1 - easing(1 - p);\n\nexport { reverseEasing };\n","import { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst circIn = (p) => 1 - Math.sin(Math.acos(p));\nconst circOut = reverseEasing(circIn);\nconst circInOut = mirrorEasing(circIn);\n\nexport { circIn, circInOut, circOut };\n","import { cubicBezier } from './cubic-bezier.mjs';\nimport { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst backOut = cubicBezier(0.33, 1.53, 0.69, 0.99);\nconst backIn = reverseEasing(backOut);\nconst backInOut = mirrorEasing(backIn);\n\nexport { backIn, backInOut, backOut };\n","import { backIn } from './back.mjs';\n\nconst anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n\nexport { anticipate };\n","import { invariant } from '../../utils/errors.mjs';\nimport { cubicBezier } from '../cubic-bezier.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { easeIn, easeInOut, easeOut } from '../ease.mjs';\nimport { circIn, circInOut, circOut } from '../circ.mjs';\nimport { backIn, backInOut, backOut } from '../back.mjs';\nimport { anticipate } from '../anticipate.mjs';\n\nconst easingLookup = {\n    linear: noop,\n    easeIn,\n    easeInOut,\n    easeOut,\n    circIn,\n    circInOut,\n    circOut,\n    backIn,\n    backInOut,\n    backOut,\n    anticipate,\n};\nconst easingDefinitionToFunction = (definition) => {\n    if (Array.isArray(definition)) {\n        // If cubic bezier definition, create bezier curve\n        invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);\n        const [x1, y1, x2, y2] = definition;\n        return cubicBezier(x1, y1, x2, y2);\n    }\n    else if (typeof definition === \"string\") {\n        // Else lookup from table\n        invariant(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);\n        return easingLookup[definition];\n    }\n    return definition;\n};\n\nexport { easingDefinitionToFunction };\n","import { mixNumber } from '../mix/number.mjs';\nimport { progress } from '../progress.mjs';\n\nfunction fillOffset(offset, remaining) {\n    const min = offset[offset.length - 1];\n    for (let i = 1; i <= remaining; i++) {\n        const offsetProgress = progress(0, remaining, i);\n        offset.push(mixNumber(min, 1, offsetProgress));\n    }\n}\n\nexport { fillOffset };\n","import { fillOffset } from './fill.mjs';\n\nfunction defaultOffset(arr) {\n    const offset = [0];\n    fillOffset(offset, arr.length - 1);\n    return offset;\n}\n\nexport { defaultOffset };\n","function convertOffsetToTimes(offset, duration) {\n    return offset.map((o) => o * duration);\n}\n\nexport { convertOffsetToTimes };\n","import { easeInOut } from '../../easing/ease.mjs';\nimport { isEasingArray } from '../../easing/utils/is-easing-array.mjs';\nimport { easingDefinitionToFunction } from '../../easing/utils/map.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { convertOffsetToTimes } from '../../utils/offsets/time.mjs';\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction keyframes({ duration = 300, keyframes: keyframeValues, times, ease = \"easeInOut\", }) {\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */\n    const easingFunctions = isEasingArray(ease)\n        ? ease.map(easingDefinitionToFunction)\n        : easingDefinitionToFunction(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = {\n        done: false,\n        value: keyframeValues[0],\n    };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */\n    const absoluteTimes = convertOffsetToTimes(\n    // Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframeValues.length\n        ? times\n        : defaultOffset(keyframeValues), duration);\n    const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {\n        ease: Array.isArray(easingFunctions)\n            ? easingFunctions\n            : defaultEasing(keyframeValues, easingFunctions),\n    });\n    return {\n        calculatedDuration: duration,\n        next: (t) => {\n            state.value = mapTimeToKeyframe(t);\n            state.done = t >= duration;\n            return state;\n        },\n    };\n}\n\nexport { defaultEasing, keyframes };\n","import { velocityPerSecond } from '../../../utils/velocity-per-second.mjs';\n\nconst velocitySampleDuration = 5; // ms\nfunction calcGeneratorVelocity(resolveValue, t, current) {\n    const prevT = Math.max(t - velocitySampleDuration, 0);\n    return velocityPerSecond(current - resolveValue(prevT), t - prevT);\n}\n\nexport { calcGeneratorVelocity };\n","import { warning } from '../../../utils/errors.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\n\nconst safeMin = 0.001;\nconst minDuration = 0.01;\nconst maxDuration = 10.0;\nconst minDamping = 0.05;\nconst maxDamping = 1;\nfunction findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1, }) {\n    let envelope;\n    let derivative;\n    warning(duration <= secondsToMilliseconds(maxDuration), \"Spring duration must be 10 seconds or less\");\n    let dampingRatio = 1 - bounce;\n    /**\n     * Restrict dampingRatio and duration to within acceptable ranges.\n     */\n    dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n    duration = clamp(minDuration, maxDuration, millisecondsToSeconds(duration));\n    if (dampingRatio < 1) {\n        /**\n         * Underdamped spring\n         */\n        envelope = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const a = exponentialDecay - velocity;\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\n            const c = Math.exp(-delta);\n            return safeMin - (a / b) * c;\n        };\n        derivative = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const d = delta * velocity + velocity;\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n            const f = Math.exp(-delta);\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n            return (factor * ((d - e) * f)) / g;\n        };\n    }\n    else {\n        /**\n         * Critically-damped spring\n         */\n        envelope = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (undampedFreq - velocity) * duration + 1;\n            return -safeMin + a * b;\n        };\n        derivative = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (velocity - undampedFreq) * (duration * duration);\n            return a * b;\n        };\n    }\n    const initialGuess = 5 / duration;\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n    duration = secondsToMilliseconds(duration);\n    if (isNaN(undampedFreq)) {\n        return {\n            stiffness: 100,\n            damping: 10,\n            duration,\n        };\n    }\n    else {\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\n        return {\n            stiffness,\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n            duration,\n        };\n    }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n    let result = initialGuess;\n    for (let i = 1; i < rootIterations; i++) {\n        result = result - envelope(result) / derivative(result);\n    }\n    return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n\nexport { calcAngularFreq, findSpring, maxDamping, maxDuration, minDamping, minDuration };\n","import { millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorVelocity } from '../utils/velocity.mjs';\nimport { findSpring, calcAngularFreq } from './find.mjs';\n\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n    return keys.some((key) => options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = {\n        velocity: 0.0,\n        stiffness: 100,\n        damping: 10,\n        mass: 1.0,\n        isResolvedFromDuration: false,\n        ...options,\n    };\n    // stiffness/damping/mass overrides duration/bounce\n    if (!isSpringType(options, physicsKeys) &&\n        isSpringType(options, durationKeys)) {\n        const derived = findSpring(options);\n        springOptions = {\n            ...springOptions,\n            ...derived,\n            mass: 1.0,\n        };\n        springOptions.isResolvedFromDuration = true;\n    }\n    return springOptions;\n}\nfunction spring({ keyframes, restDelta, restSpeed, ...options }) {\n    const origin = keyframes[0];\n    const target = keyframes[keyframes.length - 1];\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: origin };\n    const { stiffness, damping, mass, duration, velocity, isResolvedFromDuration, } = getSpringOptions({\n        ...options,\n        velocity: -millisecondsToSeconds(options.velocity || 0),\n    });\n    const initialVelocity = velocity || 0.0;\n    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    const initialDelta = target - origin;\n    const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));\n    /**\n     * If we're working on a granular scale, use smaller defaults for determining\n     * when the spring is finished.\n     *\n     * These defaults have been selected emprically based on what strikes a good\n     * ratio between feeling good and finishing as soon as changes are imperceptible.\n     */\n    const isGranularScale = Math.abs(initialDelta) < 5;\n    restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);\n    restDelta || (restDelta = isGranularScale ? 0.005 : 0.5);\n    let resolveSpring;\n    if (dampingRatio < 1) {\n        const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n        // Underdamped spring\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            return (target -\n                envelope *\n                    (((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) /\n                        angularFreq) *\n                        Math.sin(angularFreq * t) +\n                        initialDelta * Math.cos(angularFreq * t)));\n        };\n    }\n    else if (dampingRatio === 1) {\n        // Critically damped spring\n        resolveSpring = (t) => target -\n            Math.exp(-undampedAngularFreq * t) *\n                (initialDelta +\n                    (initialVelocity + undampedAngularFreq * initialDelta) * t);\n    }\n    else {\n        // Overdamped spring\n        const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            // When performing sinh or cosh values can hit Infinity so we cap them here\n            const freqForT = Math.min(dampedAngularFreq * t, 300);\n            return (target -\n                (envelope *\n                    ((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) *\n                        Math.sinh(freqForT) +\n                        dampedAngularFreq *\n                            initialDelta *\n                            Math.cosh(freqForT))) /\n                    dampedAngularFreq);\n        };\n    }\n    return {\n        calculatedDuration: isResolvedFromDuration ? duration || null : null,\n        next: (t) => {\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                let currentVelocity = initialVelocity;\n                if (t !== 0) {\n                    /**\n                     * We only need to calculate velocity for under-damped springs\n                     * as over- and critically-damped springs can't overshoot, so\n                     * checking only for displacement is enough.\n                     */\n                    if (dampingRatio < 1) {\n                        currentVelocity = calcGeneratorVelocity(resolveSpring, t, current);\n                    }\n                    else {\n                        currentVelocity = 0;\n                    }\n                }\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;\n                state.done =\n                    isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            }\n            else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? target : current;\n            return state;\n        },\n    };\n}\n\nexport { spring };\n","import { spring } from './spring/index.mjs';\nimport { calcGeneratorVelocity } from './utils/velocity.mjs';\n\nfunction inertia({ keyframes, velocity = 0.0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed, }) {\n    const origin = keyframes[0];\n    const state = {\n        done: false,\n        value: origin,\n    };\n    const isOutOfBounds = (v) => (min !== undefined && v < min) || (max !== undefined && v > max);\n    const nearestBoundary = (v) => {\n        if (min === undefined)\n            return max;\n        if (max === undefined)\n            return min;\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    };\n    let amplitude = power * velocity;\n    const ideal = origin + amplitude;\n    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n    /**\n     * If the target has changed we need to re-calculate the amplitude, otherwise\n     * the animation will start from the wrong position.\n     */\n    if (target !== ideal)\n        amplitude = target - origin;\n    const calcDelta = (t) => -amplitude * Math.exp(-t / timeConstant);\n    const calcLatest = (t) => target + calcDelta(t);\n    const applyFriction = (t) => {\n        const delta = calcDelta(t);\n        const latest = calcLatest(t);\n        state.done = Math.abs(delta) <= restDelta;\n        state.value = state.done ? target : latest;\n    };\n    /**\n     * Ideally this would resolve for t in a stateless way, we could\n     * do that by always precalculating the animation but as we know\n     * this will be done anyway we can assume that spring will\n     * be discovered during that.\n     */\n    let timeReachedBoundary;\n    let spring$1;\n    const checkCatchBoundary = (t) => {\n        if (!isOutOfBounds(state.value))\n            return;\n        timeReachedBoundary = t;\n        spring$1 = spring({\n            keyframes: [state.value, nearestBoundary(state.value)],\n            velocity: calcGeneratorVelocity(calcLatest, t, state.value),\n            damping: bounceDamping,\n            stiffness: bounceStiffness,\n            restDelta,\n            restSpeed,\n        });\n    };\n    checkCatchBoundary(0);\n    return {\n        calculatedDuration: null,\n        next: (t) => {\n            /**\n             * We need to resolve the friction to figure out if we need a\n             * spring but we don't want to do this twice per frame. So here\n             * we flag if we updated for this frame and later if we did\n             * we can skip doing it again.\n             */\n            let hasUpdatedFrame = false;\n            if (!spring$1 && timeReachedBoundary === undefined) {\n                hasUpdatedFrame = true;\n                applyFriction(t);\n                checkCatchBoundary(t);\n            }\n            /**\n             * If we have a spring and the provided t is beyond the moment the friction\n             * animation crossed the min/max boundary, use the spring.\n             */\n            if (timeReachedBoundary !== undefined && t > timeReachedBoundary) {\n                return spring$1.next(t - timeReachedBoundary);\n            }\n            else {\n                !hasUpdatedFrame && applyFriction(t);\n                return state;\n            }\n        },\n    };\n}\n\nexport { inertia };\n","import { time } from '../../../frameloop/sync-time.mjs';\nimport { frame, cancelFrame, frameData } from '../../../frameloop/frame.mjs';\n\nconst frameloopDriver = (update) => {\n    const passTimestamp = ({ timestamp }) => update(timestamp);\n    return {\n        start: () => frame.update(passTimestamp, true),\n        stop: () => cancelFrame(passTimestamp),\n        /**\n         * If we're processing this frame we can use the\n         * framelocked timestamp to keep things in sync.\n         */\n        now: () => (frameData.isProcessing ? frameData.timestamp : time.now()),\n    };\n};\n\nexport { frameloopDriver };\n","/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxGeneratorDuration = 20000;\nfunction calcGeneratorDuration(generator) {\n    let duration = 0;\n    const timeStep = 50;\n    let state = generator.next(duration);\n    while (!state.done && duration < maxGeneratorDuration) {\n        duration += timeStep;\n        state = generator.next(duration);\n    }\n    return duration >= maxGeneratorDuration ? Infinity : duration;\n}\n\nexport { calcGeneratorDuration, maxGeneratorDuration };\n","import { keyframes } from '../../generators/keyframes.mjs';\nimport { spring } from '../../generators/spring/index.mjs';\nimport { inertia } from '../../generators/inertia.mjs';\nimport { frameloopDriver } from './driver-frameloop.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorDuration } from '../../generators/utils/calc-duration.mjs';\nimport { invariant } from '../../../utils/errors.mjs';\nimport { mix } from '../../../utils/mix/index.mjs';\nimport { pipe } from '../../../utils/pipe.mjs';\n\nconst types = {\n    decay: inertia,\n    inertia,\n    tween: keyframes,\n    keyframes: keyframes,\n    spring,\n};\nconst percentToProgress = (percent) => percent / 100;\n/**\n * Animate a single value on the main thread.\n *\n * This function is written, where functionality overlaps,\n * to be largely spec-compliant with WAAPI to allow fungibility\n * between the two.\n */\nfunction animateValue({ autoplay = true, delay = 0, driver = frameloopDriver, keyframes: keyframes$1, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", onPlay, onStop, onComplete, onUpdate, ...options }) {\n    let speed = 1;\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Resolve the current Promise every time we enter the\n     * finished state. This is WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let animationDriver;\n    const generatorFactory = types[type] || keyframes;\n    /**\n     * If this isn't the keyframes generator and we've been provided\n     * strings as keyframes, we need to interpolate these.\n     */\n    let mapNumbersToKeyframes;\n    if (generatorFactory !== keyframes &&\n        typeof keyframes$1[0] !== \"number\") {\n        if (process.env.NODE_ENV !== \"production\") {\n            invariant(keyframes$1.length === 2, `Only two keyframes currently supported with spring and inertia animations. Trying to animate ${keyframes$1}`);\n        }\n        mapNumbersToKeyframes = pipe(percentToProgress, mix(keyframes$1[0], keyframes$1[1]));\n        keyframes$1 = [0, 100];\n    }\n    const generator = generatorFactory({ ...options, keyframes: keyframes$1 });\n    let mirroredGenerator;\n    if (repeatType === \"mirror\") {\n        mirroredGenerator = generatorFactory({\n            ...options,\n            keyframes: [...keyframes$1].reverse(),\n            velocity: -(options.velocity || 0),\n        });\n    }\n    let playState = \"idle\";\n    let holdTime = null;\n    let startTime = null;\n    let cancelTime = null;\n    /**\n     * If duration is undefined and we have repeat options,\n     * we need to calculate a duration from the generator.\n     *\n     * We set it to the generator itself to cache the duration.\n     * Any timeline resolver will need to have already precalculated\n     * the duration by this step.\n     */\n    if (generator.calculatedDuration === null && repeat) {\n        generator.calculatedDuration = calcGeneratorDuration(generator);\n    }\n    const { calculatedDuration } = generator;\n    let resolvedDuration = Infinity;\n    let totalDuration = Infinity;\n    if (calculatedDuration !== null) {\n        resolvedDuration = calculatedDuration + repeatDelay;\n        totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n    }\n    let currentTime = 0;\n    const tick = (timestamp) => {\n        if (startTime === null)\n            return;\n        /**\n         * requestAnimationFrame timestamps can come through as lower than\n         * the startTime as set by performance.now(). Here we prevent this,\n         * though in the future it could be possible to make setting startTime\n         * a pending operation that gets resolved here.\n         */\n        if (speed > 0)\n            startTime = Math.min(startTime, timestamp);\n        if (speed < 0)\n            startTime = Math.min(timestamp - totalDuration / speed, startTime);\n        if (holdTime !== null) {\n            currentTime = holdTime;\n        }\n        else {\n            // Rounding the time because floating point arithmetic is not always accurate, e.g. 3000.367 - 1000.367 =\n            // 2000.0000000000002. This is a problem when we are comparing the currentTime with the duration, for\n            // example.\n            currentTime = Math.round(timestamp - startTime) * speed;\n        }\n        // Rebase on delay\n        const timeWithoutDelay = currentTime - delay * (speed >= 0 ? 1 : -1);\n        const isInDelayPhase = speed >= 0 ? timeWithoutDelay < 0 : timeWithoutDelay > totalDuration;\n        currentTime = Math.max(timeWithoutDelay, 0);\n        /**\n         * If this animation has finished, set the current time\n         * to the total duration.\n         */\n        if (playState === \"finished\" && holdTime === null) {\n            currentTime = totalDuration;\n        }\n        let elapsed = currentTime;\n        let frameGenerator = generator;\n        if (repeat) {\n            /**\n             * Get the current progress (0-1) of the animation. If t is >\n             * than duration we'll get values like 2.5 (midway through the\n             * third iteration)\n             */\n            const progress = Math.min(currentTime, totalDuration) / resolvedDuration;\n            /**\n             * Get the current iteration (0 indexed). For instance the floor of\n             * 2.5 is 2.\n             */\n            let currentIteration = Math.floor(progress);\n            /**\n             * Get the current progress of the iteration by taking the remainder\n             * so 2.5 is 0.5 through iteration 2\n             */\n            let iterationProgress = progress % 1.0;\n            /**\n             * If iteration progress is 1 we count that as the end\n             * of the previous iteration.\n             */\n            if (!iterationProgress && progress >= 1) {\n                iterationProgress = 1;\n            }\n            iterationProgress === 1 && currentIteration--;\n            currentIteration = Math.min(currentIteration, repeat + 1);\n            /**\n             * Reverse progress if we're not running in \"normal\" direction\n             */\n            const isOddIteration = Boolean(currentIteration % 2);\n            if (isOddIteration) {\n                if (repeatType === \"reverse\") {\n                    iterationProgress = 1 - iterationProgress;\n                    if (repeatDelay) {\n                        iterationProgress -= repeatDelay / resolvedDuration;\n                    }\n                }\n                else if (repeatType === \"mirror\") {\n                    frameGenerator = mirroredGenerator;\n                }\n            }\n            elapsed = clamp(0, 1, iterationProgress) * resolvedDuration;\n        }\n        /**\n         * If we're in negative time, set state as the initial keyframe.\n         * This prevents delay: x, duration: 0 animations from finishing\n         * instantly.\n         */\n        const state = isInDelayPhase\n            ? { done: false, value: keyframes$1[0] }\n            : frameGenerator.next(elapsed);\n        if (mapNumbersToKeyframes) {\n            state.value = mapNumbersToKeyframes(state.value);\n        }\n        let { done } = state;\n        if (!isInDelayPhase && calculatedDuration !== null) {\n            done = speed >= 0 ? currentTime >= totalDuration : currentTime <= 0;\n        }\n        const isAnimationFinished = holdTime === null &&\n            (playState === \"finished\" || (playState === \"running\" && done));\n        if (onUpdate) {\n            onUpdate(state.value);\n        }\n        if (isAnimationFinished) {\n            finish();\n        }\n        return state;\n    };\n    const stopAnimationDriver = () => {\n        animationDriver && animationDriver.stop();\n        animationDriver = undefined;\n    };\n    const cancel = () => {\n        playState = \"idle\";\n        stopAnimationDriver();\n        resolveFinishedPromise();\n        updateFinishedPromise();\n        startTime = cancelTime = null;\n    };\n    const finish = () => {\n        playState = \"finished\";\n        onComplete && onComplete();\n        stopAnimationDriver();\n        resolveFinishedPromise();\n    };\n    const play = () => {\n        if (hasStopped)\n            return;\n        if (!animationDriver)\n            animationDriver = driver(tick);\n        const now = animationDriver.now();\n        onPlay && onPlay();\n        if (holdTime !== null) {\n            startTime = now - holdTime;\n        }\n        else if (!startTime || playState === \"finished\") {\n            startTime = now;\n        }\n        if (playState === \"finished\") {\n            updateFinishedPromise();\n        }\n        cancelTime = startTime;\n        holdTime = null;\n        /**\n         * Set playState to running only after we've used it in\n         * the previous logic.\n         */\n        playState = \"running\";\n        animationDriver.start();\n    };\n    if (autoplay) {\n        play();\n    }\n    const controls = {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        get time() {\n            return millisecondsToSeconds(currentTime);\n        },\n        set time(newTime) {\n            newTime = secondsToMilliseconds(newTime);\n            currentTime = newTime;\n            if (holdTime !== null || !animationDriver || speed === 0) {\n                holdTime = newTime;\n            }\n            else {\n                startTime = animationDriver.now() - newTime / speed;\n            }\n        },\n        get duration() {\n            const duration = generator.calculatedDuration === null\n                ? calcGeneratorDuration(generator)\n                : generator.calculatedDuration;\n            return millisecondsToSeconds(duration);\n        },\n        get speed() {\n            return speed;\n        },\n        set speed(newSpeed) {\n            if (newSpeed === speed || !animationDriver)\n                return;\n            speed = newSpeed;\n            controls.time = millisecondsToSeconds(currentTime);\n        },\n        get state() {\n            return playState;\n        },\n        play,\n        pause: () => {\n            playState = \"paused\";\n            holdTime = currentTime;\n        },\n        stop: () => {\n            hasStopped = true;\n            if (playState === \"idle\")\n                return;\n            playState = \"idle\";\n            onStop && onStop();\n            cancel();\n        },\n        cancel: () => {\n            if (cancelTime !== null)\n                tick(cancelTime);\n            cancel();\n        },\n        complete: () => {\n            playState = \"finished\";\n        },\n        sample: (elapsed) => {\n            startTime = 0;\n            return tick(elapsed);\n        },\n    };\n    return controls;\n}\n\nexport { animateValue };\n","function memo(callback) {\n    let result;\n    return () => {\n        if (result === undefined)\n            result = callback();\n        return result;\n    };\n}\n\nexport { memo };\n","import { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { animateValue } from '../js/index.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { memo } from '../../../utils/memo.mjs';\nimport { noop } from '../../../utils/noop.mjs';\nimport { frame, cancelFrame } from '../../../frameloop/frame.mjs';\n\nconst supportsWaapi = memo(() => Object.hasOwnProperty.call(Element.prototype, \"animate\"));\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\n    \"opacity\",\n    \"clipPath\",\n    \"filter\",\n    \"transform\",\n]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nconst requiresPregeneratedKeyframes = (valueName, options) => options.type === \"spring\" ||\n    valueName === \"backgroundColor\" ||\n    !isWaapiSupportedEasing(options.ease);\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    const canAccelerateAnimation = supportsWaapi() &&\n        acceleratedValues.has(valueName) &&\n        !options.repeatDelay &&\n        options.repeatType !== \"mirror\" &&\n        options.damping !== 0 &&\n        options.type !== \"inertia\";\n    if (!canAccelerateAnimation)\n        return false;\n    /**\n     * TODO: Unify with js/index\n     */\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Cancelling an animation will write to the DOM. For safety we want to defer\n     * this until the next `update` frame lifecycle. This flag tracks whether we\n     * have a pending cancel, if so we shouldn't allow animations to finish.\n     */\n    let pendingCancel = false;\n    /**\n     * Resolve the current Promise every time we enter the\n     * finished state. This is WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let { keyframes, duration = 300, ease, times } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (requiresPregeneratedKeyframes(valueName, options)) {\n        const sampleAnimation = animateValue({\n            ...options,\n            repeat: 0,\n            delay: 0,\n        });\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        /**\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\n         * we're heading for an infinite loop.\n         */\n        let t = 0;\n        while (!state.done && t < maxDuration) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        times = undefined;\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n        times,\n    });\n    const cancelAnimation = () => {\n        pendingCancel = false;\n        animation.cancel();\n    };\n    const safeCancel = () => {\n        pendingCancel = true;\n        frame.update(cancelAnimation);\n        resolveFinishedPromise();\n        updateFinishedPromise();\n    };\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        if (pendingCancel)\n            return;\n        value.set(getFinalKeyframe(keyframes, options));\n        onComplete && onComplete();\n        safeCancel();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    const controls = {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        attachTimeline(timeline) {\n            animation.timeline = timeline;\n            animation.onfinish = null;\n            return noop;\n        },\n        get time() {\n            return millisecondsToSeconds(animation.currentTime || 0);\n        },\n        set time(newTime) {\n            animation.currentTime = secondsToMilliseconds(newTime);\n        },\n        get speed() {\n            return animation.playbackRate;\n        },\n        set speed(newSpeed) {\n            animation.playbackRate = newSpeed;\n        },\n        get duration() {\n            return millisecondsToSeconds(duration);\n        },\n        play: () => {\n            if (hasStopped)\n                return;\n            animation.play();\n            /**\n             * Cancel any pending cancel tasks\n             */\n            cancelFrame(cancelAnimation);\n        },\n        pause: () => animation.pause(),\n        stop: () => {\n            hasStopped = true;\n            if (animation.playState === \"idle\")\n                return;\n            /**\n             * WAAPI doesn't natively have any interruption capabilities.\n             *\n             * Rather than read commited styles back out of the DOM, we can\n             * create a renderless JS animation and sample it twice to calculate\n             * its current value, \"previous\" value, and therefore allow\n             * Motion to calculate velocity for any subsequent animation.\n             */\n            const { currentTime } = animation;\n            if (currentTime) {\n                const sampleAnimation = animateValue({\n                    ...options,\n                    autoplay: false,\n                });\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n            }\n            safeCancel();\n        },\n        complete: () => {\n            if (pendingCancel)\n                return;\n            animation.finish();\n        },\n        cancel: safeCancel,\n    };\n    return controls;\n}\n\nexport { createAcceleratedAnimation };\n","import { animateValue } from './js/index.mjs';\nimport { noop } from '../../utils/noop.mjs';\n\nfunction createInstantAnimation({ keyframes, delay, onUpdate, onComplete, }) {\n    const setValue = () => {\n        onUpdate && onUpdate(keyframes[keyframes.length - 1]);\n        onComplete && onComplete();\n        /**\n         * TODO: As this API grows it could make sense to always return\n         * animateValue. This will be a bigger project as animateValue\n         * is frame-locked whereas this function resolves instantly.\n         * This is a behavioural change and also has ramifications regarding\n         * assumptions within tests.\n         */\n        return {\n            time: 0,\n            speed: 1,\n            duration: 0,\n            play: (noop),\n            pause: (noop),\n            stop: (noop),\n            then: (resolve) => {\n                resolve();\n                return Promise.resolve();\n            },\n            cancel: (noop),\n            complete: (noop),\n        };\n    };\n    return delay\n        ? animateValue({\n            keyframes: [0, 1],\n            duration: 0,\n            delay,\n            onComplete: setValue,\n        })\n        : setValue();\n}\n\nexport { createInstantAnimation };\n","import { transformProps } from '../../render/html/utils/transform.mjs';\n\nconst underDampedSpring = {\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10,\n};\nconst criticallyDampedSpring = (target) => ({\n    type: \"spring\",\n    stiffness: 550,\n    damping: target === 0 ? 2 * Math.sqrt(550) : 30,\n    restSpeed: 10,\n});\nconst keyframesTransition = {\n    type: \"keyframes\",\n    duration: 0.8,\n};\n/**\n * Default easing curve is a slightly shallower version of\n * the default browser easing curve.\n */\nconst ease = {\n    type: \"keyframes\",\n    ease: [0.25, 0.1, 0.35, 1],\n    duration: 0.3,\n};\nconst getDefaultTransition = (valueKey, { keyframes }) => {\n    if (keyframes.length > 2) {\n        return keyframesTransition;\n    }\n    else if (transformProps.has(valueKey)) {\n        return valueKey.startsWith(\"scale\")\n            ? criticallyDampedSpring(keyframes[1])\n            : underDampedSpring;\n    }\n    return ease;\n};\n\nexport { getDefaultTransition };\n","import { complex } from '../../value/types/complex/index.mjs';\n\n/**\n * Check if a value is animatable. Examples:\n *\n * ✅: 100, \"100px\", \"#fff\"\n * ❌: \"block\", \"url(2.jpg)\"\n * @param value\n *\n * @internal\n */\nconst isAnimatable = (key, value) => {\n    // If the list of keys tat might be non-animatable grows, replace with Set\n    if (key === \"zIndex\")\n        return false;\n    // If it's a number or a keyframes array, we can animate it. We might at some point\n    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,\n    // but for now lets leave it like this for performance reasons\n    if (typeof value === \"number\" || Array.isArray(value))\n        return true;\n    if (typeof value === \"string\" && // It's animatable if we have a string\n        (complex.test(value) || value === \"0\") && // And it contains numbers and/or colors\n        !value.startsWith(\"url(\") // Unless it starts with \"url(\"\n    ) {\n        return true;\n    }\n    return false;\n};\n\nexport { isAnimatable };\n","import { complex } from './index.mjs';\nimport { floatRegex } from '../utils.mjs';\n\n/**\n * Properties that should default to 1 or 100%\n */\nconst maxDefaults = new Set([\"brightness\", \"contrast\", \"saturate\", \"opacity\"]);\nfunction applyDefaultFilter(v) {\n    const [name, value] = v.slice(0, -1).split(\"(\");\n    if (name === \"drop-shadow\")\n        return v;\n    const [number] = value.match(floatRegex) || [];\n    if (!number)\n        return v;\n    const unit = value.replace(number, \"\");\n    let defaultValue = maxDefaults.has(name) ? 1 : 0;\n    if (number !== value)\n        defaultValue *= 100;\n    return name + \"(\" + defaultValue + unit + \")\";\n}\nconst functionRegex = /([a-z-]*)\\(.*?\\)/g;\nconst filter = {\n    ...complex,\n    getAnimatableNone: (v) => {\n        const functions = v.match(functionRegex);\n        return functions ? functions.map(applyDefaultFilter).join(\" \") : v;\n    },\n};\n\nexport { filter };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { numberValueTypes } from './number.mjs';\n\n/**\n * A map of default value types for common values\n */\nconst defaultValueTypes = {\n    ...numberValueTypes,\n    // Color props\n    color,\n    backgroundColor: color,\n    outlineColor: color,\n    fill: color,\n    stroke: color,\n    // Border props\n    borderColor: color,\n    borderTopColor: color,\n    borderRightColor: color,\n    borderBottomColor: color,\n    borderLeftColor: color,\n    filter,\n    WebkitFilter: filter,\n};\n/**\n * Gets the default ValueType for the provided value key\n */\nconst getDefaultValueType = (key) => defaultValueTypes[key];\n\nexport { defaultValueTypes, getDefaultValueType };\n","import { complex } from '../../../value/types/complex/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { getDefaultValueType } from './defaults.mjs';\n\nfunction getAnimatableNone(key, value) {\n    let defaultValueType = getDefaultValueType(key);\n    if (defaultValueType !== filter)\n        defaultValueType = complex;\n    // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n    return defaultValueType.getAnimatableNone\n        ? defaultValueType.getAnimatableNone(value)\n        : undefined;\n}\n\nexport { getAnimatableNone };\n","/**\n * Check if the value is a zero value string like \"0px\" or \"0%\"\n */\nconst isZeroValueString = (v) => /^0[^.\\s]+$/.test(v);\n\nexport { isZeroValueString };\n","import { isZeroValueString } from '../../utils/is-zero-value-string.mjs';\n\nfunction isNone(value) {\n    if (typeof value === \"number\") {\n        return value === 0;\n    }\n    else if (value !== null) {\n        return value === \"none\" || value === \"0\" || isZeroValueString(value);\n    }\n}\n\nexport { isNone };\n","import { getAnimatableNone } from '../../render/dom/value-types/animatable-none.mjs';\nimport { isAnimatable } from './is-animatable.mjs';\nimport { isNone } from './is-none.mjs';\n\nfunction getKeyframes(value, valueName, target, transition) {\n    const isTargetAnimatable = isAnimatable(valueName, target);\n    let keyframes;\n    if (Array.isArray(target)) {\n        keyframes = [...target];\n    }\n    else {\n        keyframes = [null, target];\n    }\n    const defaultOrigin = transition.from !== undefined ? transition.from : value.get();\n    let animatableTemplateValue = undefined;\n    const noneKeyframeIndexes = [];\n    for (let i = 0; i < keyframes.length; i++) {\n        /**\n         * Fill null/wildcard keyframes\n         */\n        if (keyframes[i] === null) {\n            keyframes[i] = i === 0 ? defaultOrigin : keyframes[i - 1];\n        }\n        if (isNone(keyframes[i])) {\n            noneKeyframeIndexes.push(i);\n        }\n        // TODO: Clean this conditional, it works for now\n        if (typeof keyframes[i] === \"string\" &&\n            keyframes[i] !== \"none\" &&\n            keyframes[i] !== \"0\") {\n            animatableTemplateValue = keyframes[i];\n        }\n    }\n    if (isTargetAnimatable &&\n        noneKeyframeIndexes.length &&\n        animatableTemplateValue) {\n        for (let i = 0; i < noneKeyframeIndexes.length; i++) {\n            const index = noneKeyframeIndexes[i];\n            keyframes[index] = getAnimatableNone(valueName, animatableTemplateValue);\n        }\n    }\n    return keyframes;\n}\n\nexport { getKeyframes };\n","/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */\nfunction isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {\n    return !!Object.keys(transition).length;\n}\nfunction getValueTransition(transition, key) {\n    return transition[key] || transition[\"default\"] || transition;\n}\n\nexport { getValueTransition, isTransitionDefined };\n","import { warning } from '../../utils/errors.mjs';\nimport { secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { createAcceleratedAnimation } from '../animators/waapi/create-accelerated-animation.mjs';\nimport { createInstantAnimation } from '../animators/instant.mjs';\nimport { getDefaultTransition } from '../utils/default-transitions.mjs';\nimport { isAnimatable } from '../utils/is-animatable.mjs';\nimport { getKeyframes } from '../utils/keyframes.mjs';\nimport { getValueTransition, isTransitionDefined } from '../utils/transitions.mjs';\nimport { animateValue } from '../animators/js/index.mjs';\nimport { MotionGlobalConfig } from '../../utils/GlobalConfig.mjs';\n\nconst animateMotionValue = (valueName, value, target, transition = {}) => {\n    return (onComplete) => {\n        const valueTransition = getValueTransition(transition, valueName) || {};\n        /**\n         * Most transition values are currently completely overwritten by value-specific\n         * transitions. In the future it'd be nicer to blend these transitions. But for now\n         * delay actually does inherit from the root transition if not value-specific.\n         */\n        const delay = valueTransition.delay || transition.delay || 0;\n        /**\n         * Elapsed isn't a public transition option but can be passed through from\n         * optimized appear effects in milliseconds.\n         */\n        let { elapsed = 0 } = transition;\n        elapsed = elapsed - secondsToMilliseconds(delay);\n        const keyframes = getKeyframes(value, valueName, target, valueTransition);\n        /**\n         * Check if we're able to animate between the start and end keyframes,\n         * and throw a warning if we're attempting to animate between one that's\n         * animatable and another that isn't.\n         */\n        const originKeyframe = keyframes[0];\n        const targetKeyframe = keyframes[keyframes.length - 1];\n        const isOriginAnimatable = isAnimatable(valueName, originKeyframe);\n        const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);\n        warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from \"${originKeyframe}\" to \"${targetKeyframe}\". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \\`style\\` property.`);\n        let options = {\n            keyframes,\n            velocity: value.getVelocity(),\n            ease: \"easeOut\",\n            ...valueTransition,\n            delay: -elapsed,\n            onUpdate: (v) => {\n                value.set(v);\n                valueTransition.onUpdate && valueTransition.onUpdate(v);\n            },\n            onComplete: () => {\n                onComplete();\n                valueTransition.onComplete && valueTransition.onComplete();\n            },\n        };\n        /**\n         * If there's no transition defined for this value, we can generate\n         * unqiue transition settings for this value.\n         */\n        if (!isTransitionDefined(valueTransition)) {\n            options = {\n                ...options,\n                ...getDefaultTransition(valueName, options),\n            };\n        }\n        /**\n         * Both WAAPI and our internal animation functions use durations\n         * as defined by milliseconds, while our external API defines them\n         * as seconds.\n         */\n        if (options.duration) {\n            options.duration = secondsToMilliseconds(options.duration);\n        }\n        if (options.repeatDelay) {\n            options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n        }\n        if (!isOriginAnimatable ||\n            !isTargetAnimatable ||\n            instantAnimationState.current ||\n            valueTransition.type === false ||\n            MotionGlobalConfig.skipAnimations) {\n            /**\n             * If we can't animate this value, or the global instant animation flag is set,\n             * or this is simply defined as an instant transition, return an instant transition.\n             */\n            return createInstantAnimation(instantAnimationState.current\n                ? { ...options, delay: 0 }\n                : options);\n        }\n        /**\n         * Animate via WAAPI if possible.\n         */\n        if (\n        /**\n         * If this is a handoff animation, the optimised animation will be running via\n         * WAAPI. Therefore, this animation must be JS to ensure it runs \"under\" the\n         * optimised animation.\n         */\n        !transition.isHandoff &&\n            value.owner &&\n            value.owner.current instanceof HTMLElement &&\n            /**\n             * If we're outputting values to onUpdate then we can't use WAAPI as there's\n             * no way to read the value from WAAPI every frame.\n             */\n            !value.owner.getProps().onUpdate) {\n            const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);\n            if (acceleratedAnimation)\n                return acceleratedAnimation;\n        }\n        /**\n         * If we didn't create an accelerated animation, create a JS animation\n         */\n        return animateValue(options);\n    };\n};\n\nexport { animateMotionValue };\n","import { isMotionValue } from '../utils/is-motion-value.mjs';\n\nfunction isWillChangeMotionValue(value) {\n    return Boolean(isMotionValue(value) && value.add);\n}\n\nexport { isWillChangeMotionValue };\n","/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */\nconst isNumericalString = (v) => /^\\-?\\d*\\.?\\d+$/.test(v);\n\nexport { isNumericalString };\n","/**\n * Tests a provided value against a ValueType\n */\nconst testValueType = (v) => (type) => type.test(v);\n\nexport { testValueType };\n","/**\n * ValueType for \"auto\"\n */\nconst auto = {\n    test: (v) => v === \"auto\",\n    parse: (v) => v,\n};\n\nexport { auto };\n","import { number } from '../../../value/types/numbers/index.mjs';\nimport { px, percent, degrees, vw, vh } from '../../../value/types/numbers/units.mjs';\nimport { testValueType } from './test.mjs';\nimport { auto } from './type-auto.mjs';\n\n/**\n * A list of value types commonly used for dimensions\n */\nconst dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */\nconst findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));\n\nexport { dimensionValueTypes, findDimensionValueType };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { complex } from '../../../value/types/complex/index.mjs';\nimport { dimensionValueTypes } from './dimensions.mjs';\nimport { testValueType } from './test.mjs';\n\n/**\n * A list of all ValueTypes\n */\nconst valueTypes = [...dimensionValueTypes, color, complex];\n/**\n * Tests a value against the list of ValueTypes\n */\nconst findValueType = (v) => valueTypes.find(testValueType(v));\n\nexport { findValueType };\n","import { isNumericalString } from '../../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../../utils/is-zero-value-string.mjs';\nimport { resolveFinalValueInKeyframes } from '../../utils/resolve-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\nimport { getAnimatableNone } from '../dom/value-types/animatable-none.mjs';\nimport { findValueType } from '../dom/value-types/find.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {};\n    target = { ...target, ...transitionEnd };\n    for (const key in target) {\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [...variantLabels].reverse();\n    reversedLabels.forEach((key) => {\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        if (visualElement.variantChildren) {\n            visualElement.variantChildren.forEach((child) => {\n                setVariants(child, variantLabels);\n            });\n        }\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\nfunction checkTargetForNewValues(visualElement, target, origin) {\n    var _a, _b;\n    const newValueKeys = Object.keys(target).filter((key) => !visualElement.hasValue(key));\n    const numNewValues = newValueKeys.length;\n    if (!numNewValues)\n        return;\n    for (let i = 0; i < numNewValues; i++) {\n        const key = newValueKeys[i];\n        const targetValue = target[key];\n        let value = null;\n        /**\n         * If the target is a series of keyframes, we can use the first value\n         * in the array. If this first value is null, we'll still need to read from the DOM.\n         */\n        if (Array.isArray(targetValue)) {\n            value = targetValue[0];\n        }\n        /**\n         * If the target isn't keyframes, or the first keyframe was null, we need to\n         * first check if an origin value was explicitly defined in the transition as \"from\",\n         * if not read the value from the DOM. As an absolute fallback, take the defined target value.\n         */\n        if (value === null) {\n            value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];\n        }\n        /**\n         * If value is still undefined or null, ignore it. Preferably this would throw,\n         * but this was causing issues in Framer.\n         */\n        if (value === undefined || value === null)\n            continue;\n        if (typeof value === \"string\" &&\n            (isNumericalString(value) || isZeroValueString(value))) {\n            // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n            value = parseFloat(value);\n        }\n        else if (!findValueType(value) && complex.test(targetValue)) {\n            value = getAnimatableNone(key, targetValue);\n        }\n        visualElement.addValue(key, motionValue(value, { owner: visualElement }));\n        if (origin[key] === undefined) {\n            origin[key] = value;\n        }\n        if (value !== null)\n            visualElement.setBaseTarget(key, value);\n    }\n}\nfunction getOriginFromTransition(key, transition) {\n    if (!transition)\n        return;\n    const valueTransition = transition[key] || transition[\"default\"] || transition;\n    return valueTransition.from;\n}\nfunction getOrigin(target, transition, visualElement) {\n    const origin = {};\n    for (const key in target) {\n        const transitionOrigin = getOriginFromTransition(key, transition);\n        if (transitionOrigin !== undefined) {\n            origin[key] = transitionOrigin;\n        }\n        else {\n            const value = visualElement.getValue(key);\n            if (value) {\n                origin[key] = value.get();\n            }\n        }\n    }\n    return origin;\n}\n\nexport { checkTargetForNewValues, getOrigin, getOriginFromTransition, setTarget, setValues };\n","import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/transitions.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction hasKeyframesChanged(value, target) {\n    const current = value.get();\n    if (Array.isArray(target)) {\n        for (let i = 0; i < target.length; i++) {\n            if (target[i] !== current)\n                return true;\n        }\n    }\n    else {\n        return current !== target;\n    }\n}\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            elapsed: 0,\n            ...getValueTransition(transition || {}, key),\n        };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        if (window.HandoffAppearAnimations) {\n            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n            if (appearId) {\n                const elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n                if (elapsed !== null) {\n                    valueTransition.elapsed = elapsed;\n                    valueTransition.isHandoff = true;\n                }\n            }\n        }\n        let canSkip = !valueTransition.isHandoff &&\n            !hasKeyframesChanged(value, valueTarget);\n        if (valueTransition.type === \"spring\" &&\n            (value.getVelocity() || valueTransition.velocity)) {\n            canSkip = false;\n        }\n        /**\n         * Temporarily disable skipping animations if there's an animation in\n         * progress. Better would be to track the current target of a value\n         * and compare that against valueTarget.\n         */\n        if (value.animation) {\n            canSkip = false;\n        }\n        if (canSkip)\n            continue;\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition));\n        const animation = value.animation;\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation.then(() => willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            transitionEnd && setTarget(visualElement, transitionEnd);\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\n\nfunction animateVariant(visualElement, variant, options = {}) {\n    const resolved = resolveVariant(visualElement, variant, options.custom);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => Promise.all(animateTarget(visualElement, resolved, options))\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(() => last());\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1\n        ? (i = 0) => i * staggerChildren\n        : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n\nexport { animateVariant, sortByTreeOrder };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\nimport { animateVariant } from './visual-element-variant.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));\n    }\n    return animation.then(() => visualElement.notify(\"AnimationComplete\", definition));\n}\n\nexport { animateVisualElement };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { variantPriorityOrder } from './variant-props.mjs';\nimport { animateVisualElement } from '../../animation/interfaces/visual-element.mjs';\n\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    const state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (acc, definition) => {\n        const resolved = resolveVariant(visualElement, definition);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(options, changedActiveType) {\n        const props = visualElement.getProps();\n        const context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined ? props[type] : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            let handledRemovedValues = false;\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                if (removedKeys.has(key)) {\n                    handledRemovedValues = true;\n                    removedKeys.delete(key);\n                }\n                typeState.needsAnimating[key] = true;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                let valueHasChanged = false;\n                if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                    valueHasChanged = !shallowCompare(next, prev);\n                }\n                else {\n                    valueHasChanged = next !== prev;\n                }\n                if (valueHasChanged) {\n                    if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             */\n            if (shouldAnimateType && (!isInherited || handledRemovedValues)) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type, ...options },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation[key] = fallbackTarget;\n                }\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            (props.initial === false || props.initial === props.animate) &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        const animations = animateChanges(options, type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState };\n","import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */\n    constructor(node) {\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        this.unmount();\n        if (isAnimationControls(animate)) {\n            this.unmount = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n    mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() { }\n}\n\nexport { AnimationFeature };\n","import { Feature } from '../Feature.mjs';\n\nlet id = 0;\nclass ExitAnimationFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.id = id++;\n    }\n    update() {\n        if (!this.node.presenceContext)\n            return;\n        const { isPresent, onExitComplete, custom } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent, { custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom });\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(() => onExitComplete(this.id));\n        }\n    }\n    mount() {\n        const { register } = this.node.presenceContext || {};\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() { }\n}\n\nexport { ExitAnimationFeature };\n","import { AnimationFeature } from './animation/index.mjs';\nimport { ExitAnimationFeature } from './animation/exit.mjs';\n\nconst animations = {\n    animation: {\n        Feature: AnimationFeature,\n    },\n    exit: {\n        Feature: ExitAnimationFeature,\n    },\n};\n\nexport { animations };\n","const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { extractEventInfo } from '../../events/event-info.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../utils/time-conversion.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\nimport { isPrimaryPointer } from '../../events/utils/is-primary-pointer.mjs';\nimport { frame, cancelFrame, frameData } from '../../frameloop/frame.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint, contextWindow, dragSnapToOrigin = false } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        /**\n         * @internal\n         */\n        this.contextWindow = window;\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            const { onEnd, onSessionEnd, resumeAnimation } = this.handlers;\n            if (this.dragSnapToOrigin)\n                resumeAnimation && resumeAnimation();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.dragSnapToOrigin = dragSnapToOrigin;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        this.contextWindow = contextWindow || window;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(this.contextWindow, \"pointermove\", this.handlePointerMove), addPointerEvent(this.contextWindow, \"pointerup\", this.handlePointerUp), addPointerEvent(this.contextWindow, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","import { mixNumber } from '../../utils/mix/number.mjs';\n\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target = 0, maxDistance = 0.01) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mixNumber(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale))\n        delta.scale = 1;\n    delta.translate =\n        mixNumber(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate) || isNaN(delta.translate))\n        delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","import { progress } from '../../../utils/progress.mjs';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { mixNumber } from '../../../utils/mix/number.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(min, point, elastic.min)\n            : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(max, point, elastic.max)\n            : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","const createAxisDelta = () => ({\n    translate: 0,\n    scale: 1,\n    origin: 0,\n    originPoint: 0,\n});\nconst createDelta = () => ({\n    x: createAxisDelta(),\n    y: createAxisDelta(),\n});\nconst createAxis = () => ({ min: 0, max: 0 });\nconst createBox = () => ({\n    x: createAxis(),\n    y: createAxis(),\n});\n\nexport { createAxis, createAxisDelta, createBox, createDelta };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */\nfunction convertBoundingBoxToBox({ top, left, right, bottom, }) {\n    return {\n        x: { min: left, max: right },\n        y: { min: top, max: bottom },\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return { top: y.min, right: x.max, bottom: y.max, left: x.min };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */\nfunction transformBoxPoints(point, transformPoint) {\n    if (!transformPoint)\n        return point;\n    const topLeft = transformPoint({ x: point.left, y: point.top });\n    const bottomRight = transformPoint({ x: point.right, y: point.bottom });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x,\n    };\n}\n\nexport { convertBoundingBoxToBox, convertBoxToBoundingBox, transformBoxPoints };\n","function isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return (!isIdentityScale(scale) ||\n        !isIdentityScale(scaleX) ||\n        !isIdentityScale(scaleY));\n}\nfunction hasTransform(values) {\n    return (hasScale(values) ||\n        has2DTranslate(values) ||\n        values.z ||\n        values.rotate ||\n        values.rotateX ||\n        values.rotateY);\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\nexport { has2DTranslate, hasScale, hasTransform };\n","import { mixNumber } from '../../utils/mix/number.mjs';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */\n        const instance = node.instance;\n        if (instance &&\n            instance.style &&\n            instance.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    treeScale.x = snapToDefault(treeScale.x);\n    treeScale.y = snapToDefault(treeScale.y);\n}\nfunction snapToDefault(scale) {\n    if (Number.isInteger(scale))\n        return scale;\n    return scale > 1.0000000000001 || scale < 0.999999999999 ? scale : 1;\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, transforms, [key, scaleKey, originKey]) {\n    const axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n    const originPoint = mixNumber(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform, xKeys);\n    transformAxis(box.y, transform, yKeys);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n","import { convertBoundingBoxToBox, transformBoxPoints } from '../geometry/conversion.mjs';\nimport { translateAxis } from '../geometry/delta-apply.mjs';\n\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\nexport { measurePageBox, measureViewportBox };\n","// Fixes https://github.com/framer/motion/issues/2270\nconst getContextWindow = ({ current }) => {\n    return current ? current.ownerDocument.defaultView : null;\n};\n\nexport { getContextWindow };\n","import { invariant } from '../../utils/errors.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, calcOrigin } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            const { dragSnapToOrigin } = this.getProps();\n            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.update(() => onDragStart(event, info), false, true);\n            }\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        const resumeAnimation = () => eachAxis((axis) => {\n            var _a;\n            return this.getAnimationState(axis) === \"paused\" &&\n                ((_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());\n        });\n        const { dragSnapToOrigin } = this.getProps();\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n            resumeAnimation,\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            dragSnapToOrigin,\n            contextWindow: getContextWindow(this.visualElement),\n        });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.update(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        var _a;\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection &&\n            !this.visualElement.projection.layout\n            ? this.visualElement.projection.measure(false)\n            : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    pauseAnimation() {\n        eachAxis((axis) => { var _a; return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause(); });\n    }\n    getAnimationState(axis) {\n        var _a;\n        return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mixNumber(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mixNumber(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = noop;\n        this.removeListeners = noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nexport { DragGesture };\n","import { PanSession } from './PanSession.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        frame.update(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {\n            transformPagePoint: this.node.getTransformPagePoint(),\n            contextWindow: getContextWindow(this.node),\n        });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    frame.update(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n","import { useContext, useId, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => register(id), []);\n    const safeToRemove = () => onExitComplete && onExitComplete(id);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { px } from '../../value/types/numbers/units.mjs';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { mixNumber } from '../../utils/mix/number.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mixNumber(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n","import React__default, { useContext } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\nimport { microtask } from '../../../frameloop/microtask.mjs';\nimport { frame } from '../../../frameloop/frame.mjs';\n\nclass MeasureLayoutWithContext extends React__default.Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                frame.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            microtask.postRender(() => {\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (React__default.createElement(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","import { circOut } from '../../easing/circ.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { percent, px } from '../../value/types/numbers/units.mjs';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mixNumber(0, \n        // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = mixNumber(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mixNumber(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mixNumber(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mixNumber(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = compress(0, 0.5, circOut);\nconst easeCrossfadeOut = compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n\nexport { copyAxisInto, copyBoxInto };\n","import { mixNumber } from '../../utils/mix/number.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mixNumber(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mixNumber(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n    return (a.x.min === b.x.min &&\n        a.x.max === b.x.max &&\n        a.y.min === b.y.min &&\n        a.y.max === b.y.max);\n}\nfunction boxEqualsRounded(a, b) {\n    return (Math.round(a.x.min) === Math.round(b.x.min) &&\n        Math.round(a.x.max) === Math.round(b.x.max) &&\n        Math.round(a.y.min) === Math.round(b.y.min) &&\n        Math.round(a.y.max) === Math.round(b.y.max));\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\n\nexport { aspectRatio, boxEquals, boxEqualsRounded, isDeltaZero };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    if (xTranslate || yTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { rotate, rotateX, rotateY } = latestTransform;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { time } from '../frameloop/sync-time.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = time.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelFrame(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    frame.read(checkElapsed, true);\n    return () => cancelFrame(checkElapsed);\n}\n\nexport { delay };\n","function record(data) {\n    if (window.MotionDebug) {\n        window.MotionDebug.record(data);\n    }\n}\n\nexport { record };\n","function isSVGElement(element) {\n    return element instanceof SVGElement && element.tagName !== \"svg\";\n}\n\nexport { isSVGElement };\n","import { animateMotionValue } from './motion-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n\nexport { animateSingleValue };\n","import { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEqualsRounded, isDeltaZero, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { cancelFrame, frameData, steps, frame } from '../../frameloop/frame.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { time } from '../../frameloop/sync-time.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nconst hiddenVisibility = { visibility: \"hidden\" };\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nconst projectionFrameData = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                projectionFrameData.totalNodes =\n                    projectionFrameData.resolvedTargetDeltas =\n                        projectionFrameData.recalculatedProjection =\n                            0;\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                record(projectionFrameData);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            if (window.HandoffCancelAllAnimations) {\n                window.HandoffCancelAllAnimations();\n            }\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = time.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            steps.update.process(frameData);\n            steps.preRender.process(frameData);\n            steps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                microtask.read(() => this.update());\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            if (!this.targetDelta && !this.relativeTarget) {\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            projectionFrameData.resolvedTargetDeltas++;\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n                lead.targetWithTransforms = createBox();\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.projectionTransform) {\n                    this.projectionDelta = createDelta();\n                    this.projectionTransform = \"none\";\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            projectionFrameData.recalculatedProjection++;\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            var _a, _b;\n            if (!this.instance || this.isSVG)\n                return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\",\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    projectionFrameData.totalNodes++;\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mixNumber(delta.translate, 0, p);\n    output.scale = mixNumber(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mixNumber(from.min, to.min, p);\n    output.max = mixNumber(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { DragGesture } from '../../gestures/drag/index.mjs';\nimport { PanGesture } from '../../gestures/pan/index.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { drag };\n","import { invariant } from '../../../utils/errors.mjs';\nimport { isNumericalString } from '../../../utils/is-numerical-string.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nconst splitCSSVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    const match = splitCSSVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    const [, token, fallback] = match;\n    return [token, fallback];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        const trimmed = resolved.trim();\n        return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;\n    }\n    else if (isCSSVariableToken(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    }\n    else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, { ...target }, transitionEnd) {\n    const element = visualElement.current;\n    if (!(element instanceof Element))\n        return { target, transitionEnd };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = { ...transitionEnd };\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.values.forEach((value) => {\n        const current = value.get();\n        if (!isCSSVariableToken(current))\n            return;\n        const resolved = getVariableValue(current, element);\n        if (resolved)\n            value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for (const key in target) {\n        const current = target[key];\n        if (!isCSSVariableToken(current))\n            continue;\n        const resolved = getVariableValue(current, element);\n        if (!resolved)\n            continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        if (!transitionEnd)\n            transitionEnd = {};\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd[key] === undefined) {\n            transitionEnd[key] = current;\n        }\n    }\n    return { target, transitionEnd };\n}\n\nexport { parseCSSVariable, resolveCSSVariables };\n","import { isKeyframesTarget } from '../../../animation/utils/is-keyframes-target.mjs';\nimport { invariant } from '../../../utils/errors.mjs';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\nimport { findDimensionValueType } from '../value-types/dimensions.mjs';\nimport { isBrowser } from '../../../utils/is-browser.mjs';\nimport { number } from '../../../value/types/numbers/index.mjs';\nimport { px } from '../../../value/types/numbers/units.mjs';\n\nconst positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n    \"translateX\",\n    \"translateY\",\n]);\nconst isPositionalKey = (key) => positionalKeys.has(key);\nconst hasPositionalKey = (target) => {\n    return Object.keys(target).some(isPositionalKey);\n};\nconst isNumOrPxType = (v) => v === number || v === px;\nconst getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {\n    if (transform === \"none\" || !transform)\n        return 0;\n    const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        const matrix = transform.match(/^matrix\\((.+)\\)$/);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n};\nconst transformKeys = new Set([\"x\", \"y\", \"z\"]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n    const removedTransforms = [];\n    nonTranslationalTransformKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length)\n        visualElement.render();\n    return removedTransforms;\n}\nconst positionalValues = {\n    // Dimensions\n    width: ({ x }, { paddingLeft = \"0\", paddingRight = \"0\" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),\n    height: ({ y }, { paddingTop = \"0\", paddingBottom = \"0\" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),\n    top: (_bbox, { top }) => parseFloat(top),\n    left: (_bbox, { left }) => parseFloat(left),\n    bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),\n    right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\n// Alias translate longform names\npositionalValues.translateX = positionalValues.x;\npositionalValues.translateY = positionalValues.y;\nconst convertChangedValueTypes = (target, visualElement, changedKeys) => {\n    const originBbox = visualElement.measureViewportBox();\n    const element = visualElement.current;\n    const elementComputedStyle = getComputedStyle(element);\n    const { display } = elementComputedStyle;\n    const origin = {};\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    /**\n     * Record origins before we render and update styles\n     */\n    changedKeys.forEach((key) => {\n        origin[key] = positionalValues[key](originBbox, elementComputedStyle);\n    });\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.render();\n    const targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach((key) => {\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        const value = visualElement.getValue(key);\n        value && value.jump(origin[key]);\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nconst checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {}) => {\n    target = { ...target };\n    transitionEnd = { ...transitionEnd };\n    const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    let removedTransformValues = [];\n    let hasAttemptedToRemoveTransformValues = false;\n    const changedValueTypeKeys = [];\n    targetPositionalKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key))\n            return;\n        let from = origin[key];\n        let fromType = findDimensionValueType(from);\n        const to = target[key];\n        let toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if (isKeyframesTarget(to)) {\n            const numKeyframes = to.length;\n            const fromIndex = to[0] === null ? 1 : 0;\n            from = to[fromIndex];\n            fromType = findDimensionValueType(from);\n            for (let i = fromIndex; i < numKeyframes; i++) {\n                /**\n                 * Don't allow wildcard keyframes to be used to detect\n                 * a difference in value types.\n                 */\n                if (to[i] === null)\n                    break;\n                if (!toType) {\n                    toType = findDimensionValueType(to[i]);\n                    invariant(toType === fromType ||\n                        (isNumOrPxType(fromType) && isNumOrPxType(toType)), \"Keyframes must be of the same dimension as the current value\");\n                }\n                else {\n                    invariant(findDimensionValueType(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        }\n        else {\n            toType = findDimensionValueType(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                const current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                }\n                else if (Array.isArray(to) && toType === px) {\n                    target[key] = to.map(parseFloat);\n                }\n            }\n            else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) &&\n                (toType === null || toType === void 0 ? void 0 : toType.transform) &&\n                (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                }\n                else {\n                    target[key] = fromType.transform(to);\n                }\n            }\n            else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues =\n                        removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] =\n                    transitionEnd[key] !== undefined\n                        ? transitionEnd[key]\n                        : target[key];\n                value.jump(to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        const scrollY = changedValueTypeKeys.indexOf(\"height\") >= 0\n            ? window.pageYOffset\n            : null;\n        const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(([key, value]) => {\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.render();\n        // Restore scroll position\n        if (isBrowser && scrollY !== null) {\n            window.scrollTo({ top: scrollY });\n        }\n        return { target: convertedTarget, transitionEnd };\n    }\n    else {\n        return { target, transitionEnd };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */\nfunction unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target)\n        ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd)\n        : { target, transitionEnd };\n}\n\nexport { positionalValues, unitConversion };\n","import { resolveCSSVariables } from './css-variables-conversion.mjs';\nimport { unitConversion } from './unit-conversion.mjs';\n\n/**\n * Parse a DOM variant to make it animatable. This involves resolving CSS variables\n * and ensuring animations like \"20%\" => \"calc(50vw)\" are performed in pixels.\n */\nconst parseDomVariant = (visualElement, target, origin, transitionEnd) => {\n    const resolved = resolveCSSVariables(visualElement, target, transitionEnd);\n    target = resolved.target;\n    transitionEnd = resolved.transitionEnd;\n    return unitConversion(visualElement, target, origin, transitionEnd);\n};\n\nexport { parseDomVariant };\n","// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nconst hasReducedMotionListener = { current: false };\n\nexport { hasReducedMotionListener, prefersReducedMotion };\n","import { isBrowser } from '../is-browser.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n\nexport { initPrefersReducedMotion };\n","import { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    const { willChange } = next;\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */\n            if (process.env.NODE_ENV === \"development\") {\n                warnOnce(nextValue.version === \"11.0.8\", `Attempting to mix Framer Motion versions ${nextValue.version} with 11.0.8 may not work as expected.`);\n            }\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.remove(key);\n            }\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","const visualElementStore = new WeakMap();\n\nexport { visualElementStore };\n","import { warning, invariant } from '../utils/errors.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { variantProps } from './utils/variant-props.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\nconst numVariantProps = variantProps.length;\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    constructor({ parent, props, presenceContext, reducedMotionConfig, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = () => frame.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps) {\n        return {};\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            this.features[key].unmount();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate &&\n                frame.update(this.notifyUpdate, false, true);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, initialLayoutGroupConfig) {\n        let ProjectionNodeConstructor;\n        let MeasureLayout;\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (process.env.NODE_ENV !== \"production\" &&\n            preloadedFeatures &&\n            isStrict) {\n            const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n            renderedProps.ignoreStrict\n                ? warning(false, strictMessage)\n                : invariant(false, strictMessage);\n        }\n        for (let i = 0; i < numFeatures; i++) {\n            const name = featureNames[i];\n            const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent, } = featureDefinitions[name];\n            if (ProjectionNode)\n                ProjectionNodeConstructor = ProjectionNode;\n            if (isEnabled(renderedProps)) {\n                if (!this.features[name] && FeatureConstructor) {\n                    this.features[name] = new FeatureConstructor(this);\n                }\n                if (MeasureLayoutComponent) {\n                    MeasureLayout = MeasureLayoutComponent;\n                }\n            }\n        }\n        if ((this.type === \"html\" || this.type === \"svg\") &&\n            !this.projection &&\n            ProjectionNodeConstructor) {\n            this.projection = new ProjectionNodeConstructor(this.latestValues, this.parent && this.parent.projection);\n            const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = renderedProps;\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) ||\n                    (dragConstraints && isRefObject(dragConstraints)),\n                visualElement: this,\n                scheduleRender: () => this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */\n                animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n                layoutRoot,\n            });\n        }\n        return MeasureLayout;\n    }\n    updateFeatures() {\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature.isMounted) {\n                feature.update();\n            }\n            else {\n                feature.mount();\n                feature.isMounted = true;\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */\n    makeTargetAnimatable(target, canMutate = true) {\n        return this.makeTargetAnimatableFromInstance(target, canMutate);\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listener = props[\"on\" + key];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    getVariantContext(startAtParent = false) {\n        if (startAtParent) {\n            return this.parent ? this.parent.getVariantContext() : undefined;\n        }\n        if (!this.isControllingVariants) {\n            const context = this.parent\n                ? this.parent.getVariantContext() || {}\n                : {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        if (value !== this.values.get(key)) {\n            this.removeValue(key);\n            this.bindToMotionValue(key, value);\n        }\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key) {\n        var _a;\n        return this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\"\n            ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key]\n            : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n","import { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { parseDomVariant } from './utils/parse-dom-variant.mjs';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style ? props.style[key] : undefined;\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, isMounted) {\n        const origin = getOrigin(target, transition || {}, this);\n        if (isMounted) {\n            checkTargetForNewValues(this, target, origin);\n            const parsed = parseDomVariant(this, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return {\n            transition,\n            transitionEnd,\n            ...target,\n        };\n    }\n}\n\nexport { DOMVisualElement };\n","import { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariableName } from '../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"html\";\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariableName(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, options, props) {\n        buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest) => {\n                if (this.current)\n                    this.current.textContent = `${latest}`;\n            });\n        }\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderHTML(instance, renderState, styleProp, projection);\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n","import { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"svg\";\n        this.isSVGTag = false;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    measureInstanceViewportBox() {\n        return createBox();\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    build(renderState, latestValues, options, props) {\n        buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n","import { HTMLVisualElement } from '../html/HTMLVisualElement.mjs';\nimport { SVGVisualElement } from '../svg/SVGVisualElement.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new SVGVisualElement(options, { enableHardwareAcceleration: false })\n        : new HTMLVisualElement(options, { enableHardwareAcceleration: true });\n};\n\nexport { createDomVisualElement };\n","import { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { layout };\n","import { createMotionComponent } from '../../motion/index.mjs';\nimport { createMotionProxy } from './motion-proxy.mjs';\nimport { createDomMotionConfig } from './utils/create-config.mjs';\nimport { gestureAnimations } from '../../motion/features/gestures.mjs';\nimport { animations } from '../../motion/features/animations.mjs';\nimport { drag } from '../../motion/features/drag.mjs';\nimport { createDomVisualElement } from './create-visual-element.mjs';\nimport { layout } from '../../motion/features/layout.mjs';\n\nconst preloadedFeatures = {\n    ...animations,\n    ...gestureAnimations,\n    ...drag,\n    ...layout,\n};\n/**\n * HTML & SVG components, optimised for use with gestures and animation. These can be used as\n * drop-in replacements for any HTML & SVG component, all CSS & SVG properties are supported.\n *\n * @public\n */\nconst motion = /*@__PURE__*/ createMotionProxy((Component, config) => createDomMotionConfig(Component, config, preloadedFeatures, createDomVisualElement));\n/**\n * Create a DOM `motion` component with the provided string. This is primarily intended\n * as a full alternative to `motion` for consumers who have to support environments that don't\n * support `Proxy`.\n *\n * ```javascript\n * import { createDomMotionComponent } from \"framer-motion\"\n *\n * const motion = {\n *   div: createDomMotionComponent('div')\n * }\n * ```\n *\n * @public\n */\nfunction createDomMotionComponent(key) {\n    return createMotionComponent(createDomMotionConfig(key, { forwardMotionProps: false }, preloadedFeatures, createDomVisualElement));\n}\n\nexport { createDomMotionComponent, motion };\n","const checkStringStartsWith = (token) => (key) => typeof key === \"string\" && key.startsWith(token);\nconst isCSSVariableName = checkStringStartsWith(\"--\");\nconst startsAsVariableToken = checkStringStartsWith(\"var(--\");\nconst isCSSVariableToken = (value) => {\n    const startsWithToken = startsAsVariableToken(value);\n    if (!startsWithToken)\n        return false;\n    // Ensure any comments are stripped from the value as this can harm performance of the regex.\n    return singleCssVariableRegex.test(value.split(\"/*\")[0].trim());\n};\nconst singleCssVariableRegex = /var\\s*\\(\\s*--[\\w-]+(\\s*,\\s*(?:(?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)+)?\\s*\\)$/i;\n\nexport { isCSSVariableName, isCSSVariableToken };\n","const MotionGlobalConfig = {\n    skipAnimations: false,\n    useManualTiming: false,\n};\n\nexport { MotionGlobalConfig };\n","function addUniqueItem(arr, item) {\n    if (arr.indexOf(item) === -1)\n        arr.push(item);\n}\nfunction removeItem(arr, item) {\n    const index = arr.indexOf(item);\n    if (index > -1)\n        arr.splice(index, 1);\n}\n// Adapted from array-move\nfunction moveItem([...arr], fromIndex, toIndex) {\n    const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;\n    if (startIndex >= 0 && startIndex < arr.length) {\n        const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;\n        const [item] = arr.splice(fromIndex, 1);\n        arr.splice(endIndex, 0, item);\n    }\n    return arr;\n}\n\nexport { addUniqueItem, moveItem, removeItem };\n","const clamp = (min, max, v) => {\n    if (v > max)\n        return max;\n    if (v < min)\n        return min;\n    return v;\n};\n\nexport { clamp };\n","import { noop } from './noop.mjs';\n\nlet warning = noop;\nlet invariant = noop;\nif (process.env.NODE_ENV !== \"production\") {\n    warning = (check, message) => {\n        if (!check && typeof console !== \"undefined\") {\n            console.warn(message);\n        }\n    };\n    invariant = (check, message) => {\n        if (!check) {\n            throw new Error(message);\n        }\n    };\n}\n\nexport { invariant, warning };\n","import { invariant } from './errors.mjs';\nimport { clamp } from './clamp.mjs';\nimport { pipe } from './pipe.mjs';\nimport { progress } from './progress.mjs';\nimport { noop } from './noop.mjs';\nimport { mix } from './mix/index.mjs';\n\nfunction createMixers(output, ease, customMixer) {\n    const mixers = [];\n    const mixerFactory = customMixer || mix;\n    const numMixers = output.length - 1;\n    for (let i = 0; i < numMixers; i++) {\n        let mixer = mixerFactory(output[i], output[i + 1]);\n        if (ease) {\n            const easingFunction = Array.isArray(ease) ? ease[i] || noop : ease;\n            mixer = pipe(easingFunction, mixer);\n        }\n        mixers.push(mixer);\n    }\n    return mixers;\n}\n/**\n * Create a function that maps from a numerical input array to a generic output array.\n *\n * Accepts:\n *   - Numbers\n *   - Colors (hex, hsl, hsla, rgb, rgba)\n *   - Complex (combinations of one or more numbers or strings)\n *\n * ```jsx\n * const mixColor = interpolate([0, 1], ['#fff', '#000'])\n *\n * mixColor(0.5) // 'rgba(128, 128, 128, 1)'\n * ```\n *\n * TODO Revist this approach once we've moved to data models for values,\n * probably not needed to pregenerate mixer functions.\n *\n * @public\n */\nfunction interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {\n    const inputLength = input.length;\n    invariant(inputLength === output.length, \"Both input and output ranges must be the same length\");\n    /**\n     * If we're only provided a single input, we can just make a function\n     * that returns the output.\n     */\n    if (inputLength === 1)\n        return () => output[0];\n    // If input runs highest -> lowest, reverse both arrays\n    if (input[0] > input[inputLength - 1]) {\n        input = [...input].reverse();\n        output = [...output].reverse();\n    }\n    const mixers = createMixers(output, ease, mixer);\n    const numMixers = mixers.length;\n    const interpolator = (v) => {\n        let i = 0;\n        if (numMixers > 1) {\n            for (; i < input.length - 2; i++) {\n                if (v < input[i + 1])\n                    break;\n            }\n        }\n        const progressInRange = progress(input[i], input[i + 1], v);\n        return mixers[i](progressInRange);\n    };\n    return isClamp\n        ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v))\n        : interpolator;\n}\n\nexport { interpolate };\n","const isBrowser = typeof document !== \"undefined\";\n\nexport { isBrowser };\n","// Adapted from https://gist.github.com/mjackson/5311256\nfunction hueToRgb(p, q, t) {\n    if (t < 0)\n        t += 1;\n    if (t > 1)\n        t -= 1;\n    if (t < 1 / 6)\n        return p + (q - p) * 6 * t;\n    if (t < 1 / 2)\n        return q;\n    if (t < 2 / 3)\n        return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\nfunction hslaToRgba({ hue, saturation, lightness, alpha }) {\n    hue /= 360;\n    saturation /= 100;\n    lightness /= 100;\n    let red = 0;\n    let green = 0;\n    let blue = 0;\n    if (!saturation) {\n        red = green = blue = lightness;\n    }\n    else {\n        const q = lightness < 0.5\n            ? lightness * (1 + saturation)\n            : lightness + saturation - lightness * saturation;\n        const p = 2 * lightness - q;\n        red = hueToRgb(p, q, hue + 1 / 3);\n        green = hueToRgb(p, q, hue);\n        blue = hueToRgb(p, q, hue - 1 / 3);\n    }\n    return {\n        red: Math.round(red * 255),\n        green: Math.round(green * 255),\n        blue: Math.round(blue * 255),\n        alpha,\n    };\n}\n\nexport { hslaToRgba };\n","import { mixNumber } from './number.mjs';\nimport { invariant } from '../errors.mjs';\nimport { hslaToRgba } from '../hsla-to-rgba.mjs';\nimport { hex } from '../../value/types/color/hex.mjs';\nimport { rgba } from '../../value/types/color/rgba.mjs';\nimport { hsla } from '../../value/types/color/hsla.mjs';\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nconst mixLinearColor = (from, to, v) => {\n    const fromExpo = from * from;\n    const expo = v * (to * to - fromExpo) + fromExpo;\n    return expo < 0 ? 0 : Math.sqrt(expo);\n};\nconst colorTypes = [hex, rgba, hsla];\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\nfunction asRGBA(color) {\n    const type = getColorType(color);\n    invariant(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);\n    let model = type.parse(color);\n    if (type === hsla) {\n        // TODO Remove this cast - needed since Framer Motion's stricter typing\n        model = hslaToRgba(model);\n    }\n    return model;\n}\nconst mixColor = (from, to) => {\n    const fromRGBA = asRGBA(from);\n    const toRGBA = asRGBA(to);\n    const blended = { ...fromRGBA };\n    return (v) => {\n        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n        blended.alpha = mixNumber(fromRGBA.alpha, toRGBA.alpha, v);\n        return rgba.transform(blended);\n    };\n};\n\nexport { mixColor, mixLinearColor };\n","import { mixNumber as mixNumber$1 } from './number.mjs';\nimport { mixColor } from './color.mjs';\nimport { pipe } from '../pipe.mjs';\nimport { warning } from '../errors.mjs';\nimport { color } from '../../value/types/color/index.mjs';\nimport { complex, analyseComplexValue } from '../../value/types/complex/index.mjs';\nimport { isCSSVariableToken } from '../../render/dom/utils/is-css-variable.mjs';\n\nfunction mixImmediate(a, b) {\n    return (p) => (p > 0 ? b : a);\n}\nfunction mixNumber(a, b) {\n    return (p) => mixNumber$1(a, b, p);\n}\nfunction getMixer(a) {\n    if (typeof a === \"number\") {\n        return mixNumber;\n    }\n    else if (typeof a === \"string\") {\n        return isCSSVariableToken(a)\n            ? mixImmediate\n            : color.test(a)\n                ? mixColor\n                : mixComplex;\n    }\n    else if (Array.isArray(a)) {\n        return mixArray;\n    }\n    else if (typeof a === \"object\") {\n        return color.test(a) ? mixColor : mixObject;\n    }\n    return mixImmediate;\n}\nfunction mixArray(a, b) {\n    const output = [...a];\n    const numValues = output.length;\n    const blendValue = a.map((v, i) => getMixer(v)(v, b[i]));\n    return (p) => {\n        for (let i = 0; i < numValues; i++) {\n            output[i] = blendValue[i](p);\n        }\n        return output;\n    };\n}\nfunction mixObject(a, b) {\n    const output = { ...a, ...b };\n    const blendValue = {};\n    for (const key in output) {\n        if (a[key] !== undefined && b[key] !== undefined) {\n            blendValue[key] = getMixer(a[key])(a[key], b[key]);\n        }\n    }\n    return (v) => {\n        for (const key in blendValue) {\n            output[key] = blendValue[key](v);\n        }\n        return output;\n    };\n}\nfunction matchOrder(origin, target) {\n    var _a;\n    const orderedOrigin = [];\n    const pointers = { color: 0, var: 0, number: 0 };\n    for (let i = 0; i < target.values.length; i++) {\n        const type = target.types[i];\n        const originIndex = origin.indexes[type][pointers[type]];\n        const originValue = (_a = origin.values[originIndex]) !== null && _a !== void 0 ? _a : 0;\n        orderedOrigin[i] = originValue;\n        pointers[type]++;\n    }\n    return orderedOrigin;\n}\nconst mixComplex = (origin, target) => {\n    const template = complex.createTransformer(target);\n    const originStats = analyseComplexValue(origin);\n    const targetStats = analyseComplexValue(target);\n    const canInterpolate = originStats.indexes.var.length === targetStats.indexes.var.length &&\n        originStats.indexes.color.length === targetStats.indexes.color.length &&\n        originStats.indexes.number.length >= targetStats.indexes.number.length;\n    if (canInterpolate) {\n        return pipe(mixArray(matchOrder(originStats, targetStats), targetStats.values), template);\n    }\n    else {\n        warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);\n        return mixImmediate(origin, target);\n    }\n};\n\nexport { getMixer, mixArray, mixComplex, mixObject };\n","import { getMixer } from './complex.mjs';\nimport { mixNumber } from './number.mjs';\n\nfunction mix(from, to, p) {\n    if (typeof from === \"number\" &&\n        typeof to === \"number\" &&\n        typeof p === \"number\") {\n        return mixNumber(from, to, p);\n    }\n    const mixer = getMixer(from);\n    return mixer(from, to);\n}\n\nexport { mix };\n","/*\n  Value in range from progress\n\n  Given a lower limit and an upper limit, we return the value within\n  that range as expressed by progress (usually a number from 0 to 1)\n\n  So progress = 0.5 would change\n\n  from -------- to\n\n  to\n\n  from ---- to\n\n  E.g. from = 10, to = 20, progress = 0.5 => 15\n\n  @param [number]: Lower limit of range\n  @param [number]: Upper limit of range\n  @param [number]: The progress between lower and upper limits expressed 0-1\n  @return [number]: Value as calculated from progress within range (not limited within range)\n*/\nconst mixNumber = (from, to, progress) => {\n    return from + (to - from) * progress;\n};\n\nexport { mixNumber };\n","const noop = (any) => any;\n\nexport { noop };\n","/**\n * Pipe\n * Compose other transformers to run linearily\n * pipe(min(20), max(40))\n * @param  {...functions} transformers\n * @return {function}\n */\nconst combineFunctions = (a, b) => (v) => b(a(v));\nconst pipe = (...transformers) => transformers.reduce(combineFunctions);\n\nexport { pipe };\n","/*\n  Progress within given range\n\n  Given a lower limit and an upper limit, we return the progress\n  (expressed as a number 0-1) represented by the given value, and\n  limit that progress to within 0-1.\n\n  @param [number]: Lower limit\n  @param [number]: Upper limit\n  @param [number]: Value to find progress within given range\n  @return [number]: Progress of value within range as expressed 0-1\n*/\nconst progress = (from, to, value) => {\n    const toFromDifference = to - from;\n    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;\n};\n\nexport { progress };\n","import { addUniqueItem, removeItem } from './array.mjs';\n\nclass SubscriptionManager {\n    constructor() {\n        this.subscriptions = [];\n    }\n    add(handler) {\n        addUniqueItem(this.subscriptions, handler);\n        return () => removeItem(this.subscriptions, handler);\n    }\n    notify(a, b, c) {\n        const numSubscriptions = this.subscriptions.length;\n        if (!numSubscriptions)\n            return;\n        if (numSubscriptions === 1) {\n            /**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */\n            this.subscriptions[0](a, b, c);\n        }\n        else {\n            for (let i = 0; i < numSubscriptions; i++) {\n                /**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */\n                const handler = this.subscriptions[i];\n                handler && handler(a, b, c);\n            }\n        }\n    }\n    getSize() {\n        return this.subscriptions.length;\n    }\n    clear() {\n        this.subscriptions.length = 0;\n    }\n}\n\nexport { SubscriptionManager };\n","import { useRef } from 'react';\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nfunction useConstant(init) {\n    const ref = useRef(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n\nexport { useConstant };\n","import { useLayoutEffect, useEffect } from 'react';\nimport { isBrowser } from './is-browser.mjs';\n\nconst useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\n\nexport { useIsomorphicLayoutEffect };\n","/*\n  Convert velocity into velocity per second\n\n  @param [number]: Unit per frame\n  @param [number]: Frame duration in ms\n*/\nfunction velocityPerSecond(velocity, frameDuration) {\n    return frameDuration ? velocity * (1000 / frameDuration) : 0;\n}\n\nexport { velocityPerSecond };\n","import { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { time } from '../frameloop/sync-time.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\n/**\n * Maximum time between the value of two frames, beyond which we\n * assume the velocity has since been 0.\n */\nconst MAX_VELOCITY_DELTA = 30;\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\nconst collectMotionValues = {\n    current: undefined,\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    constructor(init, options = {}) {\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"11.0.8\";\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = false;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        this.updateAndNotify = (v, render = true) => {\n            const currentTime = time.now();\n            /**\n             * If we're updating the value during another frame or eventloop\n             * than the previous frame, then the we set the previous frame value\n             * to current.\n             */\n            if (this.updatedAt !== currentTime) {\n                this.setPrevFrameValue();\n            }\n            this.prev = this.current;\n            this.setCurrent(v);\n            // Update update subscribers\n            if (this.current !== this.prev && this.events.change) {\n                this.events.change.notify(this.current);\n            }\n            // Update render subscribers\n            if (render && this.events.renderRequest) {\n                this.events.renderRequest.notify(this.current);\n            }\n        };\n        this.hasAnimated = false;\n        this.setCurrent(init);\n        this.canTrackVelocity = isFloat(this.current);\n        this.owner = options.owner;\n    }\n    setCurrent(current) {\n        this.current = current;\n        this.updatedAt = time.now();\n    }\n    setPrevFrameValue(prevFrameValue = this.current) {\n        this.prevFrameValue = prevFrameValue;\n        this.prevUpdatedAt = this.updatedAt;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n    onChange(subscription) {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).`);\n        }\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return () => {\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */\n                frame.read(() => {\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for (const eventManagers in this.events) {\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = undefined;\n        this.prevFrameValue = prev;\n        this.prevUpdatedAt = this.updatedAt - delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n    jump(v) {\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.prevUpdatedAt = this.prevFrameValue = undefined;\n        this.stop();\n        if (this.stopPassiveEffect)\n            this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        if (collectMotionValues.current) {\n            collectMotionValues.current.push(this);\n        }\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        const currentTime = time.now();\n        if (!this.canTrackVelocity ||\n            this.prevFrameValue === undefined ||\n            currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {\n            return 0;\n        }\n        const delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);\n        // Casts because of parseFloat's poor typing\n        return velocityPerSecond(parseFloat(this.current) -\n            parseFloat(this.prevFrameValue), delta);\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    start(startAnimation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve);\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(() => {\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n\nexport { MotionValue, collectMotionValues, motionValue };\n","import { rgba } from './rgba.mjs';\nimport { isColorString } from './utils.mjs';\n\nfunction parseHex(v) {\n    let r = \"\";\n    let g = \"\";\n    let b = \"\";\n    let a = \"\";\n    // If we have 6 characters, ie #FF0000\n    if (v.length > 5) {\n        r = v.substring(1, 3);\n        g = v.substring(3, 5);\n        b = v.substring(5, 7);\n        a = v.substring(7, 9);\n        // Or we have 3 characters, ie #F00\n    }\n    else {\n        r = v.substring(1, 2);\n        g = v.substring(2, 3);\n        b = v.substring(3, 4);\n        a = v.substring(4, 5);\n        r += r;\n        g += g;\n        b += b;\n        a += a;\n    }\n    return {\n        red: parseInt(r, 16),\n        green: parseInt(g, 16),\n        blue: parseInt(b, 16),\n        alpha: a ? parseInt(a, 16) / 255 : 1,\n    };\n}\nconst hex = {\n    test: isColorString(\"#\"),\n    parse: parseHex,\n    transform: rgba.transform,\n};\n\nexport { hex };\n","import { alpha } from '../numbers/index.mjs';\nimport { percent } from '../numbers/units.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst hsla = {\n    test: isColorString(\"hsl\", \"hue\"),\n    parse: splitColor(\"hue\", \"saturation\", \"lightness\"),\n    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {\n        return (\"hsla(\" +\n            Math.round(hue) +\n            \", \" +\n            percent.transform(sanitize(saturation)) +\n            \", \" +\n            percent.transform(sanitize(lightness)) +\n            \", \" +\n            sanitize(alpha.transform(alpha$1)) +\n            \")\");\n    },\n};\n\nexport { hsla };\n","import { isString } from '../utils.mjs';\nimport { hex } from './hex.mjs';\nimport { hsla } from './hsla.mjs';\nimport { rgba } from './rgba.mjs';\n\nconst color = {\n    test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),\n    parse: (v) => {\n        if (rgba.test(v)) {\n            return rgba.parse(v);\n        }\n        else if (hsla.test(v)) {\n            return hsla.parse(v);\n        }\n        else {\n            return hex.parse(v);\n        }\n    },\n    transform: (v) => {\n        return isString(v)\n            ? v\n            : v.hasOwnProperty(\"red\")\n                ? rgba.transform(v)\n                : hsla.transform(v);\n    },\n};\n\nexport { color };\n","import { clamp } from '../../../utils/clamp.mjs';\nimport { number, alpha } from '../numbers/index.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst clampRgbUnit = (v) => clamp(0, 255, v);\nconst rgbUnit = {\n    ...number,\n    transform: (v) => Math.round(clampRgbUnit(v)),\n};\nconst rgba = {\n    test: isColorString(\"rgb\", \"red\"),\n    parse: splitColor(\"red\", \"green\", \"blue\"),\n    transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => \"rgba(\" +\n        rgbUnit.transform(red) +\n        \", \" +\n        rgbUnit.transform(green) +\n        \", \" +\n        rgbUnit.transform(blue) +\n        \", \" +\n        sanitize(alpha.transform(alpha$1)) +\n        \")\",\n};\n\nexport { rgbUnit, rgba };\n","import { isString, singleColorRegex, floatRegex } from '../utils.mjs';\n\n/**\n * Returns true if the provided string is a color, ie rgba(0,0,0,0) or #000,\n * but false if a number or multiple colors\n */\nconst isColorString = (type, testProp) => (v) => {\n    return Boolean((isString(v) && singleColorRegex.test(v) && v.startsWith(type)) ||\n        (testProp && Object.prototype.hasOwnProperty.call(v, testProp)));\n};\nconst splitColor = (aName, bName, cName) => (v) => {\n    if (!isString(v))\n        return v;\n    const [a, b, c, alpha] = v.match(floatRegex);\n    return {\n        [aName]: parseFloat(a),\n        [bName]: parseFloat(b),\n        [cName]: parseFloat(c),\n        alpha: alpha !== undefined ? parseFloat(alpha) : 1,\n    };\n};\n\nexport { isColorString, splitColor };\n","import { color } from '../color/index.mjs';\nimport { isString, floatRegex, colorRegex, sanitize } from '../utils.mjs';\n\nfunction test(v) {\n    var _a, _b;\n    return (isNaN(v) &&\n        isString(v) &&\n        (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) +\n            (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) >\n            0);\n}\nconst NUMBER_TOKEN = \"number\";\nconst COLOR_TOKEN = \"color\";\nconst VAR_TOKEN = \"var\";\nconst VAR_FUNCTION_TOKEN = \"var(\";\nconst SPLIT_TOKEN = \"${}\";\nconst complexRegex = /(var\\s*\\(\\s*--[\\w-]+(\\s*,\\s*(?:(?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)+)?\\s*\\))|(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))|((-)?([\\d]*\\.?[\\d])+)/gi;\nfunction analyseComplexValue(value) {\n    const originalValue = value.toString();\n    const matchedValues = originalValue.match(complexRegex) || [];\n    const values = [];\n    const indexes = {\n        color: [],\n        number: [],\n        var: [],\n    };\n    const types = [];\n    for (let i = 0; i < matchedValues.length; i++) {\n        const parsedValue = matchedValues[i];\n        if (color.test(parsedValue)) {\n            indexes.color.push(i);\n            types.push(COLOR_TOKEN);\n            values.push(color.parse(parsedValue));\n        }\n        else if (parsedValue.startsWith(VAR_FUNCTION_TOKEN)) {\n            indexes.var.push(i);\n            types.push(VAR_TOKEN);\n            values.push(parsedValue);\n        }\n        else {\n            indexes.number.push(i);\n            types.push(NUMBER_TOKEN);\n            values.push(parseFloat(parsedValue));\n        }\n    }\n    const tokenised = originalValue.replace(complexRegex, SPLIT_TOKEN);\n    const split = tokenised.split(SPLIT_TOKEN);\n    return { values, split, indexes, types };\n}\nfunction parseComplexValue(v) {\n    return analyseComplexValue(v).values;\n}\nfunction createTransformer(source) {\n    const { split, types } = analyseComplexValue(source);\n    const numSections = split.length;\n    return (v) => {\n        let output = \"\";\n        for (let i = 0; i < numSections; i++) {\n            output += split[i];\n            if (v[i] !== undefined) {\n                const type = types[i];\n                if (type === NUMBER_TOKEN) {\n                    output += sanitize(v[i]);\n                }\n                else if (type === COLOR_TOKEN) {\n                    output += color.transform(v[i]);\n                }\n                else {\n                    output += v[i];\n                }\n            }\n        }\n        return output;\n    };\n}\nconst convertNumbersToZero = (v) => typeof v === \"number\" ? 0 : v;\nfunction getAnimatableNone(v) {\n    const parsed = parseComplexValue(v);\n    const transformer = createTransformer(v);\n    return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = {\n    test,\n    parse: parseComplexValue,\n    createTransformer,\n    getAnimatableNone,\n};\n\nexport { analyseComplexValue, complex };\n","import { clamp } from '../../../utils/clamp.mjs';\n\nconst number = {\n    test: (v) => typeof v === \"number\",\n    parse: parseFloat,\n    transform: (v) => v,\n};\nconst alpha = {\n    ...number,\n    transform: (v) => clamp(0, 1, v),\n};\nconst scale = {\n    ...number,\n    default: 1,\n};\n\nexport { alpha, number, scale };\n","import { isString } from '../utils.mjs';\n\nconst createUnitType = (unit) => ({\n    test: (v) => isString(v) && v.endsWith(unit) && v.split(\" \").length === 1,\n    parse: parseFloat,\n    transform: (v) => `${v}${unit}`,\n});\nconst degrees = createUnitType(\"deg\");\nconst percent = createUnitType(\"%\");\nconst px = createUnitType(\"px\");\nconst vh = createUnitType(\"vh\");\nconst vw = createUnitType(\"vw\");\nconst progressPercentage = {\n    ...percent,\n    parse: (v) => percent.parse(v) / 100,\n    transform: (v) => percent.transform(v * 100),\n};\n\nexport { degrees, percent, progressPercentage, px, vh, vw };\n","/**\n * TODO: When we move from string as a source of truth to data models\n * everything in this folder should probably be referred to as models vs types\n */\n// If this number is a decimal, make it just five decimal places\n// to avoid exponents\nconst sanitize = (v) => Math.round(v * 100000) / 100000;\nconst floatRegex = /(-)?([\\d]*\\.?[\\d])+/g;\nconst colorRegex = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))/gi;\nconst singleColorRegex = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))$/i;\nfunction isString(v) {\n    return typeof v === \"string\";\n}\n\nexport { colorRegex, floatRegex, isString, sanitize, singleColorRegex };\n","const isMotionValue = (value) => Boolean(value && value.getVelocity);\n\nexport { isMotionValue };\n"],"names":["LayoutGroupContext","react__WEBPACK_IMPORTED_MODULE_0__","createContext","MotionConfigContext","transformPagePoint","p","isStatic","reducedMotion","PresenceContext","Queue","constructor","order","scheduled","Set","add","process","has","push","remove","index","indexOf","splice","delete","clear","length","stepsOrder","createRenderBatcher","scheduleNextBatch","allowKeepAlive","runNextFrame","useDefaultElapsed","state","delta","timestamp","isProcessing","steps","reduce","acc","key","createRenderStep","thisFrame","nextFrame","numToRun","flushNextFrame","toKeepAlive","WeakSet","step","schedule","callback","keepAlive","immediate","addToCurrentFrame","queue","cancel","i","frameData","processStep","stepId","processBatch","GlobalConfig","c","useManualTiming","performance","now","Math","max","min","forEach","wake","frame","cancelFrame","_batcher_mjs__WEBPACK_IMPORTED_MODULE_0__","Z","requestAnimationFrame","_utils_noop_mjs__WEBPACK_IMPORTED_MODULE_1__","clearTime","undefined","time","set","_frame_mjs__WEBPACK_IMPORTED_MODULE_0__","_utils_GlobalConfig_mjs__WEBPACK_IMPORTED_MODULE_1__","newTime","queueMicrotask","result","isValidProp","MotionContext","react","LazyContext","strict","camelToDash","str","replace","toLowerCase","optimizedAppearDataAttribute","microtask","cancelMicrotask","batcher","isRefObject","ref","Object","prototype","hasOwnProperty","call","isVariantLabel","v","Array","isArray","isAnimationControls","start","variantPriorityOrder","variantProps","isControllingVariants","props","animate","some","name","isVariantNode","Boolean","variants","variantLabelsAsDependency","prop","join","featureProps","animation","exit","drag","focus","hover","tap","pan","inView","layout","featureDefinitions","isEnabled","SwitchLayoutGroupContext","motionComponentSymbol","Symbol","for","lowercaseSVGElements","isSVGComponent","Component","includes","test","scaleCorrectors","transformPropOrder","transformProps","isForcedMotionValue","layoutId","startsWith","translateAlias","x","y","z","transformPerspective","numTransforms","getValueAsType","value","type","transform","type_int_int","numbers","Rx","round","numberValueTypes","borderWidth","units","px","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderRadius","radius","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","width","maxWidth","height","maxHeight","size","top","right","bottom","left","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","margin","marginTop","marginRight","marginBottom","marginLeft","rotate","RW","rotateX","rotateY","rotateZ","scale","bA","scaleX","scaleY","scaleZ","skew","skewX","skewY","distance","translateX","translateY","translateZ","perspective","opacity","Fq","originX","$C","originY","originZ","zIndex","fillOpacity","strokeOpacity","numOctaves","buildHTMLStyles","latestValues","options","transformTemplate","style","vars","transformOrigin","hasTransform","hasTransformOrigin","transformIsNone","is_css_variable","f","valueType","valueAsType","default","buildTransform","enableHardwareAcceleration","allowTransformNone","transformIsDefault","transformString","transformName","trim","createHtmlRenderState","copyRawValuesOnly","target","source","is_motion_value","useHTMLProps","visualState","htmlProps","useStyle","styleProp","assign","useInitialMotionValues","useMemo","dragListener","draggable","userSelect","WebkitUserSelect","WebkitTouchCallout","touchAction","tabIndex","onTap","onTapStart","whileTap","validMotionProps","isValidMotionProp","shouldForward","require","_a","calcOrigin","origin","offset","dashKeys","array","camelKeys","buildSVGAttrs","attrX","attrY","attrScale","pathLength","pathSpacing","pathOffset","latest","isSVGTag","viewBox","attrs","dimensions","calcSVGTransformOrigin","pxOriginX","pxOriginY","buildSVGPath","spacing","useDashCase","keys","createSvgRenderState","tag","useSVGProps","_isStatic","visualProps","rawStyles","renderHTML","element","projection","getProjectionStyles","setProperty","camelCaseAttributes","renderSVG","renderState","_styleProp","setAttribute","scrapeMotionValuesFromProps","prevProps","newValues","scrape_motion_values_scrapeMotionValuesFromProps","targetKey","charAt","toUpperCase","substring","resolveVariantFromProps","definition","custom","currentValues","currentVelocity","isKeyframesTarget","isCustomValue","mix","toValue","resolveFinalValueInKeyframes","resolveMotionValue","unwrappedValue","get","makeUseVisualState","context","useContext","presenceContext","context_PresenceContext","O","make","makeState","createRenderState","onMount","makeLatestValues","scrapeMotionValues","values","motionValues","initial","isControllingVariants$1","isVariantNode$1","inherit","isInitialAnimationBlocked","variantToSet","list","resolved","transitionEnd","transition","valueTarget","mount","instance","config","use_constant","h","svgMotionConfig","useVisualState","frameloop_frame","Wi","read","getBBox","getBoundingClientRect","e","render","tagName","htmlMotionConfig","addDomEvent","eventName","handler","passive","addEventListener","removeEventListener","isPrimaryPointer","event","pointerType","button","isPrimary","extractEventInfo","pointType","point","addPointerInfo","addPointerEvent","createLock","lock","globalHorizontalLock","globalVerticalLock","getGlobalLock","openHorizontal","openVertical","isDragActive","openGestureLock","Feature","node","isMounted","update","addHoverEvent","isActive","callbackName","current","info","getProps","animationState","whileHover","setActive","isNodeOrChild","parent","child","parentElement","fireSyntheticPointerEvent","syntheticPointerEvent","PointerEvent","observerCallbacks","WeakMap","observers","fireObserverCallback","entry","fireAllObserverCallbacks","entries","thresholdNames","all","shallowCompare","next","prev","prevLength","resolveVariant","visualElement","getCurrent","getVelocity","velocity","secondsToMilliseconds","seconds","millisecondsToSeconds","milliseconds","instantAnimationState","isBezierDefinition","easing","cubicBezierAsString","a","b","d","supportedWaapiEasing","linear","ease","easeIn","easeOut","easeInOut","circIn","circOut","backIn","backOut","calcBezier","t","a1","a2","cubicBezier","mX1","mY1","mX2","mY2","noop","getTForX","binarySubdivide","lowerBound","upperBound","currentX","currentT","abs","aX","isEasingArray","mirrorEasing","reverseEasing","sin","acos","circInOut","backInOut","easingLookup","anticipate","pow","easingDefinitionToFunction","errors","k","x1","y1","x2","y2","keyframes","duration","keyframeValues","times","easingFunctions","map","done","absoluteTimes","defaultOffset","arr","fillOffset","remaining","offsetProgress","progress","Y","number","o","mapTimeToKeyframe","interpolate","s","calculatedDuration","calcGeneratorVelocity","resolveValue","prevT","velocity_per_second","R","calcAngularFreq","undampedFreq","dampingRatio","sqrt","durationKeys","physicsKeys","isSpringType","spring","restDelta","restSpeed","resolveSpring","stiffness","damping","mass","isResolvedFromDuration","getSpringOptions","springOptions","derived","findSpring","bounce","envelope","derivative","K","clamp","u","exponentialDecay","safeMin","exp","g","factor","initialGuess","approximateRoot","isNaN","initialVelocity","initialDelta","undampedAngularFreq","isGranularScale","angularFreq","cos","dampedAngularFreq","freqForT","sinh","cosh","isBelowVelocityThreshold","isBelowDisplacementThreshold","inertia","power","timeConstant","bounceDamping","bounceStiffness","modifyTarget","timeReachedBoundary","spring$1","isOutOfBounds","nearestBoundary","amplitude","ideal","calcDelta","calcLatest","applyFriction","checkCatchBoundary","hasUpdatedFrame","frameloopDriver","passTimestamp","stop","Pn","sync_time","X","calcGeneratorDuration","generator","Infinity","types","decay","tween","percentToProgress","percent","animateValue","autoplay","delay","driver","keyframes$1","repeat","repeatDelay","repeatType","onPlay","onStop","onComplete","onUpdate","resolveFinishedPromise","currentFinishedPromise","animationDriver","mapNumbersToKeyframes","mirroredGenerator","speed","hasStopped","updateFinishedPromise","Promise","resolve","generatorFactory","pipe","C","reverse","playState","holdTime","startTime","cancelTime","resolvedDuration","totalDuration","currentTime","tick","timeWithoutDelay","isInDelayPhase","elapsed","frameGenerator","currentIteration","floor","iterationProgress","isOddIteration","isAnimationFinished","finish","stopAnimationDriver","play","controls","then","reject","newSpeed","pause","complete","sample","supportsWaapi","Element","acceleratedValues","requiresPregeneratedKeyframes","valueName","isWaapiSupportedEasing","every","underDampedSpring","criticallyDampedSpring","keyframesTransition","getDefaultTransition","valueKey","isAnimatable","complex","P","maxDefaults","applyDefaultFilter","slice","split","match","utils","KP","unit","defaultValue","functionRegex","filter","getAnimatableNone","functions","defaultValueTypes","color","$","backgroundColor","outlineColor","fill","stroke","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","WebkitFilter","getDefaultValueType","defaultValueType","isZeroValueString","getValueTransition","animateMotionValue","valueTransition","getKeyframes","animatableTemplateValue","isTargetAnimatable","defaultOrigin","from","noneKeyframeIndexes","originKeyframe","targetKeyframe","isOriginAnimatable","isTransitionDefined","when","_delay","delayChildren","staggerChildren","staggerDirection","skipAnimations","createInstantAnimation","setValue","isHandoff","owner","HTMLElement","acceleratedAnimation","createAcceleratedAnimation","canAccelerateAnimation","pendingCancel","sampleAnimation","pregeneratedKeyframes","animateStyle","keyframeOptions","mapEasingToNativeEasing","iterations","direction","cancelAnimation","safeCancel","onfinish","getFinalKeyframe","attachTimeline","timeline","playbackRate","setWithVelocity","isWillChangeMotionValue","isNumericalString","testValueType","dimensionValueTypes","aQ","vw","vh","parse","findDimensionValueType","find","valueTypes","findValueType","animateTarget","transitionOverride","makeTargetAnimatable","willChange","getValue","animations","animationTypeState","getState","shouldBlockAnimation","protectedKeys","needsAnimating","shouldBlock","window","HandoffAppearAnimations","appearId","canSkip","hasKeyframesChanged","shouldReduceMotion","setTarget","hasValue","addValue","es_value","BX","animateVariant","variant","getAnimation","getChildAnimations","variantChildren","forwardDelay","animateChildren","maxStaggerDuration","generateStaggerDuration","sort","sortByTreeOrder","notify","first","last","sortNodePosition","reversePriorityOrder","numAnimationTypes","createTypeState","prevResolvedValues","id","PanSession","handlers","contextWindow","dragSnapToOrigin","startEvent","lastMoveEvent","lastMoveEventInfo","updatePoint","getPanInfo","history","isPanStarted","isDistancePastThreshold","distance2D","xDelta","yDelta","onStart","onMove","handlePointerMove","transformPoint","handlePointerUp","end","onEnd","onSessionEnd","resumeAnimation","panInfo","initialInfo","onSessionStart","removeListeners","updateHandlers","subtractPoint","lastDevicePoint","PanSession_getVelocity","timeDelta","timestampedPoint","lastPoint","calcLength","axis","isNear","maxDistance","calcAxisDelta","originPoint","translate","calcBoxDelta","calcRelativeAxis","relative","calcRelativeAxisPosition","calcRelativePosition","calcRelativeAxisConstraints","calcViewportAxisConstraints","layoutAxis","constraintsAxis","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","createAxisDelta","createDelta","createAxis","createBox","eachAxis","convertBoundingBoxToBox","isIdentityScale","hasScale","has2DTranslate","is2DTranslate","applyPointDelta","boxScale","applyAxisDelta","applyBoxDelta","box","snapToDefault","isInteger","translateAxis","transformAxis","transforms","scaleKey","originKey","axisOrigin","xKeys","yKeys","transformBox","measureViewportBox","transformBoxPoints","topLeft","bottomRight","getContextWindow","ownerDocument","defaultView","elementDragControls","VisualElementDragControls","openGlobalLock","isDragging","currentDirection","constraints","hasMutatedConstraints","elastic","originEvent","snapToCursor","isPresent","panSession","pauseAnimation","stopAnimation","dragPropagation","onDragStart","resolveConstraints","isAnimationBlocked","getAxisMotionValue","measuredAxis","layoutBox","parseFloat","dragDirectionLock","onDirectionLock","onDrag","getCurrentDirection","lockThreshold","updateAxis","getAnimationState","getTransformPagePoint","startAnimation","onDragEnd","_point","shouldDrag","axisValue","applyConstraints","dragConstraints","measure","prevConstraints","resolveRefConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","relativeConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","measurePageBox","rootProjectionNode","viewportBox","scroll","root","measuredConstraints","userConstraints","convertBoxToBoundingBox","dragMomentum","dragTransition","onDragTransitionEnd","momentumAnimations","startAxisValueAnimation","dragKey","externalMotionValue","scalePositionWithinConstraints","boxProgress","constraints_calcOrigin","sourceLength","targetLength","updateScroll","updateLayout","addListeners","stopPointerListener","measureDragConstraints","stopMeasureLayoutListener","stopResizeListener","stopLayoutUpdateListener","hasLayoutChanged","motionValue","asyncHandler","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","pixelsToPercent","pixels","correctBorderRadius","correct","MeasureLayoutWithContext","componentDidMount","layoutGroup","switchLayoutGroup","defaultScaleCorrectors","group","register","didUpdate","safeToRemove","setOptions","onExitComplete","getSnapshotBeforeUpdate","layoutDependency","willUpdate","promote","relegate","postRender","stack","getStack","members","componentDidUpdate","currentAnimation","isLead","componentWillUnmount","promoteContext","scheduleCheckAfterUnmount","deregister","MeasureLayout","usePresence","useId","useEffect","createElement","applyTo","boxShadow","treeScale","projectionDelta","shadow","template","createTransformer","xScale","yScale","averageScale","borders","numBorders","asNumber","isPx","getRadius","radiusName","easeCrossfadeIn","compress","easeCrossfadeOut","copyAxisInto","originAxis","copyBoxInto","originBox","removePointDelta","removeAxisTransforms","sourceAxis","removeAxisDelta","relativeProgress","delta_remove_xKeys","delta_remove_yKeys","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","boxEqualsRounded","aspectRatio","NodeStack","y4","scheduleRender","cl","prevLead","lead","indexOfNode","findIndex","member","preserveFollowOpacity","show","resumeFrom","preserveOpacity","snapshot","animationValues","isUpdating","isLayoutDirty","crossfade","hide","exitAnimationComplete","resumingFrom","removeLeadSnapshot","buildProjectionTransform","latestTransform","xTranslate","yTranslate","elementScaleX","elementScaleY","compareByDepth","depth","FlatTree","children","isDirty","transformAxes","hiddenVisibility","visibility","create_projection_node_id","projectionFrameData","totalNodes","resolvedTargetDeltas","recalculatedProjection","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","animationId","isTreeAnimating","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","eventHandlers","Map","hasTreeAnimated","updateScheduled","projectionUpdateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","MotionDebug","record","hasProjected","isVisible","animationProgress","sharedNodes","path","subscription_manager","L","notifyListeners","args","subscriptionManager","hasListeners","SVGElement","cancelDelay","resizeUnblockUpdate","timeout","checkElapsed","finishAnimation","registerSharedNode","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","setAnimationOrigin","animationOptions","unmount","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","getTransformTemplate","shouldNotifyListeners","prevTransformTemplateValue","updateSnapshot","updateWasBlocked","clearMeasurements","clearIsLayoutDirty","HandoffCancelAllAnimations","resetTransformStyle","notifyLayoutUpdate","S6","preRender","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","alwaysMeasureLayout","prevLayout","layoutCorrected","phase","needsMeasurement","layoutScroll","isRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","removeElementScroll","roundAxis","measuredBox","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","nodeBox","setTargetDelta","targetDelta","forceRelativeParentToResolveTarget","relativeParent","resolvedRelativeTargetAt","forceRecalculation","getLead","isShared","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isProjecting","pendingAnimation","prevTreeScaleX","prevTreeScaleY","applyTreeDeltas","treePath","isSharedTransition","treeLength","display","projectionTransform","projectionDeltaWithTransform","prevProjectionTransform","notifyAll","prevRelativeTarget","snapshotLatestValues","mixedValues","relativeLayout","snapshotSource","layoutSource","isSharedLayoutAnimation","isOnlyMember","shouldCrossfadeOpacity","hasOpacityCrossfade","mixTargetDelta","mixAxisDelta","output","mixAxis","to","mixValues","follow","opacityExit","borderLabel","followRadius","leadRadius","canMix","animateSingleValue","motionValue$1","completeAnimation","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","yLength","initialPromotionConfig","shouldPreserveFollowOpacity","getPrevLead","hasRotate","resetValues","setStaticValue","_b","styles","pointerEvents","emptyStyles","valuesToRender","corrected","num","resetTree","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","userAgentContains","navigator","userAgent","string","roundPoint","DocumentProjectionNode","document","documentElement","scrollLeft","body","scrollTop","HTMLProjectionNode","documentNode","getComputedStyle","position","splitCSSVariableRegex","getVariableValue","token","fallback","parseCSSVariable","exec","getPropertyValue","trimmed","positionalKeys","isPositionalKey","hasPositionalKey","isNumOrPxType","getPosFromMatrix","matrix","pos","getTranslateFromMatrix","pos2","pos3","_bbox","matrix3d","transformKeys","nonTranslationalTransformKeys","positionalValues","convertChangedValueTypes","changedKeys","originBbox","elementComputedStyle","targetBbox","jump","checkAndConvertChangedValueTypes","targetPositionalKeys","removedTransformValues","hasAttemptedToRemoveTransformValues","changedValueTypeKeys","toType","fromType","numKeyframes","fromIndex","removeNonTranslationalTransform","removedTransforms","scrollY","pageYOffset","convertedTarget","is_browser","j","scrollTo","parseDomVariant","resolveCSSVariables","prefersReducedMotion","hasReducedMotionListener","visualElementStore","featureNames","numFeatures","propEventHandlers","numVariantProps","VisualElement","reducedMotionConfig","features","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","triggerBuild","renderInstance","baseTarget","initialValues","manuallyAnimateOnMount","initialMotionValues","_props","_prevProps","removeFromVariantTree","addVariantChild","bindToMotionValue","initPrefersReducedMotion","matchMedia","motionMediaQuery","setReducedMotionPreferences","matches","addListener","valueIsTransform","removeOnChange","on","latestValue","removeOnRenderRequest","other","sortInstanceNodePosition","loadFeatures","renderedProps","isStrict","preloadedFeatures","initialLayoutGroupConfig","ProjectionNodeConstructor","FeatureConstructor","ProjectionNode","MeasureLayoutComponent","updateFeatures","feature","build","measureInstanceViewportBox","getStaticValue","canMutate","makeTargetAnimatableFromInstance","prevPresenceContext","listener","updateMotionValuesFromProps","nextValue","prevValue","existingValue","hasAnimated","removeValue","handleChildMotionValue","getVariant","getClosestVariantNode","getVariantContext","startAtParent","closestVariantNode","unsubscribe","removeValueFromRenderState","readValue","getBaseTargetFromProps","readValueFromInstance","setBaseTarget","getBaseTarget","valueFromInitial","DOMVisualElement","compareDocumentPosition","getOrigin","transitionOrigin","getOriginFromTransition","checkTargetForNewValues","newValueKeys","numNewValues","targetValue","parsed","HTMLVisualElement","arguments","defaultType","computedStyle","childSubscription","textContent","SVGVisualElement","getAttribute","create_visual_element_createDomVisualElement","createAnimationState","animateVisualElement","resolvedDefinition","whileInView","whileDrag","whileFocus","isInitialRender","buildResolvedTypeValues","animateChanges","changedActiveType","removedKeys","encounteredKeys","removedVariantIndex","typeState","propIsVariant","activeDelta","isInherited","prevProp","variantDidChange","shouldAnimateType","handledRemovedValues","definitionList","resolvedValues","allKeys","markToAnimate","blockInitialAnimation","fallbackAnimation","fallbackTarget","shouldAnimate","setAnimateFunction","makeAnimator","updateAnimationControlsSubscription","subscribe","prevAnimate","prevIsPresent","exitAnimation","hasEnteredView","isInView","startObserver","viewport","rootMargin","amount","once","threshold","observeIntersection","rootInteresectionObserver","initIntersectionObserver","lookupRoot","rootObservers","JSON","stringify","IntersectionObserver","observe","unobserve","isIntersecting","onViewportEnter","onViewportLeave","hasOptionsChanged","hasViewportOptionChanged","prevViewport","removeStartListeners","removeEndListeners","removeAccessibleListeners","startPointerPress","startInfo","isPressing","removePointerUpListener","endEvent","endInfo","checkPressEnd","onTapCancel","globalTapTarget","removePointerCancelListener","cancelEvent","cancelInfo","cancelPress","startPress","startAccessiblePress","removeKeydownListener","keydownEvent","keyupEvent","removeBlurListener","removePointerListener","removeFocusListener","onFocus","isFocusVisible","onBlur","removePointerDownListener","onPointerDown","pointerDownEvent","session","createPanHandlers","onPanSessionStart","onPanStart","onPan","onPanEnd","removeGroupControls","dragControls","motion","createMotionProxy","createConfig","customMotionComponentConfig","motion_createMotionComponent","createVisualElement","useRender","ForwardRefComponent","forwardRef","externalRef","configAndProps","_","useLayoutId","layoutGroupId","useCreateMotionContext","getCurrentTreeVariants","useVisualElement","lazyContext","visualElementRef","useRef","renderer","useInsertionEffect","wantsHandoff","HandoffComplete","use_isomorphic_effect","Provider","useCallback","Proxy","componentCache","_target","create_config_createDomMotionConfig","forwardMotionProps","baseConfig","createUseRender","useVisualProps","filteredProps","filterProps","isDom","elementProps","Fragment","renderedChildren","checkStringStartsWith","isCSSVariableName","startsAsVariableToken","isCSSVariableToken","startsWithToken","singleCssVariableRegex","MotionGlobalConfig","addUniqueItem","item","removeItem","moveItem","toIndex","startIndex","endIndex","warning","_noop_mjs__WEBPACK_IMPORTED_MODULE_0__","invariant","input","isClamp","mixer","inputLength","_errors_mjs__WEBPACK_IMPORTED_MODULE_3__","mixers","createMixers","customMixer","mixerFactory","_mix_index_mjs__WEBPACK_IMPORTED_MODULE_0__","numMixers","easingFunction","_noop_mjs__WEBPACK_IMPORTED_MODULE_1__","_pipe_mjs__WEBPACK_IMPORTED_MODULE_2__","interpolator","progressInRange","_progress_mjs__WEBPACK_IMPORTED_MODULE_4__","_clamp_mjs__WEBPACK_IMPORTED_MODULE_5__","isBrowser","hueToRgb","q","mixLinearColor","fromExpo","expo","colorTypes","hex","rgba","m","hsla","J","getColorType","asRGBA","model","hslaToRgba","hue","saturation","lightness","alpha","red","green","blue","mixColor","fromRGBA","toRGBA","blended","mixImmediate","mixNumber","getMixer","mixComplex","mixArray","mixObject","numValues","blendValue","originStats","V","targetStats","canInterpolate","indexes","var","matchOrder","orderedOrigin","pointers","originIndex","originValue","any","combineFunctions","transformers","toFromDifference","SubscriptionManager","subscriptions","_array_mjs__WEBPACK_IMPORTED_MODULE_0__","numSubscriptions","getSize","useConstant","init","useIsomorphicLayoutEffect","_is_browser_mjs__WEBPACK_IMPORTED_MODULE_1__","useLayoutEffect","velocityPerSecond","frameDuration","isFloat","collectMotionValues","MotionValue","version","canTrackVelocity","updateAndNotify","_frameloop_sync_time_mjs__WEBPACK_IMPORTED_MODULE_0__","updatedAt","setPrevFrameValue","setCurrent","change","renderRequest","prevFrameValue","prevUpdatedAt","onChange","subscription","_utils_subscription_manager_mjs__WEBPACK_IMPORTED_MODULE_1__","_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_2__","clearListeners","eventManagers","attach","passiveEffect","stopPassiveEffect","getPrevious","_utils_velocity_per_second_mjs__WEBPACK_IMPORTED_MODULE_3__","animationStart","animationComplete","clearAnimation","animationCancel","isAnimating","destroy","_utils_mjs__WEBPACK_IMPORTED_MODULE_0__","r","parseInt","_rgba_mjs__WEBPACK_IMPORTED_MODULE_1__","alpha$1","_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_1__","_utils_mjs__WEBPACK_IMPORTED_MODULE_2__","Nw","_numbers_index_mjs__WEBPACK_IMPORTED_MODULE_3__","_rgba_mjs__WEBPACK_IMPORTED_MODULE_0__","_hex_mjs__WEBPACK_IMPORTED_MODULE_1__","_hsla_mjs__WEBPACK_IMPORTED_MODULE_2__","_utils_mjs__WEBPACK_IMPORTED_MODULE_3__","HD","clampRgbUnit","_utils_clamp_mjs__WEBPACK_IMPORTED_MODULE_0__","rgbUnit","_numbers_index_mjs__WEBPACK_IMPORTED_MODULE_1__","isColorString","testProp","mj","splitColor","aName","bName","cName","NUMBER_TOKEN","COLOR_TOKEN","complexRegex","analyseComplexValue","originalValue","toString","matchedValues","parsedValue","_color_index_mjs__WEBPACK_IMPORTED_MODULE_1__","tokenised","parseComplexValue","numSections","convertNumbersToZero","dA","transformer","createUnitType","endsWith","degrees","progressPercentage","sanitize","floatRegex","colorRegex","singleColorRegex","isString","isMotionValue"],"sourceRoot":""}