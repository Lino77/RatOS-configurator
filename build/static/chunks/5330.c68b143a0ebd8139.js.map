{"version":3,"file":"static/chunks/5330.c68b143a0ebd8139.js","mappings":"gBWAAA,EECAC,EADAC,EQAAC,EGIAC,EA4BAC,EACAC,ECjCAC,kUvByCO,IAAMC,cAAgB,GAAsBC,CAAAA,EAAAA,EAAAA,GAAAA,EAAK,IAAMC,CAAAA,EAAAA,EAAAA,GAAAA,EAAcC,EAAQC,CAAAA,EAAAA,EAAAA,GAAAA,EAAKD,EAAQ,EAAG,MAKvFE,WAAa,SAACC,CAAAA,MAAoBC,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAH1B,UAIpB,GAAKC,KAAKC,KAAK,CAACH,EAAaC,EAAU,GAAGG,QAAQ,CAAC,GAAGC,MAAM,EAetD,eAAeC,qBACrBT,CAAgB,CAChBG,CAAkB,CAClBO,CAAwE,EAExE,GAAI,CAAEC,QAAAA,CAAO,CAAEC,SAAAA,CAAQ,CAAE,CAAGC,OAAOC,MAAM,CACxC,CACCH,QAAST,WAAWC,EA1BF,IA2BlBS,SAAU,KACX,EACAF,GAGD,GAAIE,OAAAA,GAAqBA,QAAAA,EACxB,MAAM,MAAU,mBAGjB,IAAIG,EAAyBH,SAAAA,EAAsB,EAAI,EACjDI,EAAMC,EAAAA,GAAQA,CAACC,UAAU,CAACP,GAC5BQ,EAAgC,MAAMrB,CAAAA,EAAAA,EAAAA,GAAAA,EAAK,IAAMsB,CAAAA,EAAAA,EAAAA,GAAAA,EAAIA,CAAAA,EAAAA,EAAAA,GAAAA,EAAI,EAAKC,CAAAA,EAAAA,EAAAA,GAAAA,EAAIC,CAAAA,EAAAA,EAAAA,GAAAA,EAAIN,EAAK,KAAMb,IAAaoB,KAAK,GAEjGC,EAAYd,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAASe,WAAW,EAAGzB,EAASH,cAAcG,GAE5D0B,EAAIT,EAAAA,GAAQA,CAACU,IAAI,CAACH,EAAWb,EAASN,KAAKC,KAAK,CAACK,EAAU,GAAIA,EAASM,EAAAA,GAAQA,CAACC,UAAU,EAE3FU,EAAK,MAAMF,EAAEH,KAAK,GACtBG,EAAEG,OAAO,GACTL,EAAUK,OAAO,GACjBb,EAAIa,OAAO,GAEX,IAAMC,EAAOF,EAAEG,GAAG,CAAC,IAElB,IAAIC,EAAmB,EAAE,CACrBC,EAAwB,EAAE,CAC1BC,EAAW,EACXC,EAAW,EAETC,EAAWjC,EAAaQ,EAC9B,IAAK,IAAI0B,EAAI,EAAGA,EAAIC,EAAO9B,MAAM,CAAG,EAAG6B,GAAK,EAAG,CAC9C,IAAME,EAAY,CAACF,IAAAA,EAAU,EAAIA,EAAI,GAAKD,EAC1C,GAAIG,EA1DU,IA4Db,SAED,IAAMC,EAAgB,CAAEH,EAAI,GAAK,EAAKD,EAGlCK,EAAgBH,CAAM,CAACD,EAAE,EAAI,EAAIC,CAAM,CAACD,EAAI,EAAE,EAAI,EACtDI,GAAStB,EAEO,OAAZP,GAAqByB,EAAI,GAAKG,EApEpB,KAqEbC,CAAAA,GAAS1B,CAAAA,EAEN0B,EAAQP,GACXA,CAAAA,EAAWO,CAAAA,EAERA,EAAQN,GACXA,CAAAA,EAAWM,CAAAA,EAEZT,EAAOU,IAAI,CAACD,GACZR,EAAYS,IAAI,CAACH,EAClB,CAEA,MAAO,CACNI,UAAWX,EACXC,YAAaA,EACbW,WAAY,IAAIC,EAAAA,WAAWA,CAACV,EAAUD,EACvC,CACD,GACMY,EAAMC,MAAMjB,GAClB,OAAOgB,CACR,CAEO,qBAAME,mBAAmBC,MAC/BC,YAAYC,CAAW,CAAE,CACxB,KAAK,CAACA,GACN,IAAI,CAACC,IAAI,CAAG,YACb,CACD,EAGO,IAAML,MAAQ,MAAOM,IAC3B,GAAIA,GAAAA,EAAK7C,MAAM,CAAO,MAAM,IAAIwC,WAAW,yCAO3C,IAAIM,EAAgBD,CAAI,CAAC,EAAE,CAACV,SAAS,CAACnC,MAAM,CACxCsC,EAAM,IAAIS,aAAaD,GAAeE,IAAI,CAAC,GAC/C,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAK7C,MAAM,CAAEiD,IAChC,IAAK,IAAIpB,EAAI,EAAGA,EAAIiB,EAAejB,IAClCS,CAAG,CAACT,EAAE,EAAIgB,CAAI,CAACI,EAAE,CAACd,SAAS,CAACN,EAAE,CAGhC,IAAIH,EAAW,EACXC,EAAW,EACf,IAAK,IAAIE,EAAI,EAAGA,EAAIiB,EAAejB,IAClCS,CAAG,CAACT,EAAE,CAAGS,CAAG,CAACT,EAAE,CAAGgB,EAAK7C,MAAM,CACzBsC,CAAG,CAACT,EAAE,CAAGH,GACZA,CAAAA,EAAWY,CAAG,CAACT,EAAE,EAEdS,CAAG,CAACT,EAAE,CAAGF,GACZA,CAAAA,EAAWW,CAAG,CAACT,EAAE,EAInB,MAAO,CACNM,UAAWG,EACXb,YAAasB,aAAaG,IAAI,CAACL,CAAI,CAAC,EAAE,CAACpB,WAAW,EAClDW,WAAY,IAAIC,EAAAA,WAAWA,CAACV,EAAUD,EACvC,CACD,EAEayB,QAAU,IACtB,IAAIL,EAAgBD,CAAI,CAAC,EAAE,CAACV,SAAS,CAACnC,MAAM,CACxCa,EAAM,IAAIkC,aAAaD,GAAeE,IAAI,CAAC,GAC/C,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAK7C,MAAM,CAAEiD,IAChC,IAAK,IAAIpB,EAAI,EAAGA,EAAIiB,EAAejB,IAClChB,CAAG,CAACgB,EAAE,EAAIgB,CAAI,CAACI,EAAE,CAACd,SAAS,CAACN,EAAE,CAGhC,GAAM,CAAEF,SAAAA,CAAQ,CAAED,SAAAA,CAAQ,CAAE,CAAGmB,EAAKO,MAAM,CACzC,CAACC,EAAKC,KACDA,EAAIlB,UAAU,CAACmB,GAAG,CAAGF,EAAI1B,QAAQ,EACpC0B,CAAAA,EAAI1B,QAAQ,CAAG2B,EAAIlB,UAAU,CAACmB,GAAG,EAE9BD,EAAIlB,UAAU,CAACoB,GAAG,CAAGH,EAAI3B,QAAQ,EACpC2B,CAAAA,EAAI3B,QAAQ,CAAG4B,EAAIlB,UAAU,CAACoB,GAAG,EAE3BH,GAER,CAAE1B,SAAU,EAAGD,SAAU,CAAE,GAE5B,MAAO,CACNS,UAAWtB,EACXY,YAAasB,aAAaG,IAAI,CAACL,CAAI,CAAC,EAAE,CAACpB,WAAW,EAClDW,WAAY,IAAIC,EAAAA,WAAWA,CAACV,EAAUD,EACvC,CACD,uCCxMO,IAAM+B,WAAa,GACzBC,CAAAA,EAAAA,EAAAA,CAAAA,EACCC,CAAAA,EAAAA,EAAAA,CAAAA,EAAK,CAACN,EAAKO,KACV,IAAMC,EAAS,IAAIR,EAAKO,EAAM,CAACE,KAAK,CAAC,CAACC,GACtC,OAAOF,CACR,EAAG,EAAE,EACLG,CAAAA,EAAAA,EAAAA,CAAAA,EAAO,GAAYH,EAAO7D,MAAM,EAAI+D,4BCN/B,IAAME,EAAgC,CAC5CC,UAAW,GACXC,MAA0D,MAC3D,4BCOO,SAASC,aAGd,MAAO,YAMT,UACoBC,CAAAA,EAAAA,EAAAA,CAAAA,EAA0B,CAC7CC,OAAAA,IACQ,EACNC,MAAO,CACNC,CAAAA,EAAAA,EAAAA,EAAAA,EAAc,CAIbC,IAAK,GAAgBC,MAAA,CAAbN,aAAa,aACrBO,aAAc,IACf,GACA,CACF,EAEDC,UAAW,CACVC,YAAa,CAIZ,MAAMC,UAAUC,CAAI,EAOnB,MAAMA,EAAKC,UAAU,GAErB,MAAMD,EAAKE,WAAW,CAACC,iBAAiB,EACzC,CACD,CACD,EAIAC,IAAK,EACN,GACO,IAAMC,EAAcC,CAAAA,EAAAA,EAAAA,EAAAA,EAAiC,CAC3Dd,MAAO,CACNC,CAAAA,EAAAA,EAAAA,EAAAA,EAAc,CAIbC,IAAK,GAAgBC,MAAA,CAAbN,aAAa,aACrBO,aAAc,IACf,GACA,kBElEK,IAAMW,EAAeC,EAAAA,CAACA,CAACC,IAAI,CAAC,CAAC,QAAS,QAAS,OAAQ,OAAQ,QAAS,QAAQ,EAE1EC,EAAeF,EAAAA,CAACA,CAACG,MAAM,CAAC,CACpCC,GAAIJ,EAAAA,CAACA,CAACK,MAAM,GACZC,SAAUN,EAAAA,CAACA,CAACxE,KAAK,CAACwE,EAAAA,CAACA,CAACO,GAAG,IACvBC,SAAUR,EAAAA,CAACA,CAACxE,KAAK,CAACwE,EAAAA,CAACA,CAACS,MAAM,CAACT,EAAAA,CAACA,CAACU,MAAM,GAAIV,EAAAA,CAACA,CAACO,GAAG,KAC5C3B,MAAOoB,EAAAA,CAACA,CAACG,MAAM,CAAC,CACfQ,MAAOZ,EACPa,MAAOZ,EAAAA,CAACA,CAACK,MAAM,EAChB,EACD,GCNMQ,KAAO,eAAgBjC,CAAiB,CAAEkC,CAAuB,EACtEC,EAAWC,SAAS,CAACC,MAAM,CAAC,CAAErC,MAAAA,EAAOkC,SAAUZ,EAAagB,KAAK,CAACJ,EAAU,EAC7E,EAEIK,EAA6B,KACpBC,UAAY,IACxB,MAAID,EACIA,EAERA,EAASE,IAAK,CACb,GAAG3C,CAAc,CACjB4C,QAAS,CACRC,SAAU,CACTV,IACD,CACD,CACD,GCoBGW,EAAS,GACN,eAAeC,WACrB,GAAID,EACH,MAAO,GAER,GAPU,oBAAOE,YAA8BA,WAAWC,SAAS,EAAID,WAAWC,SAAS,CAACC,GAAG,CAY9F,GAAI,CACHR,YAAYS,IAAI,CAAC,0BACjB,MAAMC,EAAAC,CAAA,OAAAC,IAAA,CAAAF,EAAAG,IAAA,CAAAH,EAAA,QACN,MAAMI,CAAAA,EAAAA,EAAAA,GAAAA,EAAW,UACjBd,YAAYS,IAAI,CAAC,wBAClB,CAAE,MAAOE,EAAG,CACXX,YAAYe,KAAK,CAACJ,EAAG,wDACrB,MAAMK,QAAAC,OAAA,GAAAL,IAAA,CAAAF,EAAAG,IAAA,CAAAH,EAAA,QACN,MAAMI,CAAAA,EAAAA,EAAAA,GAAAA,EAAW,QAClB,MAbAd,YAAYS,IAAI,CAAC,+CACjB,MAAMO,QAAAC,OAAA,GAAAL,IAAA,CAAAF,EAAAG,IAAA,CAAAH,EAAA,QACN,MAAMI,CAAAA,EAAAA,EAAAA,GAAAA,EAAW,QAalB,OAAMI,CAAAA,EAAAA,EAAAA,GAAAA,IACNd,EAAS,EACV,CAEA,IAAMe,OAAS,eAAOC,CAAAA,EAA0BC,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,EAAAA,SAAAA,CAAAA,EAAAA,CAC/C,IAAMrI,EAAa,IAAIsI,EAAAA,CAASA,CAACF,EAAQ/H,MAAM,EAC7CY,GAAG,CAAC,IAAIqH,EAAAA,CAASA,CAACF,CAAO,CAACA,EAAQ/H,MAAM,CAAG,EAAE,CAAC,EAAE,EAAEkI,KAAK,CAACH,CAAO,CAAC,EAAE,CAAC,EAAE,EAAEI,SAAS,CAAC,KACjFC,aAAa,CAAC,EAAGH,EAAAA,CAASA,CAACI,WAAW,EACtCC,QAAQ,GACJC,EAAUjJ,CAAAA,EAAAA,EAAAA,GAAAA,EAAK,KACpB,IAAME,EAASgJ,CAAAA,EAAAA,EAAAA,GAAAA,EAAST,EAAQxG,GAAG,CAAC,GAAO,CAACkH,CAAC,CAAC,EAAE,CAAEA,CAAC,CAAC,EAAE,CAAEA,CAAC,CAAC,EAAE,CAAC,GACvD,CAACC,EAAKC,EAAKC,EAAI,CAAGC,CAAAA,EAAAA,EAAAA,GAAAA,EAAgBrJ,EAAQ,EAAG,GAC7C4B,EAAI0H,CAAAA,EAAAA,EAAAA,GAAAA,EAAiBJ,EAAK,CAACA,EAAIK,KAAK,CAAC,EAAE,CAAC,EACxCC,EAAIF,CAAAA,EAAAA,EAAAA,GAAAA,EAAiBH,EAAK,CAACA,EAAII,KAAK,CAAC,EAAE,CAAC,EACxCxD,EAAIuD,CAAAA,EAAAA,EAAAA,GAAAA,EAAiBF,EAAK,CAACA,EAAIG,KAAK,CAAC,EAAE,CAAC,EAC9C,MAAO,CAAE3H,EAAAA,EAAG4H,EAAAA,EAAGzD,EAAAA,CAAE,CAClB,GACA,GAAI,CACH,GAAM,CAAC0D,EAAMC,EAAMC,EAAK,CAAG,MAAMxB,QAAQyB,GAAG,CAAC,CAC5CnJ,qBAAqBsI,EAAQnH,CAAC,CAAEzB,EAAY,CAAEsB,YAAa,EAAK,GAChEhB,qBAAqBsI,EAAQS,CAAC,CAAErJ,EAAY,CAAEsB,YAAa,EAAK,GAChEhB,qBAAqBsI,EAAQhD,CAAC,CAAE5F,EAAY,CAAEsB,YAAa,EAAK,GAChE,EAED,OADAZ,OAAOgJ,MAAM,CAACd,GAASe,OAAO,CAAC,GAAOC,EAAElI,OAAO,IACxC,CACND,EAAG6H,EACHD,EAAGE,EACH3D,EAAG4D,EACHK,MAAOrG,QAAQ,CAAC8F,EAAMC,EAAMC,EAAK,CAGlC,CACD,CAAE,MAAO7B,EAAG,CACX,GAAIA,aAAa9E,WAChB,OAAO,IAER,OAAM8E,CACP,CACD,EAIMmC,mBAAqB,MAC1BC,EACAC,EACAC,KAEA,IAAMC,EAAa,IAAIC,EAAAA,CAAOA,CACxBC,EAAcF,EAAWG,YAAY,GAAGtG,IAAI,CAACuG,CAAAA,EAAAA,EAAAA,CAAAA,EAAY,CAAElG,WAAY,EAAGmG,SAAU,EAAM,IAChGH,EAAYI,SAAS,GACrB,IAAIC,EAAQ,GAIZ,OAFC,MAAMpD,WAEA4C,EAAclG,IAAI,CACxB2G,CAAAA,EAAAA,EAAAA,CAAAA,IACAC,CAAAA,EAAAA,EAAAA,CAAAA,EACC,CAACjH,EAAKkH,KACL,GAAIA,EACH,OAAOb,EAAQhG,IAAI,CAClBC,CAAAA,EAAAA,EAAAA,CAAAA,EAAK,CAAC6G,EAAWC,KAChBD,EAAUtI,IAAI,CAACuI,GACRD,GACL,EAAE,EACLxG,CAAAA,EAAAA,EAAAA,CAAAA,EAAO,GAAa+D,EAAQ/H,MAAM,CAAG,MACrCuB,CAAAA,EAAAA,EAAAA,CAAAA,EAAI,GACI,EACNwG,QAAAA,EACA2C,uBAAwBH,CACzB,KAIH,GAAI,CAACA,GAAclH,EAAIqH,sBAAsB,CAAE,CAC9C,IAAMC,EAAKtH,EAAIqH,sBAAsB,CACrC5C,OAAOzE,EAAI0E,OAAO,CAAE,IAAMR,IAAI,CAAC,IAC9BoD,EAAGrH,EACJ,EACD,CAEA,OAAOqG,EAAgBjG,IAAI,CAC1BkH,CAAAA,EAAAA,EAAAA,CAAAA,EAAU,GACFlB,EAAQhG,IAAI,CAACD,WAAW9D,KAEhC4B,CAAAA,EAAAA,EAAAA,CAAAA,EAAI,GACI,EACNwG,QAAAA,EACA2C,uBAAwB,EACzB,IAGH,EACA,CAAE3C,QAAS,EAAE,CAAqB2C,uBAAwB,EAA+B,GAE1FG,CAAAA,EAAAA,EAAAA,CAAAA,EAAS,IAAMd,EAAa,CAAEe,QAASV,EAAOW,SAAU,EAAK,GAC7DC,CAAAA,EAAAA,EAAAA,CAAAA,EAAU,OAAC,CAAEjD,QAAAA,CAAO,CAAE2C,uBAAAA,CAAsB,CAAE,CAAAO,EAI7C,OAHIb,GACHA,CAAAA,EAAQ,IAEFc,CAAAA,EAAAA,EAAAA,CAAAA,EACNhI,CAAAA,EAAAA,EAAAA,CAAAA,EACC4E,OAAOC,GAASR,IAAI,CAAC,GACpB,MAAIjE,GACHuG,EAAWzK,IAAI,CAAC,CAAC,GACV+L,EAAAA,CAAKA,GAEbtB,EAAWzK,IAAI,CAAC,CAAC,GACVgM,CAAAA,EAAAA,EAAAA,EAAAA,EAAG9H,MAGZ+H,EAAAA,CAAcA,EACb3H,IAAI,CAAC4H,CAAAA,EAAAA,EAAAA,CAAAA,IACR,GAEF,EA4KAC,CAAAA,EAAAA,EAAAA,EAAAA,EAjJO,MAsBCC,KAAKC,CAAkC,CAAE,CAC/C,OAAOA,EAAO/H,IAAI,CACjBgI,CAAAA,EAAAA,EAAAA,CAAAA,EAAS,IACR,OAAQ9H,EAAM+H,OAAO,EACpB,IAAK,aACJ,GAAI,CAAC,IAAI,CAACC,cAAc,EAAIhI,CAAkB,IAAlBA,EAAMiI,OAAO,CAExC,OADA,IAAI,CAACD,cAAc,CAAG,GACfE,CAAAA,EAAAA,EAAAA,CAAAA,EACNV,CAAAA,EAAAA,EAAAA,EAAAA,EAAG,CACFW,KAAO,sBACR,GACAb,CAAAA,EAAAA,EAAAA,CAAAA,EACChI,CAAAA,EAAAA,EAAAA,CAAAA,EACC,IAAIyE,QAA+B,CAACC,EAASoE,KAC5C,IAAI,CAACC,mBAAmB,CAAC7M,IAAI,CAAC,IAC7B,GAAI8M,MAAAA,EAAa,CAChBtE,EAAQuD,EAAAA,CAAKA,EACb,MACD,CACAvD,EAAQwD,CAAAA,EAAAA,EAAAA,EAAAA,EAAGc,GACZ,EACD,IACCxI,IAAI,CACL4H,CAAAA,EAAAA,EAAAA,CAAAA,IACA/J,CAAAA,EAAAA,EAAAA,CAAAA,EAAI,GACI,EACNwK,KAAO,wBACPzI,IAAK6I,CACN,KAGFd,EAAAA,CAAcA,GAOhB,OAHA,IAAI,CAACO,cAAc,CAAG,GACtB,IAAI,CAACK,mBAAmB,CAAC7M,IAAI,CAAC,IAEvB+L,EAAAA,CAAKA,KAGT,cAEJ,GADA,IAAI,CAACiB,wBAAwB,CAAChN,IAAI,CAACwE,EAAMiI,OAAO,EAC5C,UAAI,CAACQ,SAAS,CAAU,CAC3B,IAAI,CAACA,SAAS,CAAG5C,mBAChB,IAAI,CAAC6C,kBAAkB,CACvB,IAAI,CAACC,sBAAsB,CAC3B,IAAI,CAAC3C,aAAa,EAEnB,IAAM4C,EAAStJ,CAAAA,EAAAA,EAAAA,CAAAA,EAAK,IAAI,CAACmJ,SAAS,EAAE3I,IAAI,CACvCgI,CAAAA,EAAAA,EAAAA,CAAAA,EAAS,IACR,IAAMe,EAAMC,EAAKhJ,IAAI,CACpBnC,CAAAA,EAAAA,EAAAA,CAAAA,EACC,GACE,EACAwK,KAAM,MACNzI,IAAAA,CACD,IAKF2G,CAAAA,EAAAA,EAAAA,CAAAA,EAAY,CAAElG,WAAY,EAAGmG,SAAU,EAAM,IAE9C,OAAOuC,CACR,IAOD,MALAE,CAAAA,EAAAA,EAAAA,CAAAA,EAAezJ,CAAAA,EAAAA,EAAAA,CAAAA,EAAK,IAAI,CAACmJ,SAAS,GAAG9E,IAAI,CAAC,KACzCqF,WAAW,KACV,IAAI,CAACX,mBAAmB,CAAC7M,IAAI,CAAC,GAC/B,EAAG,IACJ,GACOoN,CACR,CACA,OAAOrB,EAAAA,CAAKA,KAER,sBAKJ,OAJK,IAAI,CAACS,cAAc,EACvB,IAAI,CAACK,mBAAmB,CAAC7M,IAAI,CAAC,IAE/B,IAAI,CAACyN,4BAA4B,CAACzN,IAAI,CAACwE,EAAMiI,OAAO,EAC7CV,EAAAA,CAAKA,SAGZ,OAAOA,EAAAA,CAAKA,CAGf,GAEF,CACO2B,oBAAoBC,CAAuB,CAAkB,CACnE,OAAQA,EAAOhB,IAAI,EAClB,IAAK,MAYL,IAAK,wBAXJ,MAAO,CACNgB,EAAOzJ,GAAG,CAAClC,CAAC,CAACe,SAAS,CAAC0B,MAAM,CAC7BkJ,EAAOzJ,GAAG,CAAClC,CAAC,CAACK,WAAW,CAACoC,MAAM,CAC/BkJ,EAAOzJ,GAAG,CAAC0F,CAAC,CAAC7G,SAAS,CAAC0B,MAAM,CAC7BkJ,EAAOzJ,GAAG,CAAC0F,CAAC,CAACvH,WAAW,CAACoC,MAAM,CAC/BkJ,EAAOzJ,GAAG,CAACiC,CAAC,CAACpD,SAAS,CAAC0B,MAAM,CAC7BkJ,EAAOzJ,GAAG,CAACiC,CAAC,CAAC9D,WAAW,CAACoC,MAAM,CAC/BkJ,EAAOzJ,GAAG,CAACkG,KAAK,CAACrH,SAAS,CAAC0B,MAAM,CACjCkJ,EAAOzJ,GAAG,CAACkG,KAAK,CAAC/H,WAAW,CAACoC,MAAM,CACnC,SAeD,MAAO,EAAE,CAGZ,CAnIAnB,aAAqB,MAVbkJ,cAAAA,CAAiB,QACjBS,SAAAA,CAA0D,UAC1DD,wBAAAA,CAA2B,IAAItC,EAAAA,CAAOA,MACtCwC,kBAAAA,CAAgD,IAAI,CAACF,wBAAwB,CAACpC,YAAY,QAC1F6C,4BAAAA,CAA+B,IAAI/C,EAAAA,CAAOA,MAC1CyC,sBAAAA,CAA6C,IAAI,CAACM,4BAA4B,CACpF7C,YAAY,GACZtG,IAAI,CAACuG,CAAAA,EAAAA,EAAAA,CAAAA,EAAY,CAAElG,WAAY,EAAGmG,SAAU,EAAM,SAC5C+B,mBAAAA,CAAsB,IAAInC,EAAAA,CAAOA,MACjCF,aAAAA,CAAgB,IAAI,CAACqC,mBAAmB,CAACjC,YAAY,GAAGtG,IAAI,CAACuG,CAAAA,EAAAA,EAAAA,CAAAA,EAAY,CAAElG,WAAY,EAAGmG,SAAU,EAAM,IAEjH,IAAI,CAACkC,wBAAwB,CAAG,IAAItC,EAAAA,CAAOA,CAC3C,IAAI,CAACwC,kBAAkB,CAAG,IAAI,CAACF,wBAAwB,CAACpC,YAAY,GACpE,IAAI,CAAC6C,4BAA4B,CAAG,IAAI/C,EAAAA,CAAOA,CAC/C,IAAI,CAACyC,sBAAsB,CAAG,IAAI,CAACM,4BAA4B,CAC7D7C,YAAY,GACZtG,IAAI,CAACuG,CAAAA,EAAAA,EAAAA,CAAAA,EAAY,CAAElG,WAAY,EAAGmG,SAAU,EAAM,IACpD,IAAI,CAACqC,sBAAsB,CAACpC,SAAS,GACrC,IAAI,CAAC8B,mBAAmB,CAAG,IAAInC,EAAAA,CAAOA,CACtC,IAAI,CAACF,aAAa,CAAG,IAAI,CAACqC,mBAAmB,CAACjC,YAAY,GAAGtG,IAAI,CAACuG,CAAAA,EAAAA,EAAAA,CAAAA,EAAY,CAAElG,WAAY,EAAGmG,SAAU,EAAM,GAChH,CA0HD,KC1VA8C,EAAA,GAGA,SAAA3F,oBAAA4F,CAAA,EAEA,IAAAC,EAAAF,CAAA,CAAAC,EAAA,CACA,GAAAC,KAAAC,IAAAD,EACA,OAAAA,EAAAE,OAAA,CAGA,IAAAC,EAAAL,CAAA,CAAAC,EAAA,EAGAG,QAAA,EACA,EAGAE,EAAA,GACA,IACAC,CAAA,CAAAN,EAAA,CAAAO,IAAA,CAAAH,EAAAD,OAAA,CAAAC,EAAAA,EAAAD,OAAA,CAAA/F,qBACAiG,EAAA,EACA,QAAG,CACHA,GAAA,OAAAN,CAAA,CAAAC,EAAA,CAIA,OAAAI,EAAAD,OAAA,CAIA/F,oBAAAoG,CAAA,CAAAF,EAGAlG,oBAAAjG,CAAA,YAGA,IAAAsM,EAAArG,oBAAAsG,CAAA,CAAAR,KAAAA,EAAA,wDAAuH,OAAA9F,oBAAA,SAEvH,OADAA,oBAAAsG,CAAA,CAAAD,EAEA,ECxCA7O,EAAA,GACAwI,oBAAAsG,CAAA,UAAAxB,CAAA,CAAAyB,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,GAAAF,EAAA,CACAE,EAAAA,GAAA,EACA,QAAAjM,EAAAhD,EAAAmB,MAAA,CAA+B6B,EAAA,GAAAhD,CAAA,CAAAgD,EAAA,MAAAiM,EAAwCjM,IAAAhD,CAAA,CAAAgD,EAAA,CAAAhD,CAAA,CAAAgD,EAAA,GACvEhD,CAAA,CAAAgD,EAAA,EAAA+L,EAAAC,EAAAC,EAAA,CACA,MACA,CAEA,QADAC,EAAAC,IACAnM,EAAA,EAAiBA,EAAAhD,EAAAmB,MAAA,CAAqB6B,IAAA,CAKtC,QAJA+L,EAAA/O,CAAA,CAAAgD,EAAA,IACAgM,EAAAhP,CAAA,CAAAgD,EAAA,IACAiM,EAAAjP,CAAA,CAAAgD,EAAA,IACAoM,EAAA,GACAC,EAAA,EAAkBA,EAAAN,EAAA5N,MAAA,CAAqBkO,IACvC,GAAAJ,GAAAzN,OAAA8N,IAAA,CAAA9G,oBAAAsG,CAAA,EAAAS,KAAA,UAAAC,CAAA,EAAoH,OAAAhH,oBAAAsG,CAAA,CAAAU,EAAA,CAAAT,CAAA,CAAAM,EAAA,IACpHN,EAAAU,MAAA,CAAAJ,IAAA,IAEAD,EAAA,GACAH,EAAAC,GAAAA,CAAAA,EAAAD,CAAA,GAGA,GAAAG,EAAA,CACApP,EAAAyP,MAAA,CAAAzM,IAAA,GACA,IAAA0M,EAAAV,GACAV,MAAAA,IAAAoB,GAAApC,CAAAA,EAAAoC,CAAAA,CACA,CACA,CACA,OAAApC,CACA,EC5BA9E,oBAAAmH,CAAA,UAAAnB,CAAA,EACA,IAAAoB,EAAApB,GAAAA,EAAAqB,UAAA,CACA,WAAe,OAAArB,EAAA,SACf,WAAe,OAAAA,CAAA,EAEf,OADAhG,oBAAAsH,CAAA,CAAAF,EAAA,CAAiCG,EAAAH,CAAA,GACjCA,CACA,ECPA1P,EAAAsB,OAAAwO,cAAA,UAAAC,CAAA,EAAuD,OAAAzO,OAAAwO,cAAA,CAAAC,EAAA,EAAqC,SAAAA,CAAA,EAAkB,OAAAA,EAAAC,SAAA,EAQ9G1H,oBAAAkC,CAAA,UAAApD,CAAA,CAAA6I,CAAA,EAEA,GADA,EAAAA,GAAA7I,CAAAA,EAAA,KAAAA,EAAA,EACA,EAAA6I,GACA,iBAAA7I,GAAAA,IACA,EAAA6I,GAAA7I,EAAAuI,UAAA,EACA,GAAAM,GAAA,mBAAA7I,EAAAoB,IAAA,EAHA,OAAApB,EAKA,IAAA8I,EAAA5O,OAAA6O,MAAA,OACA7H,oBAAAkH,CAAA,CAAAU,GACA,IAAAE,EAAA,GACArQ,EAAAA,GAAA,MAAAC,EAAA,IAAsDA,EAAA,IAAAA,EAAAA,GAAA,CACtD,QAAAqQ,EAAAJ,EAAAA,GAAA7I,EAAsC,iBAAAiJ,GAAA,EAAAtQ,EAAAuQ,OAAA,CAAAD,GAAiEA,EAAArQ,EAAAqQ,GACvG/O,OAAAiP,mBAAA,CAAAF,GAAA9F,OAAA,UAAA+E,CAAA,EAA8Dc,CAAA,CAAAd,EAAA,YAAwB,OAAAlI,CAAA,CAAAkI,EAAA,IAItF,OAFAc,EAAA,mBAA+B,OAAAhJ,CAAA,EAC/BkB,oBAAAsH,CAAA,CAAAM,EAAAE,GACAF,CACA,ECxBA5H,oBAAAsH,CAAA,UAAAvB,CAAA,CAAAmC,CAAA,EACA,QAAAlB,KAAAkB,EACAlI,oBAAAmI,CAAA,CAAAD,EAAAlB,IAAA,CAAAhH,oBAAAmI,CAAA,CAAApC,EAAAiB,IACAhO,OAAAoP,cAAA,CAAArC,EAAAiB,EAAA,CAAyCqB,WAAA,GAAAC,IAAAJ,CAAA,CAAAlB,EAAA,EAGzC,ECPAhH,oBAAAnG,CAAA,IAGAmG,oBAAAC,CAAA,UAAAsI,CAAA,EACA,OAAAjI,QAAAyB,GAAA,CAAA/I,OAAA8N,IAAA,CAAA9G,oBAAAnG,CAAA,EAAAkC,MAAA,UAAAyM,CAAA,CAAAxB,CAAA,EAEA,OADAhH,oBAAAnG,CAAA,CAAAmN,EAAA,CAAAuB,EAAAC,GACAA,CACA,EAAE,IACF,ECPAxI,oBAAAyI,CAAA,UAAAF,CAAA,SAEA,OAAAA,EAAA,yCACAA,OAAAA,EAAA,yCACAA,OAAAA,EAAA,6CACAA,OAAAA,EAAA,6CACAA,OAAAA,EAAA,yCAEA,oBAA6B,gEAAuE,CAAAA,EAAA,EAAAA,CAAA,QAA+B,uKAAoL,CAAAA,EAAA,MACvT,ECTAvI,oBAAA0I,QAAA,UAAAH,CAAA,EAGA,ECJAvI,oBAAA2I,CAAA,YACA,oBAAA/I,WAAA,OAAAA,WACA,IACA,sCACA,CAAG,MAAAK,EAAA,CACH,oBAAA2I,OAAA,OAAAA,MACA,CACA,ICPA5I,oBAAAmI,CAAA,UAAAV,CAAA,CAAAoB,CAAA,EAA8C,OAAA7P,OAAA8P,SAAA,CAAAC,cAAA,CAAA5C,IAAA,CAAAsB,EAAAoB,EAAA,ECC9C7I,oBAAAkH,CAAA,UAAAnB,CAAA,EACA,oBAAAiD,QAAAA,OAAAC,WAAA,EACAjQ,OAAAoP,cAAA,CAAArC,EAAAiD,OAAAC,WAAA,EAAuDnK,MAAA,WAEvD9F,OAAAoP,cAAA,CAAArC,EAAA,cAAgDjH,MAAA,IAChD,ECLAkB,oBAAAkJ,EAAA,YAUA,OARApD,KAAAA,IAAAnO,IACAA,EAAA,CACAwR,gBAAA,SAAA/L,CAAA,EAAoC,OAAAA,CAAA,CACpC,EACA,oBAAAgM,cAAAA,aAAAC,YAAA,EACA1R,CAAAA,EAAAyR,aAAAC,YAAA,kBAAA1R,EAAA,GAGAA,CACA,ECZAqI,oBAAAsJ,EAAA,UAAAlM,CAAA,EAAyC,OAAA4C,oBAAAkJ,EAAA,GAAAC,eAAA,CAAA/L,EAAA,ECAzC4C,oBAAApE,CAAA,qBCIAhE,EAAA,CACA,MACA,EAiBAoI,oBAAAnG,CAAA,CAAAW,CAAA,UAAA+N,CAAA,CAAAC,CAAA,EAEA5Q,CAAA,CAAA2Q,EAAA,EAEAgB,cAAAvJ,oBAAAsJ,EAAA,CAAAtJ,oBAAApE,CAAA,CAAAoE,oBAAAyI,CAAA,CAAAF,IAGA,EAGAzQ,EAAAD,CADAA,EAAA2R,KAAA,iBAAAA,KAAA,sBACA3O,IAAA,CAAAsF,IAAA,CAAAtI,GACAA,EAAAgD,IAAA,CAzBA,SAAAZ,CAAA,EACA,IAAAsM,EAAAtM,CAAA,IACAwP,EAAAxP,CAAA,IACAyP,EAAAzP,CAAA,IACA,QAAA2L,KAAA6D,EACAzJ,oBAAAmI,CAAA,CAAAsB,EAAA7D,IACA5F,CAAAA,oBAAAoG,CAAA,CAAAR,EAAA,CAAA6D,CAAA,CAAA7D,EAAA,EAIA,IADA8D,GAAAA,EAAA1J,qBACAuG,EAAA5N,MAAA,EACAf,CAAA,CAAA2O,EAAAoD,GAAA,MACA7R,EAAAmC,EACA,ECtBAlC,EAAAiI,oBAAAjG,CAAA,CACAiG,oBAAAjG,CAAA,YACA,OAAAuG,QAAAyB,GAAA,8CAAA7H,GAAA,CAAA8F,oBAAAC,CAAA,CAAAD,sBAAAE,IAAA,CAAAnI,EACA,OEFAiI,oBAAAjG,CAAA","sources":["webpack://_N_E/ignored|/home/runner/work/RatOS-configurator/RatOS-configurator/src/node_modules/.pnpm/@tensorflow+tfjs-core@4.19.0_encoding@0.1.13/node_modules/@tensorflow/tfjs-core/dist/platforms|node-fetch","webpack://_N_E/ignored|/home/runner/work/RatOS-configurator/RatOS-configurator/src/node_modules/.pnpm/@tensorflow+tfjs-core@4.19.0_encoding@0.1.13/node_modules/@tensorflow/tfjs-core/dist/platforms|util","webpack://_N_E/./app/analysis/periodogram.ts","webpack://_N_E/./app/analysis/_worker/stream-utils.ts","webpack://_N_E/./helpers/logger.ts","webpack://_N_E/./utils/trpc.ts","webpack://_N_E/./helpers/trpc.ts","webpack://_N_E/./zods/util.tsx","webpack://_N_E/./app/_helpers/logger.ts","webpack://_N_E/./app/analysis/_worker/psd.ts","webpack://_N_E/webpack/bootstrap","webpack://_N_E/webpack/runtime/chunk loaded","webpack://_N_E/webpack/runtime/compat get default export","webpack://_N_E/webpack/runtime/create fake namespace object","webpack://_N_E/webpack/runtime/define property getters","webpack://_N_E/webpack/runtime/ensure chunk","webpack://_N_E/webpack/runtime/get javascript chunk filename","webpack://_N_E/webpack/runtime/get mini-css chunk filename","webpack://_N_E/webpack/runtime/global","webpack://_N_E/webpack/runtime/hasOwnProperty shorthand","webpack://_N_E/webpack/runtime/make namespace object","webpack://_N_E/webpack/runtime/trusted types policy","webpack://_N_E/webpack/runtime/trusted types script url","webpack://_N_E/webpack/runtime/publicPath","webpack://_N_E/webpack/runtime/importScripts chunk loading","webpack://_N_E/webpack/runtime/startup chunk dependencies","webpack://_N_E/webpack/before-startup","webpack://_N_E/webpack/startup","webpack://_N_E/webpack/after-startup","webpack://_N_E/<anon>"],"sourcesContent":["/* (ignored) */","/* (ignored) */","import {\n\tsignal as tfSignal,\n\tTensor1D,\n\tsum,\n\tpow,\n\tdiv,\n\tmean,\n\tsub,\n\ttidy,\n\ttranspose,\n\tmul,\n\treal,\n\ttensor1d,\n} from '@tensorflow/tfjs-core';\nimport '@tensorflow/tfjs-backend-webgl';\nimport { NumberRange } from 'scichart';\nimport { PSD } from '@/zods/analysis';\n\nexport interface TypedArrayPSD extends Omit<PSD, 'estimates' | 'frequencies'> {\n\testimates: Float64Array;\n\tfrequencies: Float64Array;\n}\n\n/**\n * Returns the ceil of the log2 of the absolute value of the passed number\n * @memberof module:bcijs\n * @function\n * @name nextpow2\n * @param {number} num\n * @returns {number} The ceil of the log2 of the absolute value of the passed number\n * @example\n * nextpow2(8); // 3\n * nextpow2(9); // 4\n * nextpow2(16); // 4\n * nextpow2(30); // 5\n * nextpow2(0); // -Infinity\n */\nexport function nextpow2(num: number): number {\n\treturn Math.ceil(Math.log2(Math.abs(num)));\n}\n\nexport const detrendSignal = (signal: Tensor1D) => tidy(() => sub<Tensor1D>(signal, mean(signal, 0, true)));\n\nconst WINDOW_T_SEC = 0.5;\nconst MAX_FREQ = 200;\n\nexport const getFFTSize = (sampleRate: number, windowT: number = WINDOW_T_SEC): number =>\n\t1 << Math.floor(sampleRate * windowT - 1).toString(2).length;\n\n/**\n * Estimates the power spectral density of a real-valued input signal using the periodogram method and a hann window.\n * Output units are based on that of the input signal, of the form X^2/Hz, where X is the units of the input signal.\n *\n * @memberof module:bcijs\n * @function\n * @name periodogram\n * @param {number[]} signal - The signal.\n * @param {number} sampleRate - sample rate in Hz\n * @param {Object} [options]\n * @param {number} [options.fftSize=1 << nextpow2(sample_rate * WINDOW_T_SEC - 1)] - Size of the fft to be used. Should be a power of 2.\n * @returns {Object} Object with keys 'estimates' (the psd estimates) and 'frequencies' (the corresponding frequencies in Hz)\n */\nexport async function powerSpectralDensity(\n\tsignal: Tensor1D,\n\tsampleRate: number,\n\toptions?: { fftSize?: number; _scaling?: string; isDetrended?: boolean },\n): Promise<TypedArrayPSD> {\n\tlet { fftSize, _scaling } = Object.assign(\n\t\t{\n\t\t\tfftSize: getFFTSize(sampleRate, WINDOW_T_SEC),\n\t\t\t_scaling: 'psd',\n\t\t},\n\t\toptions,\n\t);\n\t// Validate _scaling\n\tif (_scaling != 'psd' && _scaling != 'none') {\n\t\tthrow new Error('Unknown scaling');\n\t}\n\n\tlet scaling_factor: number = _scaling === 'none' ? 1 : 2;\n\tconst win = tfSignal.hannWindow(fftSize);\n\tlet windowLossCompensationFactor = (await tidy(() => div(div(1.0, sum(pow(win, 2))), sampleRate)).array()) as number;\n\n\tconst detrended = options?.isDetrended ? signal : detrendSignal(signal);\n\t// await setBackend('webgl');\n\tlet f = tfSignal.stft(detrended, fftSize, Math.floor(fftSize / 2), fftSize, tfSignal.hannWindow);\n\n\tlet x = (await f.array()) as number[][];\n\tf.dispose();\n\tdetrended.dispose();\n\twin.dispose();\n\n\tconst data = x.map((series) => {\n\t\t// Get the power of each FFT bin value\n\t\tlet powers: number[] = [];\n\t\tlet frequencies: number[] = [];\n\t\tlet maxPower = 0;\n\t\tlet minPower = 0;\n\t\tlet skipped = 0;\n\t\tconst fftRatio = sampleRate / fftSize;\n\t\tfor (var i = 0; i < series.length - 1; i += 2) {\n\t\t\tconst frequency = (i === 0 ? 0 : i / 2) * fftRatio;\n\t\t\tif (frequency > MAX_FREQ) {\n\t\t\t\tskipped++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst nextFrequency = ((i + 2) / 2) * fftRatio;\n\t\t\t// apply scaling\n\t\t\t// magnitude is sqrt(real^2 + imag^2), power is magnitude^2\n\t\t\tlet power: number = series[i] ** 2 + series[i + 1] ** 2;\n\t\t\tpower *= windowLossCompensationFactor;\n\t\t\t// Don't scale DC or Nyquist by 2\n\t\t\tif (_scaling == 'psd' && i > 0 && nextFrequency < MAX_FREQ) {\n\t\t\t\tpower *= scaling_factor;\n\t\t\t}\n\t\t\tif (power > maxPower) {\n\t\t\t\tmaxPower = power;\n\t\t\t}\n\t\t\tif (power < minPower) {\n\t\t\t\tminPower = power;\n\t\t\t}\n\t\t\tpowers.push(power);\n\t\t\tfrequencies.push(frequency);\n\t\t}\n\n\t\treturn {\n\t\t\testimates: powers,\n\t\t\tfrequencies: frequencies,\n\t\t\tpowerRange: new NumberRange(minPower, maxPower),\n\t\t};\n\t});\n\tconst avg = welch(data);\n\treturn avg;\n}\n\nexport class WelchError extends Error {\n\tconstructor(msg: string) {\n\t\tsuper(msg);\n\t\tthis.name = 'WelchError';\n\t}\n}\n\n// Keep this async so that we can potentially move it to the GPU\nexport const welch = async (PSDs: PSD[]): Promise<TypedArrayPSD> => {\n\tif (PSDs.length == 0) throw new WelchError('Unable to calculate any PSD estimates');\n\t// if (PSDs.length == 1) {\n\t// \tgetLogger().warn('Not enough data to compute more than one segment, returning single modified periodogram.');\n\t// \treturn PSDs[0];\n\t// }\n\n\t// Compute average PSD\n\tlet num_estimates = PSDs[0].estimates.length;\n\tlet avg = new Float64Array(num_estimates).fill(0);\n\tfor (let p = 0; p < PSDs.length; p++) {\n\t\tfor (let i = 0; i < num_estimates; i++) {\n\t\t\tavg[i] += PSDs[p].estimates[i];\n\t\t}\n\t}\n\tlet maxPower = 0;\n\tlet minPower = 0;\n\tfor (let i = 0; i < num_estimates; i++) {\n\t\tavg[i] = avg[i] / PSDs.length;\n\t\tif (avg[i] > maxPower) {\n\t\t\tmaxPower = avg[i];\n\t\t}\n\t\tif (avg[i] < minPower) {\n\t\t\tminPower = avg[i];\n\t\t}\n\t}\n\n\treturn {\n\t\testimates: avg,\n\t\tfrequencies: Float64Array.from(PSDs[0].frequencies),\n\t\tpowerRange: new NumberRange(minPower, maxPower),\n\t};\n};\n\nexport const sumPSDs = (PSDs: TypedArrayPSD[]): TypedArrayPSD => {\n\tlet num_estimates = PSDs[0].estimates.length;\n\tlet sum = new Float64Array(num_estimates).fill(0);\n\tfor (let p = 0; p < PSDs.length; p++) {\n\t\tfor (let i = 0; i < num_estimates; i++) {\n\t\t\tsum[i] += PSDs[p].estimates[i];\n\t\t}\n\t}\n\tconst { minPower, maxPower } = PSDs.reduce(\n\t\t(acc, psd) => {\n\t\t\tif (psd.powerRange.min < acc.minPower) {\n\t\t\t\tacc.minPower = psd.powerRange.min;\n\t\t\t}\n\t\t\tif (psd.powerRange.max > acc.maxPower) {\n\t\t\t\tacc.maxPower = psd.powerRange.max;\n\t\t\t}\n\t\t\treturn acc;\n\t\t},\n\t\t{ minPower: 0, maxPower: 0 },\n\t);\n\treturn {\n\t\testimates: sum,\n\t\tfrequencies: Float64Array.from(PSDs[0].frequencies),\n\t\tpowerRange: new NumberRange(minPower, maxPower),\n\t};\n};\n","import { scan, pipe, filter, Observable, UnaryFunction } from 'rxjs';\n\nexport const bufferFifo = <T>(bufferSize: number): UnaryFunction<Observable<T>, Observable<T[]>> =>\n\tpipe(\n\t\tscan((acc, input: T) => {\n\t\t\tconst buffer = [...acc, input].slice(-bufferSize);\n\t\t\treturn buffer;\n\t\t}, [] as T[]),\n\t\tfilter((buffer) => buffer.length >= bufferSize),\n\t);\n","import { LoggerOptions } from 'pino';\n\nexport const globalPinoOpts: LoggerOptions = {\n\ttimestamp: true,\n\tlevel: process.env.NODE_ENV === 'development' ? 'debug' : 'info',\n};\n","'use client';\nimport { createTRPCProxyClient, httpBatchLink } from '@trpc/client';\nimport { createTRPCNext } from '@trpc/next';\nimport type { AppRouter } from '@/server/routers/index';\nexport type {\n\tPrinterRouterLike,\n\tDropdownQuery,\n\tDropdownQueryKeys,\n\tDropdownQueryInput,\n\tDropdownQueryOutput,\n} from '@/server/routers/printer';\n\nexport function getBaseUrl() {\n\tif (typeof window !== 'undefined')\n\t\t// browser should use relative path\n\t\treturn '/configure';\n\tif (process.env.RENDER_INTERNAL_HOSTNAME)\n\t\t// reference for render.com\n\t\treturn `http://${process.env.RENDER_INTERNAL_HOSTNAME}:${process.env.PORT}/configure`;\n\t// assume localhost\n\treturn `http://127.0.0.1:${process.env.PORT ?? 3000}/configure`;\n}\nexport const trpc = createTRPCNext<AppRouter>({\n\tconfig() {\n\t\treturn {\n\t\t\tlinks: [\n\t\t\t\thttpBatchLink({\n\t\t\t\t\t/**\n\t\t\t\t\t * @link https://trpc.io/docs/ssr\n\t\t\t\t\t **/\n\t\t\t\t\turl: `${getBaseUrl()}/api/trpc`,\n\t\t\t\t\tmaxURLLength: 2083, // a suitable size\n\t\t\t\t}),\n\t\t\t],\n\t\t};\n\t},\n\toverrides: {\n\t\tuseMutation: {\n\t\t\t/**\n\t\t\t * This function is called whenever a `.useMutation` succeeds\n\t\t\t **/\n\t\t\tasync onSuccess(opts) {\n\t\t\t\t/**\n\t\t\t\t * @note that order here matters:\n\t\t\t\t * The order here allows route changes in `onSuccess` without\n\t\t\t\t * having a flash of content change whilst redirecting.\n\t\t\t\t **/\n\t\t\t\t// Calls the `onSuccess` defined in the `useQuery()`-options:\n\t\t\t\tawait opts.originalFn();\n\t\t\t\t// Invalidate all queries in the react-query cache:\n\t\t\t\tawait opts.queryClient.invalidateQueries();\n\t\t\t},\n\t\t},\n\t},\n\t/**\n\t * @link https://trpc.io/docs/ssr\n\t **/\n\tssr: false,\n});\nexport const proxyClient = createTRPCProxyClient<AppRouter>({\n\tlinks: [\n\t\thttpBatchLink({\n\t\t\t/**\n\t\t\t * @link https://trpc.io/docs/ssr\n\t\t\t **/\n\t\t\turl: `${getBaseUrl()}/api/trpc`,\n\t\t\tmaxURLLength: 2083, // a suitable size\n\t\t}),\n\t],\n});\n","import { proxyClient, trpc } from '@/utils/trpc';\nexport { trpc, proxyClient as trpcClient };\n","import { z } from 'zod';\n\nexport const PinoLogLevel = z.enum(['trace', 'debug', 'info', 'warn', 'error', 'fatal']);\n\nexport const PinoLogEvent = z.object({\n\tts: z.number(),\n\tmessages: z.array(z.any()),\n\tbindings: z.array(z.record(z.string(), z.any())),\n\tlevel: z.object({\n\t\tlabel: PinoLogLevel,\n\t\tvalue: z.number(),\n\t}),\n});\n","import pino from 'pino';\nimport { globalPinoOpts } from '@/helpers/logger';\nimport { trpcClient } from '@/helpers/trpc';\nimport { PinoLogEvent } from '@/zods/util';\nimport { prettyFactory, write } from 'pino-pretty-browser';\n\nconst send = async function (level: pino.Level, logEvent: pino.LogEvent) {\n\ttrpcClient.clientLog.mutate({ level, logEvent: PinoLogEvent.parse(logEvent) });\n};\n\nlet logger: pino.Logger | null = null;\nexport const getLogger = () => {\n\tif (logger != null) {\n\t\treturn logger;\n\t}\n\tlogger = pino({\n\t\t...globalPinoOpts,\n\t\tbrowser: {\n\t\t\ttransmit: {\n\t\t\t\tsend,\n\t\t\t},\n\t\t},\n\t});\n\treturn logger;\n};\n","import {\n\tObservable,\n\tswitchMap,\n\tswitchScan,\n\tscan,\n\tthrottle,\n\tSubject,\n\tmap,\n\tfrom,\n\tconcatMap,\n\tdistinctUntilChanged,\n\tfilter,\n\tmergeMap,\n\tof,\n\tshareReplay,\n\tEMPTY,\n\tmerge,\n\tasyncScheduler,\n\tscheduled,\n\tfirstValueFrom,\n\ttap,\n\tmergeAll,\n} from 'rxjs';\nimport { AccelSampleMs } from '@/app/analysis/_worker/processing';\nimport { TypedArrayPSD, WelchError, powerSpectralDensity, sumPSDs } from '@/app/analysis/periodogram';\nimport { Rank, Tensor2D, ready, reshape, setBackend, split, tensor2d, tidy } from '@tensorflow/tfjs-core';\nimport BigNumber from 'bignumber.js';\nimport { DoWork, runWorker } from 'observable-webworker';\nimport { bufferFifo } from '@/app/analysis/_worker/stream-utils';\nimport { getLogger } from '@/app/_helpers/logger';\n\nexport type PSDResult = {\n\tx: TypedArrayPSD;\n\ty: TypedArrayPSD;\n\tz: TypedArrayPSD;\n\ttotal: TypedArrayPSD;\n\t// source?: Float64Array[];\n};\n\nexport function isWebGPUSupported(): boolean {\n\treturn !!(typeof globalThis !== 'undefined' && globalThis.navigator && globalThis.navigator.gpu);\n}\nlet loaded = false;\nexport async function loadTFJS() {\n\tif (loaded) {\n\t\treturn true;\n\t}\n\tif (!isWebGPUSupported()) {\n\t\tgetLogger().info('WebGPU not available, falling back to WebGL');\n\t\tawait import('@tensorflow/tfjs-backend-webgl');\n\t\tawait setBackend('webgl');\n\t} else {\n\t\ttry {\n\t\t\tgetLogger().info('Loading webgpu backend');\n\t\t\tawait import('@tensorflow/tfjs-backend-webgpu');\n\t\t\tawait setBackend('webgpu');\n\t\t\tgetLogger().info('WebGPU backend loaded');\n\t\t} catch (e) {\n\t\t\tgetLogger().error(e, 'Failed to load webgpu backend, falling back to webgl');\n\t\t\tawait import('@tensorflow/tfjs-backend-webgl');\n\t\t\tawait setBackend('webgl');\n\t\t}\n\t}\n\tawait ready();\n\tloaded = true;\n}\n\nconst runPSD = async (samples: AccelSampleMs[], includeSource: boolean = false): Promise<PSDResult | null> => {\n\tconst sampleRate = new BigNumber(samples.length)\n\t\t.div(new BigNumber(samples[samples.length - 1][0]).minus(samples[0][0]).shiftedBy(-3))\n\t\t.decimalPlaces(0, BigNumber.ROUND_FLOOR)\n\t\t.toNumber();\n\tconst tensors = tidy(() => {\n\t\tconst signal = tensor2d(samples.map((s) => [s[1], s[2], s[3]]));\n\t\tconst [x2d, y2d, z2d] = split<Tensor2D>(signal, 3, 1);\n\t\tconst x = reshape<Rank.R1>(x2d, [x2d.shape[0]]);\n\t\tconst y = reshape<Rank.R1>(y2d, [y2d.shape[0]]);\n\t\tconst z = reshape<Rank.R1>(z2d, [z2d.shape[0]]);\n\t\treturn { x, y, z };\n\t});\n\ttry {\n\t\tconst [xPsd, yPsd, zPsd] = await Promise.all([\n\t\t\tpowerSpectralDensity(tensors.x, sampleRate, { isDetrended: true }),\n\t\t\tpowerSpectralDensity(tensors.y, sampleRate, { isDetrended: true }),\n\t\t\tpowerSpectralDensity(tensors.z, sampleRate, { isDetrended: true }),\n\t\t]);\n\t\tObject.values(tensors).forEach((t) => t.dispose());\n\t\treturn {\n\t\t\tx: xPsd,\n\t\t\ty: yPsd,\n\t\t\tz: zPsd,\n\t\t\ttotal: sumPSDs([xPsd, yPsd, zPsd]),\n\t\t\t// TODO: save source for later analysis.\n\t\t\t// source: includeSource ? samples.map((s) => new Float64Array([s[0].toNumber(), s[1], s[2], s[3]])) : undefined,\n\t\t};\n\t} catch (e) {\n\t\tif (e instanceof WelchError) {\n\t\t\treturn null;\n\t\t}\n\t\tthrow e;\n\t}\n};\n\nexport type AccumulateAndCallback = false | ((psd: Awaited<ReturnType<typeof runPSD>>) => void);\n\nconst createPSDProcessor = async (\n\tsignal$: Observable<AccelSampleMs>,\n\tspecSampleRate$: Observable<number>,\n\taccumulation$: Observable<AccumulateAndCallback>,\n) => {\n\tconst psdProcess = new Subject();\n\tconst psdProcess$ = psdProcess.asObservable().pipe(shareReplay({ bufferSize: 1, refCount: false }));\n\tpsdProcess$.subscribe();\n\tlet first = true;\n\tif (typeof window !== 'undefined') {\n\t\tawait loadTFJS();\n\t}\n\treturn accumulation$.pipe(\n\t\tdistinctUntilChanged(),\n\t\tswitchScan(\n\t\t\t(acc, accumulate) => {\n\t\t\t\tif (accumulate) {\n\t\t\t\t\treturn signal$.pipe(\n\t\t\t\t\t\tscan((sampleAcc, sample) => {\n\t\t\t\t\t\t\tsampleAcc.push(sample);\n\t\t\t\t\t\t\treturn sampleAcc;\n\t\t\t\t\t\t}, [] as AccelSampleMs[]),\n\t\t\t\t\t\tfilter((samples) => samples.length > 3200),\n\t\t\t\t\t\tmap((samples) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tsamples,\n\t\t\t\t\t\t\t\tonAccumulationComplete: accumulate,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (!accumulate && acc.onAccumulationComplete) {\n\t\t\t\t\tconst cb = acc.onAccumulationComplete;\n\t\t\t\t\trunPSD(acc.samples, true).then((psd) => {\n\t\t\t\t\t\tcb(psd);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t// Don't accumulate\n\t\t\t\treturn specSampleRate$.pipe(\n\t\t\t\t\tswitchMap((sampleRate) => {\n\t\t\t\t\t\treturn signal$.pipe(bufferFifo(sampleRate)); // Returns the last count(sampleRate) samples each time there's a new sample.\n\t\t\t\t\t}),\n\t\t\t\t\tmap((samples) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tsamples,\n\t\t\t\t\t\t\tonAccumulationComplete: false,\n\t\t\t\t\t\t};\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t},\n\t\t\t{ samples: [] as AccelSampleMs[], onAccumulationComplete: false as AccumulateAndCallback },\n\t\t),\n\t\tthrottle(() => psdProcess$, { leading: first, trailing: true }),\n\t\tconcatMap(({ samples, onAccumulationComplete }) => {\n\t\t\tif (first) {\n\t\t\t\tfirst = false;\n\t\t\t}\n\t\t\treturn scheduled(\n\t\t\t\tfrom(\n\t\t\t\t\trunPSD(samples).then((psd) => {\n\t\t\t\t\t\tif (psd == null) {\n\t\t\t\t\t\t\tpsdProcess.next({});\n\t\t\t\t\t\t\treturn EMPTY;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpsdProcess.next({}); // Allow the next batch of samples through.\n\t\t\t\t\t\treturn of(psd);\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t\tasyncScheduler,\n\t\t\t).pipe(mergeAll());\n\t\t}),\n\t);\n};\n\nexport type PSDWorkerInput =\n\t| {\n\t\t\tcommand: 'sampleInput';\n\t\t\tpayload: AccelSampleMs;\n\t  }\n\t| {\n\t\t\tcommand: 'specSampleRateInput';\n\t\t\tpayload: number;\n\t  }\n\t| {\n\t\t\tcommand: 'accumulate';\n\t\t\tpayload: boolean;\n\t  };\nexport type PSDWorkerOutput =\n\t| {\n\t\t\ttype: 'accumulation_finished';\n\t\t\tpsd: PSDResult;\n\t  }\n\t| {\n\t\t\ttype: 'accumulation_started';\n\t  }\n\t| {\n\t\t\ttype: 'psd';\n\t\t\tpsd: PSDResult;\n\t  };\nexport class PSDWorker implements DoWork<PSDWorkerInput, PSDWorkerOutput> {\n\tprivate isAccumulating = false;\n\tprivate processor: ReturnType<typeof createPSDProcessor> | null = null;\n\tprivate signalPassThroughSubject = new Subject<AccelSampleMs>();\n\tprivate signalPassThrough$: Observable<AccelSampleMs> = this.signalPassThroughSubject.asObservable();\n\tprivate sampleRatePassThroughSubject = new Subject<number>();\n\tprivate sampleRatePassThrough$: Observable<number> = this.sampleRatePassThroughSubject\n\t\t.asObservable()\n\t\t.pipe(shareReplay({ bufferSize: 1, refCount: false }));\n\tprivate accumulationSubject = new Subject<AccumulateAndCallback>();\n\tprivate accumulation$ = this.accumulationSubject.asObservable().pipe(shareReplay({ bufferSize: 1, refCount: false }));\n\tpublic constructor() {\n\t\tthis.signalPassThroughSubject = new Subject<AccelSampleMs>();\n\t\tthis.signalPassThrough$ = this.signalPassThroughSubject.asObservable();\n\t\tthis.sampleRatePassThroughSubject = new Subject<number>();\n\t\tthis.sampleRatePassThrough$ = this.sampleRatePassThroughSubject\n\t\t\t.asObservable()\n\t\t\t.pipe(shareReplay({ bufferSize: 1, refCount: false }));\n\t\tthis.sampleRatePassThrough$.subscribe();\n\t\tthis.accumulationSubject = new Subject<AccumulateAndCallback>();\n\t\tthis.accumulation$ = this.accumulationSubject.asObservable().pipe(shareReplay({ bufferSize: 1, refCount: false }));\n\t}\n\tpublic work(input$: Observable<PSDWorkerInput>) {\n\t\treturn input$.pipe(\n\t\t\tmergeMap((input): Observable<PSDWorkerOutput> => {\n\t\t\t\tswitch (input.command) {\n\t\t\t\t\tcase 'accumulate': {\n\t\t\t\t\t\tif (!this.isAccumulating && input.payload === true) {\n\t\t\t\t\t\t\tthis.isAccumulating = true;\n\t\t\t\t\t\t\treturn merge(\n\t\t\t\t\t\t\t\tof({\n\t\t\t\t\t\t\t\t\ttype: `accumulation_started` as const,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tscheduled(\n\t\t\t\t\t\t\t\t\tfrom(\n\t\t\t\t\t\t\t\t\t\tnew Promise<Observable<PSDResult>>((resolve, reject) => {\n\t\t\t\t\t\t\t\t\t\t\tthis.accumulationSubject.next((val) => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (val == null) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tresolve(EMPTY);\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tresolve(of(val));\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t).pipe(\n\t\t\t\t\t\t\t\t\t\tmergeAll(),\n\t\t\t\t\t\t\t\t\t\tmap((result) => {\n\t\t\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: `accumulation_finished` as const,\n\t\t\t\t\t\t\t\t\t\t\t\tpsd: result,\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tasyncScheduler,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.isAccumulating = false;\n\t\t\t\t\t\t\tthis.accumulationSubject.next(false);\n\t\t\t\t\t\t\t// psdProcess.next({}); // this may still be necessary\n\t\t\t\t\t\t\treturn EMPTY;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcase 'sampleInput': {\n\t\t\t\t\t\tthis.signalPassThroughSubject.next(input.payload);\n\t\t\t\t\t\tif (this.processor == null) {\n\t\t\t\t\t\t\tthis.processor = createPSDProcessor(\n\t\t\t\t\t\t\t\tthis.signalPassThrough$,\n\t\t\t\t\t\t\t\tthis.sampleRatePassThrough$,\n\t\t\t\t\t\t\t\tthis.accumulation$,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst stream = from(this.processor).pipe(\n\t\t\t\t\t\t\t\tmergeMap((proc) => {\n\t\t\t\t\t\t\t\t\tconst res = proc.pipe(\n\t\t\t\t\t\t\t\t\t\tmap(\n\t\t\t\t\t\t\t\t\t\t\t(psd) =>\n\t\t\t\t\t\t\t\t\t\t\t\t({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'psd',\n\t\t\t\t\t\t\t\t\t\t\t\t\tpsd,\n\t\t\t\t\t\t\t\t\t\t\t\t}) as {\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'psd';\n\t\t\t\t\t\t\t\t\t\t\t\t\tpsd: PSDResult;\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\tshareReplay({ bufferSize: 1, refCount: false }),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\treturn res;\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tfirstValueFrom(from(this.processor)).then(() => {\n\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\tthis.accumulationSubject.next(false);\n\t\t\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn stream;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn EMPTY;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'specSampleRateInput': {\n\t\t\t\t\t\tif (!this.isAccumulating) {\n\t\t\t\t\t\t\tthis.accumulationSubject.next(false);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.sampleRatePassThroughSubject.next(input.payload);\n\t\t\t\t\t\treturn EMPTY;\n\t\t\t\t\t}\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\treturn EMPTY;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\tpublic selectTransferables(output: PSDWorkerOutput): Transferable[] {\n\t\tswitch (output.type) {\n\t\t\tcase 'psd': {\n\t\t\t\treturn [\n\t\t\t\t\toutput.psd.x.estimates.buffer,\n\t\t\t\t\toutput.psd.x.frequencies.buffer,\n\t\t\t\t\toutput.psd.y.estimates.buffer,\n\t\t\t\t\toutput.psd.y.frequencies.buffer,\n\t\t\t\t\toutput.psd.z.estimates.buffer,\n\t\t\t\t\toutput.psd.z.frequencies.buffer,\n\t\t\t\t\toutput.psd.total.estimates.buffer,\n\t\t\t\t\toutput.psd.total.frequencies.buffer,\n\t\t\t\t];\n\t\t\t}\n\t\t\tcase 'accumulation_finished': {\n\t\t\t\treturn [\n\t\t\t\t\toutput.psd.x.estimates.buffer,\n\t\t\t\t\toutput.psd.x.frequencies.buffer,\n\t\t\t\t\toutput.psd.y.estimates.buffer,\n\t\t\t\t\toutput.psd.y.frequencies.buffer,\n\t\t\t\t\toutput.psd.z.estimates.buffer,\n\t\t\t\t\toutput.psd.z.frequencies.buffer,\n\t\t\t\t\toutput.psd.total.estimates.buffer,\n\t\t\t\t\toutput.psd.total.frequencies.buffer,\n\t\t\t\t];\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\t}\n}\n\nrunWorker(PSDWorker);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [364,6986,6639,5744,9300,966,1880,8833,5233], function() { return __webpack_require__(60840); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? function(obj) { return Object.getPrototypeOf(obj); } : function(obj) { return obj.__proto__; };\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach(function(key) { def[key] = function() { return value[key]; }; });\n\t}\n\tdef['default'] = function() { return value; };\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames not based on template\n\tif (chunkId === 3692) return \"static/chunks/3692.ffafe43b788f421f.js\";\n\tif (chunkId === 7754) return \"static/chunks/7754.a1decb8ef56ba7aa.js\";\n\tif (chunkId === 5744) return \"static/chunks/3c0d6de1.ff9795f876c0ff96.js\";\n\tif (chunkId === 9300) return \"static/chunks/de4cc4ef.0767e38f5ce3ecce.js\";\n\tif (chunkId === 5233) return \"static/chunks/5233.93747fa32306c227.js\";\n\t// return url for filenames based on template\n\treturn \"static/chunks/\" + ({\"364\":\"3e8a0735\",\"6639\":\"a926f453\",\"6986\":\"0efacefc\",\"9321\":\"fa86fe2e\"}[chunkId] || chunkId) + \"-\" + {\"364\":\"ff241942f5aa2446\",\"966\":\"bbd3d7023d7429a5\",\"1880\":\"e37041295ac7e434\",\"6639\":\"b3170b112785abbc\",\"6986\":\"15aa0f67458d661e\",\"8833\":\"3bb230dff7eee463\",\"9321\":\"e962572a02b89204\"}[chunkId] + \".js\";\n};","// This function allow to reference all chunks\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var policy;\n__webpack_require__.tt = function() {\n\t// Create Trusted Type policy if Trusted Types are available and the policy doesn't exist yet.\n\tif (policy === undefined) {\n\t\tpolicy = {\n\t\t\tcreateScriptURL: function(url) { return url; }\n\t\t};\n\t\tif (typeof trustedTypes !== \"undefined\" && trustedTypes.createPolicy) {\n\t\t\tpolicy = trustedTypes.createPolicy(\"nextjs#bundler\", policy);\n\t\t}\n\t}\n\treturn policy;\n};","__webpack_require__.tu = function(url) { return __webpack_require__.tt().createScriptURL(url); };","__webpack_require__.p = \"/configure/_next/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t5330: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.tu(__webpack_require__.p + __webpack_require__.u(chunkId)));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn Promise.all([364,6986,6639,5744,9300,966,1880,8833,5233].map(__webpack_require__.e, __webpack_require__)).then(next);\n};",null,"// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","leafPrototypes","getProto","policy","installedChunks","chunkLoadingGlobal","parentChunkLoadingFunction","next","detrendSignal","tidy","sub","signal","mean","getFFTSize","sampleRate","windowT","Math","floor","toString","length","powerSpectralDensity","options","fftSize","_scaling","Object","assign","scaling_factor","win","tfSignal","hannWindow","windowLossCompensationFactor","div","sum","pow","array","detrended","isDetrended","f","stft","x","dispose","data","map","powers","frequencies","maxPower","minPower","fftRatio","i","series","frequency","nextFrequency","power","push","estimates","powerRange","NumberRange","avg","welch","WelchError","Error","constructor","msg","name","PSDs","num_estimates","Float64Array","fill","p","from","sumPSDs","reduce","acc","psd","min","max","bufferFifo","pipe","scan","input","buffer","slice","bufferSize","filter","globalPinoOpts","timestamp","level","getBaseUrl","createTRPCNext","config","links","httpBatchLink","url","concat","maxURLLength","overrides","useMutation","onSuccess","opts","originalFn","queryClient","invalidateQueries","ssr","proxyClient","createTRPCProxyClient","PinoLogLevel","z","enum","PinoLogEvent","object","ts","number","messages","any","bindings","record","string","label","value","send","logEvent","trpcClient","clientLog","mutate","parse","logger","getLogger","pino","browser","transmit","loaded","loadTFJS","globalThis","navigator","gpu","info","__webpack_require__","e","then","bind","setBackend","error","Promise","resolve","ready","runPSD","samples","includeSource","BigNumber","minus","shiftedBy","decimalPlaces","ROUND_FLOOR","toNumber","tensors","tensor2d","s","x2d","y2d","z2d","split","reshape","shape","y","xPsd","yPsd","zPsd","all","values","forEach","t","total","createPSDProcessor","signal$","specSampleRate$","accumulation$","psdProcess","Subject","psdProcess$","asObservable","shareReplay","refCount","subscribe","first","distinctUntilChanged","switchScan","accumulate","sampleAcc","sample","onAccumulationComplete","cb","switchMap","throttle","leading","trailing","concatMap","param","scheduled","EMPTY","of","asyncScheduler","mergeAll","runWorker","work","input$","mergeMap","command","isAccumulating","payload","merge","type","reject","accumulationSubject","val","result","signalPassThroughSubject","processor","signalPassThrough$","sampleRatePassThrough$","stream","res","proc","firstValueFrom","setTimeout","sampleRatePassThroughSubject","selectTransferables","output","__webpack_module_cache__","moduleId","cachedModule","undefined","exports","module","threw","__webpack_modules__","call","m","__webpack_exports__","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","keys","every","key","splice","r","n","getter","__esModule","d","a","getPrototypeOf","obj","__proto__","mode","ns","create","def","current","indexOf","getOwnPropertyNames","definition","o","defineProperty","enumerable","get","chunkId","promises","u","miniCssF","g","window","prop","prototype","hasOwnProperty","Symbol","toStringTag","tt","createScriptURL","trustedTypes","createPolicy","tu","importScripts","self","moreModules","runtime","pop"],"sourceRoot":""}