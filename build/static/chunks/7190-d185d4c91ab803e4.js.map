{"version":3,"file":"static/chunks/7190-d185d4c91ab803e4.js","mappings":"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","sources":["webpack://_N_E/./node_modules/.pnpm/clsx@1.2.1/node_modules/clsx/dist/clsx.m.js","webpack://_N_E/./node_modules/.pnpm/use-callback-ref@1.3.1_@types+react@18.2.21_react@18.2.0/node_modules/use-callback-ref/dist/es2015/useRef.js","webpack://_N_E/./node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/extends.js","webpack://_N_E/./node_modules/.pnpm/@headlessui+react@1.7.8_react-dom@18.2.0_react@18.2.0/node_modules/@headlessui/react/dist/components/keyboard.js","webpack://_N_E/./node_modules/.pnpm/@headlessui+react@1.7.8_react-dom@18.2.0_react@18.2.0/node_modules/@headlessui/react/dist/hooks/use-disposables.js","webpack://_N_E/./node_modules/.pnpm/@headlessui+react@1.7.8_react-dom@18.2.0_react@18.2.0/node_modules/@headlessui/react/dist/hooks/use-event.js","webpack://_N_E/./node_modules/.pnpm/@headlessui+react@1.7.8_react-dom@18.2.0_react@18.2.0/node_modules/@headlessui/react/dist/hooks/use-id.js","webpack://_N_E/./node_modules/.pnpm/@headlessui+react@1.7.8_react-dom@18.2.0_react@18.2.0/node_modules/@headlessui/react/dist/hooks/use-iso-morphic-effect.js","webpack://_N_E/./node_modules/.pnpm/@headlessui+react@1.7.8_react-dom@18.2.0_react@18.2.0/node_modules/@headlessui/react/dist/hooks/use-latest-value.js","webpack://_N_E/./node_modules/.pnpm/@headlessui+react@1.7.8_react-dom@18.2.0_react@18.2.0/node_modules/@headlessui/react/dist/hooks/use-server-handoff-complete.js","webpack://_N_E/./node_modules/.pnpm/@headlessui+react@1.7.8_react-dom@18.2.0_react@18.2.0/node_modules/@headlessui/react/dist/hooks/use-sync-refs.js","webpack://_N_E/./node_modules/.pnpm/@headlessui+react@1.7.8_react-dom@18.2.0_react@18.2.0/node_modules/@headlessui/react/dist/utils/bugs.js","webpack://_N_E/./node_modules/.pnpm/@headlessui+react@1.7.8_react-dom@18.2.0_react@18.2.0/node_modules/@headlessui/react/dist/utils/class-names.js","webpack://_N_E/./node_modules/.pnpm/@headlessui+react@1.7.8_react-dom@18.2.0_react@18.2.0/node_modules/@headlessui/react/dist/utils/disposables.js","webpack://_N_E/./node_modules/.pnpm/@headlessui+react@1.7.8_react-dom@18.2.0_react@18.2.0/node_modules/@headlessui/react/dist/utils/env.js","webpack://_N_E/./node_modules/.pnpm/@headlessui+react@1.7.8_react-dom@18.2.0_react@18.2.0/node_modules/@headlessui/react/dist/utils/match.js","webpack://_N_E/./node_modules/.pnpm/@headlessui+react@1.7.8_react-dom@18.2.0_react@18.2.0/node_modules/@headlessui/react/dist/utils/micro-task.js","webpack://_N_E/./node_modules/.pnpm/@headlessui+react@1.7.8_react-dom@18.2.0_react@18.2.0/node_modules/@headlessui/react/dist/utils/render.js","webpack://_N_E/./node_modules/.pnpm/@radix-ui+react-compose-refs@1.0.1_@types+react@18.2.21_react@18.2.0/node_modules/@radix-ui/react-compose-refs/dist/index.mjs","webpack://_N_E/./node_modules/.pnpm/@radix-ui+react-primitive@1.0.3_@types+react@18.2.21_react-dom@18.2.0_react@18.2.0/node_modules/@radix-ui/react-primitive/dist/index.mjs","webpack://_N_E/./node_modules/.pnpm/@radix-ui+react-slot@1.0.2_@types+react@18.2.21_react@18.2.0/node_modules/@radix-ui/react-slot/dist/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/PresenceContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/frameloop/render-step.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/frameloop/batcher.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/frameloop/frame.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/frameloop/sync-time.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/MotionContext/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/LazyContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/frameloop/microtask.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/is-ref-object.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/variant-props.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/MotionContext/create.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/definitions.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/load-features.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/symbol.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/transform.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/use-props.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/path.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/use-props.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/use-render.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/render.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/render.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/resolve-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/config-motion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/config-motion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/events/add-dom-event.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/events/event-info.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/events/add-pointer-event.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/Feature.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/hover.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/focus.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/press.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/gestures.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/shallow-compare.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/time-conversion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/ease.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/circ.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/back.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/anticipate.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/utils/map.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/offsets/fill.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/offsets/default.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/offsets/time.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/inertia.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/js/driver-frameloop.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/js/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/memo.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/instant.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/complex/filter.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/is-none.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/transitions.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/use-will-change/is.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/setters.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/animation-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/animation/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/animations.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/distance.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/geometry/models.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/utils/measure.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/get-context-window.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/drag/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/pan/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/node/state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/shared/stack.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/styles/transform.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/delay.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/debug/record.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/drag.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/motion-values.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/store.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/VisualElement.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/layout.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/motion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/GlobalConfig.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/array.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/clamp.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/errors.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/interpolate.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/is-browser.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/mix/color.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/mix/complex.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/mix/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/mix/number.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/noop.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/pipe.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/progress.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/subscription-manager.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/use-constant.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/color/hex.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/color/hsla.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/color/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/color/rgba.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/color/utils.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/complex/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/numbers/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/numbers/units.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/utils.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.0.8_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs","webpack://_N_E/<anon>"],"sourcesContent":["function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","import { useState } from 'react';\n/**\n * creates a MutableRef with ref change callback\n * @param initialValue - initial ref value\n * @param {Function} callback - a callback to run when value changes\n *\n * @example\n * const ref = useCallbackRef(0, (newValue, oldValue) => console.log(oldValue, '->', newValue);\n * ref.current = 1;\n * // prints 0 -> 1\n *\n * @see https://reactjs.org/docs/hooks-reference.html#useref\n * @see https://github.com/theKashey/use-callback-ref#usecallbackref---to-replace-reactuseref\n * @returns {MutableRefObject}\n */\nexport function useCallbackRef(initialValue, callback) {\n    var ref = useState(function () { return ({\n        // value\n        value: initialValue,\n        // last callback\n        callback: callback,\n        // \"memoized\" public interface\n        facade: {\n            get current() {\n                return ref.value;\n            },\n            set current(value) {\n                var last = ref.value;\n                if (last !== value) {\n                    ref.value = value;\n                    ref.callback(value, last);\n                }\n            },\n        },\n    }); })[0];\n    // update callback\n    ref.callback = callback;\n    return ref.facade;\n}\n","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","var o=(r=>(r.Space=\" \",r.Enter=\"Enter\",r.Escape=\"Escape\",r.Backspace=\"Backspace\",r.Delete=\"Delete\",r.ArrowLeft=\"ArrowLeft\",r.ArrowUp=\"ArrowUp\",r.ArrowRight=\"ArrowRight\",r.ArrowDown=\"ArrowDown\",r.Home=\"Home\",r.End=\"End\",r.PageUp=\"PageUp\",r.PageDown=\"PageDown\",r.Tab=\"Tab\",r))(o||{});export{o as Keys};\n","import{useState as s,useEffect as o}from\"react\";import{disposables as t}from'../utils/disposables.js';function p(){let[e]=s(t);return o(()=>()=>e.dispose(),[e]),e}export{p as useDisposables};\n","import a from\"react\";import{useLatestValue as n}from'./use-latest-value.js';let o=function(t){let e=n(t);return a.useCallback((...r)=>e.current(...r),[e])};export{o as useEvent};\n","var o;import t from\"react\";import{useIsoMorphicEffect as d}from'./use-iso-morphic-effect.js';import{useServerHandoffComplete as f}from'./use-server-handoff-complete.js';import{env as r}from'../utils/env.js';let I=(o=t.useId)!=null?o:function(){let n=f(),[e,u]=t.useState(n?()=>r.nextId():null);return d(()=>{e===null&&u(r.nextId())},[e]),e!=null?\"\"+e:void 0};export{I as useId};\n","import{useLayoutEffect as t,useEffect as c}from\"react\";import{env as i}from'../utils/env.js';let l=(e,f)=>{i.isServer?c(e,f):t(e,f)};export{l as useIsoMorphicEffect};\n","import{useRef as t}from\"react\";import{useIsoMorphicEffect as o}from'./use-iso-morphic-effect.js';function s(e){let r=t(e);return o(()=>{r.current=e},[e]),r}export{s as useLatestValue};\n","import{useState as r,useEffect as o}from\"react\";import{env as t}from'../utils/env.js';function l(){let[e,f]=r(t.isHandoffComplete);return e&&t.isHandoffComplete===!1&&f(!1),o(()=>{e!==!0&&f(!0)},[e]),o(()=>t.handoff(),[]),e}export{l as useServerHandoffComplete};\n","import{useRef as l,useEffect as i}from\"react\";import{useEvent as r}from'./use-event.js';let u=Symbol();function T(t,n=!0){return Object.assign(t,{[u]:n})}function y(...t){let n=l(t);i(()=>{n.current=t},[t]);let c=r(e=>{for(let o of n.current)o!=null&&(typeof o==\"function\"?o(e):o.current=e)});return t.every(e=>e==null||(e==null?void 0:e[u]))?void 0:c}export{T as optionalRef,y as useSyncRefs};\n","function r(n){let e=n.parentElement,l=null;for(;e&&!(e instanceof HTMLFieldSetElement);)e instanceof HTMLLegendElement&&(l=e),e=e.parentElement;let t=(e==null?void 0:e.getAttribute(\"disabled\"))===\"\";return t&&i(l)?!1:t}function i(n){if(!n)return!1;let e=n.previousElementSibling;for(;e!==null;){if(e instanceof HTMLLegendElement)return!1;e=e.previousElementSibling}return!0}export{r as isDisabledReactIssue7711};\n","function e(...n){return n.filter(Boolean).join(\" \")}export{e as classNames};\n","import{microTask as s}from'./micro-task.js';function m(){let n=[],i=[],r={enqueue(e){i.push(e)},addEventListener(e,t,a,o){return e.addEventListener(t,a,o),r.add(()=>e.removeEventListener(t,a,o))},requestAnimationFrame(...e){let t=requestAnimationFrame(...e);return r.add(()=>cancelAnimationFrame(t))},nextFrame(...e){return r.requestAnimationFrame(()=>r.requestAnimationFrame(...e))},setTimeout(...e){let t=setTimeout(...e);return r.add(()=>clearTimeout(t))},microTask(...e){let t={current:!0};return s(()=>{t.current&&e[0]()}),r.add(()=>{t.current=!1})},add(e){return n.push(e),()=>{let t=n.indexOf(e);if(t>=0){let[a]=n.splice(t,1);a()}}},dispose(){for(let e of n.splice(0))e()},async workQueue(){for(let e of i.splice(0))await e()}};return r}export{m as disposables};\n","var i=Object.defineProperty;var d=(t,e,n)=>e in t?i(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n;var r=(t,e,n)=>(d(t,typeof e!=\"symbol\"?e+\"\":e,n),n);class o{constructor(){r(this,\"current\",this.detect());r(this,\"handoffState\",\"pending\");r(this,\"currentId\",0)}set(e){this.current!==e&&(this.handoffState=\"pending\",this.currentId=0,this.current=e)}reset(){this.set(this.detect())}nextId(){return++this.currentId}get isServer(){return this.current===\"server\"}get isClient(){return this.current===\"client\"}detect(){return typeof window==\"undefined\"||typeof document==\"undefined\"?\"server\":\"client\"}handoff(){this.handoffState===\"pending\"&&(this.handoffState=\"complete\")}get isHandoffComplete(){return this.handoffState===\"complete\"}}let s=new o;export{s as env};\n","function u(r,n,...a){if(r in n){let e=n[r];return typeof e==\"function\"?e(...a):e}let t=new Error(`Tried to handle \"${r}\" but there is no handler defined. Only defined handlers are: ${Object.keys(n).map(e=>`\"${e}\"`).join(\", \")}.`);throw Error.captureStackTrace&&Error.captureStackTrace(t,u),t}export{u as match};\n","function t(e){typeof queueMicrotask==\"function\"?queueMicrotask(e):Promise.resolve().then(e).catch(o=>setTimeout(()=>{throw o}))}export{t as microTask};\n","import{Fragment as g,cloneElement as b,createElement as E,forwardRef as x,isValidElement as N}from\"react\";import{classNames as R}from'./class-names.js';import{match as S}from'./match.js';var j=(a=>(a[a.None=0]=\"None\",a[a.RenderStrategy=1]=\"RenderStrategy\",a[a.Static=2]=\"Static\",a))(j||{}),w=(e=>(e[e.Unmount=0]=\"Unmount\",e[e.Hidden=1]=\"Hidden\",e))(w||{});function X({ourProps:r,theirProps:t,slot:e,defaultTag:a,features:s,visible:n=!0,name:l}){let o=h(t,r);if(n)return m(o,e,a,l);let u=s!=null?s:0;if(u&2){let{static:i=!1,...d}=o;if(i)return m(d,e,a,l)}if(u&1){let{unmount:i=!0,...d}=o;return S(i?0:1,{[0](){return null},[1](){return m({...d,hidden:!0,style:{display:\"none\"}},e,a,l)}})}return m(o,e,a,l)}function m(r,t={},e,a){var y;let{as:s=e,children:n,refName:l=\"ref\",...o}=T(r,[\"unmount\",\"static\"]),u=r.ref!==void 0?{[l]:r.ref}:{},i=typeof n==\"function\"?n(t):n;o.className&&typeof o.className==\"function\"&&(o.className=o.className(t));let d={};if(t){let f=!1,c=[];for(let[p,F]of Object.entries(t))typeof F==\"boolean\"&&(f=!0),F===!0&&c.push(p);f&&(d[\"data-headlessui-state\"]=c.join(\" \"))}if(s===g&&Object.keys(P(o)).length>0){if(!N(i)||Array.isArray(i)&&i.length>1)throw new Error(['Passing props on \"Fragment\"!',\"\",`The current component <${a} /> is rendering a \"Fragment\".`,\"However we need to passthrough the following props:\",Object.keys(o).map(p=>`  - ${p}`).join(`\n`),\"\",\"You can apply a few solutions:\",['Add an `as=\"...\"` prop, to ensure that we render an actual element instead of a \"Fragment\".',\"Render a single element as the child so that we can forward the props onto that element.\"].map(p=>`  - ${p}`).join(`\n`)].join(`\n`));let f=R((y=i.props)==null?void 0:y.className,o.className),c=f?{className:f}:{};return b(i,Object.assign({},h(i.props,P(T(o,[\"ref\"]))),d,u,O(i.ref,u.ref),c))}return E(s,Object.assign({},T(o,[\"ref\"]),s!==g&&u,s!==g&&d),i)}function O(...r){return{ref:r.every(t=>t==null)?void 0:t=>{for(let e of r)e!=null&&(typeof e==\"function\"?e(t):e.current=t)}}}function h(...r){var a;if(r.length===0)return{};if(r.length===1)return r[0];let t={},e={};for(let s of r)for(let n in s)n.startsWith(\"on\")&&typeof s[n]==\"function\"?((a=e[n])!=null||(e[n]=[]),e[n].push(s[n])):t[n]=s[n];if(t.disabled||t[\"aria-disabled\"])return Object.assign(t,Object.fromEntries(Object.keys(e).map(s=>[s,void 0])));for(let s in e)Object.assign(t,{[s](n,...l){let o=e[s];for(let u of o){if((n instanceof Event||(n==null?void 0:n.nativeEvent)instanceof Event)&&n.defaultPrevented)return;u(n,...l)}}});return t}function V(r){var t;return Object.assign(x(r),{displayName:(t=r.displayName)!=null?t:r.name})}function P(r){let t=Object.assign({},r);for(let e in t)t[e]===void 0&&delete t[e];return t}function T(r,t=[]){let e=Object.assign({},r);for(let a of t)a in e&&delete e[a];return e}export{j as Features,w as RenderStrategy,P as compact,V as forwardRefWithAs,X as render};\n","import {useCallback as $3vqmr$useCallback} from \"react\";\n\n\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */ function $6ed0406888f73fc4$var$setRef(ref, value) {\n    if (typeof ref === 'function') ref(value);\n    else if (ref !== null && ref !== undefined) ref.current = value;\n}\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */ function $6ed0406888f73fc4$export$43e446d32b3d21af(...refs) {\n    return (node)=>refs.forEach((ref)=>$6ed0406888f73fc4$var$setRef(ref, node)\n        )\n    ;\n}\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */ function $6ed0406888f73fc4$export$c7b2cbe3552a0d05(...refs) {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    return $3vqmr$useCallback($6ed0406888f73fc4$export$43e446d32b3d21af(...refs), refs);\n}\n\n\n\n\nexport {$6ed0406888f73fc4$export$43e446d32b3d21af as composeRefs, $6ed0406888f73fc4$export$c7b2cbe3552a0d05 as useComposedRefs};\n//# sourceMappingURL=index.mjs.map\n","import $4q5Fq$babelruntimehelpersesmextends from \"@babel/runtime/helpers/esm/extends\";\nimport {forwardRef as $4q5Fq$forwardRef, useEffect as $4q5Fq$useEffect, createElement as $4q5Fq$createElement} from \"react\";\nimport {flushSync as $4q5Fq$flushSync} from \"react-dom\";\nimport {Slot as $4q5Fq$Slot} from \"@radix-ui/react-slot\";\n\n\n\n\n\nconst $8927f6f2acc4f386$var$NODES = [\n    'a',\n    'button',\n    'div',\n    'form',\n    'h2',\n    'h3',\n    'img',\n    'input',\n    'label',\n    'li',\n    'nav',\n    'ol',\n    'p',\n    'span',\n    'svg',\n    'ul'\n]; // Temporary while we await merge of this fix:\n// https://github.com/DefinitelyTyped/DefinitelyTyped/pull/55396\n// prettier-ignore\n/* -------------------------------------------------------------------------------------------------\n * Primitive\n * -----------------------------------------------------------------------------------------------*/ const $8927f6f2acc4f386$export$250ffa63cdc0d034 = $8927f6f2acc4f386$var$NODES.reduce((primitive, node)=>{\n    const Node = /*#__PURE__*/ $4q5Fq$forwardRef((props, forwardedRef)=>{\n        const { asChild: asChild , ...primitiveProps } = props;\n        const Comp = asChild ? $4q5Fq$Slot : node;\n        $4q5Fq$useEffect(()=>{\n            window[Symbol.for('radix-ui')] = true;\n        }, []);\n        return /*#__PURE__*/ $4q5Fq$createElement(Comp, $4q5Fq$babelruntimehelpersesmextends({}, primitiveProps, {\n            ref: forwardedRef\n        }));\n    });\n    Node.displayName = `Primitive.${node}`;\n    return {\n        ...primitive,\n        [node]: Node\n    };\n}, {});\n/* -------------------------------------------------------------------------------------------------\n * Utils\n * -----------------------------------------------------------------------------------------------*/ /**\n * Flush custom event dispatch\n * https://github.com/radix-ui/primitives/pull/1378\n *\n * React batches *all* event handlers since version 18, this introduces certain considerations when using custom event types.\n *\n * Internally, React prioritises events in the following order:\n *  - discrete\n *  - continuous\n *  - default\n *\n * https://github.com/facebook/react/blob/a8a4742f1c54493df00da648a3f9d26e3db9c8b5/packages/react-dom/src/events/ReactDOMEventListener.js#L294-L350\n *\n * `discrete` is an  important distinction as updates within these events are applied immediately.\n * React however, is not able to infer the priority of custom event types due to how they are detected internally.\n * Because of this, it's possible for updates from custom events to be unexpectedly batched when\n * dispatched by another `discrete` event.\n *\n * In order to ensure that updates from custom events are applied predictably, we need to manually flush the batch.\n * This utility should be used when dispatching a custom event from within another `discrete` event, this utility\n * is not nessesary when dispatching known event types, or if dispatching a custom type inside a non-discrete event.\n * For example:\n *\n * dispatching a known click 👎\n * target.dispatchEvent(new Event(‘click’))\n *\n * dispatching a custom type within a non-discrete event 👎\n * onScroll={(event) => event.target.dispatchEvent(new CustomEvent(‘customType’))}\n *\n * dispatching a custom type within a `discrete` event 👍\n * onPointerDown={(event) => dispatchDiscreteCustomEvent(event.target, new CustomEvent(‘customType’))}\n *\n * Note: though React classifies `focus`, `focusin` and `focusout` events as `discrete`, it's  not recommended to use\n * this utility with them. This is because it's possible for those handlers to be called implicitly during render\n * e.g. when focus is within a component as it is unmounted, or when managing focus on mount.\n */ function $8927f6f2acc4f386$export$6d1a0317bde7de7f(target, event) {\n    if (target) $4q5Fq$flushSync(()=>target.dispatchEvent(event)\n    );\n}\n/* -----------------------------------------------------------------------------------------------*/ const $8927f6f2acc4f386$export$be92b6f5f03c0fe9 = $8927f6f2acc4f386$export$250ffa63cdc0d034;\n\n\n\n\nexport {$8927f6f2acc4f386$export$250ffa63cdc0d034 as Primitive, $8927f6f2acc4f386$export$be92b6f5f03c0fe9 as Root, $8927f6f2acc4f386$export$6d1a0317bde7de7f as dispatchDiscreteCustomEvent};\n//# sourceMappingURL=index.mjs.map\n","import $9IrjX$babelruntimehelpersesmextends from \"@babel/runtime/helpers/esm/extends\";\nimport {forwardRef as $9IrjX$forwardRef, Children as $9IrjX$Children, isValidElement as $9IrjX$isValidElement, createElement as $9IrjX$createElement, cloneElement as $9IrjX$cloneElement, Fragment as $9IrjX$Fragment} from \"react\";\nimport {composeRefs as $9IrjX$composeRefs} from \"@radix-ui/react-compose-refs\";\n\n\n\n\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/ const $5e63c961fc1ce211$export$8c6ed5c666ac1360 = /*#__PURE__*/ $9IrjX$forwardRef((props, forwardedRef)=>{\n    const { children: children , ...slotProps } = props;\n    const childrenArray = $9IrjX$Children.toArray(children);\n    const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable);\n    if (slottable) {\n        // the new element to render is the one passed as a child of `Slottable`\n        const newElement = slottable.props.children;\n        const newChildren = childrenArray.map((child)=>{\n            if (child === slottable) {\n                // because the new element will be the one rendered, we are only interested\n                // in grabbing its children (`newElement.props.children`)\n                if ($9IrjX$Children.count(newElement) > 1) return $9IrjX$Children.only(null);\n                return /*#__PURE__*/ $9IrjX$isValidElement(newElement) ? newElement.props.children : null;\n            } else return child;\n        });\n        return /*#__PURE__*/ $9IrjX$createElement($5e63c961fc1ce211$var$SlotClone, $9IrjX$babelruntimehelpersesmextends({}, slotProps, {\n            ref: forwardedRef\n        }), /*#__PURE__*/ $9IrjX$isValidElement(newElement) ? /*#__PURE__*/ $9IrjX$cloneElement(newElement, undefined, newChildren) : null);\n    }\n    return /*#__PURE__*/ $9IrjX$createElement($5e63c961fc1ce211$var$SlotClone, $9IrjX$babelruntimehelpersesmextends({}, slotProps, {\n        ref: forwardedRef\n    }), children);\n});\n$5e63c961fc1ce211$export$8c6ed5c666ac1360.displayName = 'Slot';\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/ const $5e63c961fc1ce211$var$SlotClone = /*#__PURE__*/ $9IrjX$forwardRef((props, forwardedRef)=>{\n    const { children: children , ...slotProps } = props;\n    if (/*#__PURE__*/ $9IrjX$isValidElement(children)) return /*#__PURE__*/ $9IrjX$cloneElement(children, {\n        ...$5e63c961fc1ce211$var$mergeProps(slotProps, children.props),\n        ref: forwardedRef ? $9IrjX$composeRefs(forwardedRef, children.ref) : children.ref\n    });\n    return $9IrjX$Children.count(children) > 1 ? $9IrjX$Children.only(null) : null;\n});\n$5e63c961fc1ce211$var$SlotClone.displayName = 'SlotClone';\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/ const $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 = ({ children: children  })=>{\n    return /*#__PURE__*/ $9IrjX$createElement($9IrjX$Fragment, null, children);\n};\n/* ---------------------------------------------------------------------------------------------- */ function $5e63c961fc1ce211$var$isSlottable(child) {\n    return /*#__PURE__*/ $9IrjX$isValidElement(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d45;\n}\nfunction $5e63c961fc1ce211$var$mergeProps(slotProps, childProps) {\n    // all child props should override\n    const overrideProps = {\n        ...childProps\n    };\n    for(const propName in childProps){\n        const slotPropValue = slotProps[propName];\n        const childPropValue = childProps[propName];\n        const isHandler = /^on[A-Z]/.test(propName);\n        if (isHandler) {\n            // if the handler exists on both, we compose them\n            if (slotPropValue && childPropValue) overrideProps[propName] = (...args)=>{\n                childPropValue(...args);\n                slotPropValue(...args);\n            };\n            else if (slotPropValue) overrideProps[propName] = slotPropValue;\n        } else if (propName === 'style') overrideProps[propName] = {\n            ...slotPropValue,\n            ...childPropValue\n        };\n        else if (propName === 'className') overrideProps[propName] = [\n            slotPropValue,\n            childPropValue\n        ].filter(Boolean).join(' ');\n    }\n    return {\n        ...slotProps,\n        ...overrideProps\n    };\n}\nconst $5e63c961fc1ce211$export$be92b6f5f03c0fe9 = $5e63c961fc1ce211$export$8c6ed5c666ac1360;\n\n\n\n\nexport {$5e63c961fc1ce211$export$8c6ed5c666ac1360 as Slot, $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 as Slottable, $5e63c961fc1ce211$export$be92b6f5f03c0fe9 as Root};\n//# sourceMappingURL=index.mjs.map\n","import { createContext } from 'react';\n\nconst LayoutGroupContext = createContext({});\n\nexport { LayoutGroupContext };\n","import { createContext } from 'react';\n\n/**\n * @public\n */\nconst MotionConfigContext = createContext({\n    transformPagePoint: (p) => p,\n    isStatic: false,\n    reducedMotion: \"never\",\n});\n\nexport { MotionConfigContext };\n","import { createContext } from 'react';\n\n/**\n * @public\n */\nconst PresenceContext = createContext(null);\n\nexport { PresenceContext };\n","class Queue {\n    constructor() {\n        this.order = [];\n        this.scheduled = new Set();\n    }\n    add(process) {\n        if (!this.scheduled.has(process)) {\n            this.scheduled.add(process);\n            this.order.push(process);\n            return true;\n        }\n    }\n    remove(process) {\n        const index = this.order.indexOf(process);\n        if (index !== -1) {\n            this.order.splice(index, 1);\n            this.scheduled.delete(process);\n        }\n    }\n    clear() {\n        this.order.length = 0;\n        this.scheduled.clear();\n    }\n}\nfunction createRenderStep(runNextFrame) {\n    /**\n     * We create and reuse two queues, one to queue jobs for the current frame\n     * and one for the next. We reuse to avoid triggering GC after x frames.\n     */\n    let thisFrame = new Queue();\n    let nextFrame = new Queue();\n    let numToRun = 0;\n    /**\n     * Track whether we're currently processing jobs in this step. This way\n     * we can decide whether to schedule new jobs for this frame or next.\n     */\n    let isProcessing = false;\n    let flushNextFrame = false;\n    /**\n     * A set of processes which were marked keepAlive when scheduled.\n     */\n    const toKeepAlive = new WeakSet();\n    const step = {\n        /**\n         * Schedule a process to run on the next frame.\n         */\n        schedule: (callback, keepAlive = false, immediate = false) => {\n            const addToCurrentFrame = immediate && isProcessing;\n            const queue = addToCurrentFrame ? thisFrame : nextFrame;\n            if (keepAlive)\n                toKeepAlive.add(callback);\n            if (queue.add(callback) && addToCurrentFrame && isProcessing) {\n                // If we're adding it to the currently running queue, update its measured size\n                numToRun = thisFrame.order.length;\n            }\n            return callback;\n        },\n        /**\n         * Cancel the provided callback from running on the next frame.\n         */\n        cancel: (callback) => {\n            nextFrame.remove(callback);\n            toKeepAlive.delete(callback);\n        },\n        /**\n         * Execute all schedule callbacks.\n         */\n        process: (frameData) => {\n            /**\n             * If we're already processing we've probably been triggered by a flushSync\n             * inside an existing process. Instead of executing, mark flushNextFrame\n             * as true and ensure we flush the following frame at the end of this one.\n             */\n            if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [thisFrame, nextFrame] = [nextFrame, thisFrame];\n            // Clear the next frame queue\n            nextFrame.clear();\n            // Execute this frame\n            numToRun = thisFrame.order.length;\n            if (numToRun) {\n                for (let i = 0; i < numToRun; i++) {\n                    const callback = thisFrame.order[i];\n                    if (toKeepAlive.has(callback)) {\n                        step.schedule(callback);\n                        runNextFrame();\n                    }\n                    callback(frameData);\n                }\n            }\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        },\n    };\n    return step;\n}\n\nexport { createRenderStep };\n","import { MotionGlobalConfig } from '../utils/GlobalConfig.mjs';\nimport { createRenderStep } from './render-step.mjs';\n\nconst stepsOrder = [\n    \"prepare\",\n    \"read\",\n    \"update\",\n    \"preRender\",\n    \"render\",\n    \"postRender\",\n];\nconst maxElapsed = 40;\nfunction createRenderBatcher(scheduleNextBatch, allowKeepAlive) {\n    let runNextFrame = false;\n    let useDefaultElapsed = true;\n    const state = {\n        delta: 0,\n        timestamp: 0,\n        isProcessing: false,\n    };\n    const steps = stepsOrder.reduce((acc, key) => {\n        acc[key] = createRenderStep(() => (runNextFrame = true));\n        return acc;\n    }, {});\n    const processStep = (stepId) => {\n        steps[stepId].process(state);\n    };\n    const processBatch = () => {\n        const timestamp = MotionGlobalConfig.useManualTiming\n            ? state.timestamp\n            : performance.now();\n        runNextFrame = false;\n        state.delta = useDefaultElapsed\n            ? 1000 / 60\n            : Math.max(Math.min(timestamp - state.timestamp, maxElapsed), 1);\n        state.timestamp = timestamp;\n        state.isProcessing = true;\n        stepsOrder.forEach(processStep);\n        state.isProcessing = false;\n        if (runNextFrame && allowKeepAlive) {\n            useDefaultElapsed = false;\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const wake = () => {\n        runNextFrame = true;\n        useDefaultElapsed = true;\n        if (!state.isProcessing) {\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const schedule = stepsOrder.reduce((acc, key) => {\n        const step = steps[key];\n        acc[key] = (process, keepAlive = false, immediate = false) => {\n            if (!runNextFrame)\n                wake();\n            return step.schedule(process, keepAlive, immediate);\n        };\n        return acc;\n    }, {});\n    const cancel = (process) => stepsOrder.forEach((key) => steps[key].cancel(process));\n    return { schedule, cancel, state, steps };\n}\n\nexport { createRenderBatcher, stepsOrder };\n","import { noop } from '../utils/noop.mjs';\nimport { createRenderBatcher } from './batcher.mjs';\n\nconst { schedule: frame, cancel: cancelFrame, state: frameData, steps, } = createRenderBatcher(typeof requestAnimationFrame !== \"undefined\" ? requestAnimationFrame : noop, true);\n\nexport { cancelFrame, frame, frameData, steps };\n","import { MotionGlobalConfig } from '../utils/GlobalConfig.mjs';\nimport { frameData } from './frame.mjs';\n\nlet now;\nfunction clearTime() {\n    now = undefined;\n}\n/**\n * An eventloop-synchronous alternative to performance.now().\n *\n * Ensures that time measurements remain consistent within a synchronous context.\n * Usually calling performance.now() twice within the same synchronous context\n * will return different values which isn't useful for animations when we're usually\n * trying to sync animations to the same frame.\n */\nconst time = {\n    now: () => {\n        if (now === undefined) {\n            time.set(frameData.isProcessing || MotionGlobalConfig.useManualTiming\n                ? frameData.timestamp\n                : performance.now());\n        }\n        return now;\n    },\n    set: (newTime) => {\n        now = newTime;\n        queueMicrotask(clearTime);\n    },\n};\n\nexport { time };\n","import { createContext } from 'react';\n\nconst MotionContext = createContext({});\n\nexport { MotionContext };\n","import { createContext } from 'react';\n\nconst LazyContext = createContext({ strict: false });\n\nexport { LazyContext };\n","/**\n * Convert camelCase to dash-case properties.\n */\nconst camelToDash = (str) => str.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n\nexport { camelToDash };\n","import { camelToDash } from '../../render/dom/utils/camel-to-dash.mjs';\n\nconst optimizedAppearDataId = \"framerAppearId\";\nconst optimizedAppearDataAttribute = \"data-\" + camelToDash(optimizedAppearDataId);\n\nexport { optimizedAppearDataAttribute, optimizedAppearDataId };\n","import { createRenderBatcher } from './batcher.mjs';\n\nconst { schedule: microtask, cancel: cancelMicrotask } = createRenderBatcher(queueMicrotask, false);\n\nexport { cancelMicrotask, microtask };\n","import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\n\nfunction useVisualElement(Component, visualState, props, createVisualElement) {\n    const { visualElement: parent } = useContext(MotionContext);\n    const lazyContext = useContext(LazyContext);\n    const presenceContext = useContext(PresenceContext);\n    const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = useRef();\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */\n    createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext\n                ? presenceContext.initial === false\n                : false,\n            reducedMotionConfig,\n        });\n    }\n    const visualElement = visualElementRef.current;\n    useInsertionEffect(() => {\n        visualElement && visualElement.update(props, presenceContext);\n    });\n    /**\n     * Cache this value as we want to know whether HandoffAppearAnimations\n     * was present on initial render - it will be deleted after this.\n     */\n    const wantsHandoff = useRef(Boolean(props[optimizedAppearDataAttribute] && !window.HandoffComplete));\n    useIsomorphicLayoutEffect(() => {\n        if (!visualElement)\n            return;\n        microtask.postRender(visualElement.render);\n        /**\n         * Ideally this function would always run in a useEffect.\n         *\n         * However, if we have optimised appear animations to handoff from,\n         * it needs to happen synchronously to ensure there's no flash of\n         * incorrect styles in the event of a hydration error.\n         *\n         * So if we detect a situtation where optimised appear animations\n         * are running, we use useLayoutEffect to trigger animations.\n         */\n        if (wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    useEffect(() => {\n        if (!visualElement)\n            return;\n        visualElement.updateFeatures();\n        if (!wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n        if (wantsHandoff.current) {\n            wantsHandoff.current = false;\n            // This ensures all future calls to animateChanges() will run in useEffect\n            window.HandoffComplete = true;\n        }\n    });\n    return visualElement;\n}\n\nexport { useVisualElement };\n","function isRefObject(ref) {\n    return (ref &&\n        typeof ref === \"object\" &&\n        Object.prototype.hasOwnProperty.call(ref, \"current\"));\n}\n\nexport { isRefObject };\n","import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return useCallback((instance) => {\n        instance && visualState.mount && visualState.mount(instance);\n        if (visualElement) {\n            instance\n                ? visualElement.mount(instance)\n                : visualElement.unmount();\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\nexport { useMotionRef };\n","/**\n * Decides if the supplied variable is variant label\n */\nfunction isVariantLabel(v) {\n    return typeof v === \"string\" || Array.isArray(v);\n}\n\nexport { isVariantLabel };\n","function isAnimationControls(v) {\n    return (v !== null &&\n        typeof v === \"object\" &&\n        typeof v.start === \"function\");\n}\n\nexport { isAnimationControls };\n","const variantPriorityOrder = [\n    \"animate\",\n    \"whileInView\",\n    \"whileFocus\",\n    \"whileHover\",\n    \"whileTap\",\n    \"whileDrag\",\n    \"exit\",\n];\nconst variantProps = [\"initial\", ...variantPriorityOrder];\n\nexport { variantPriorityOrder, variantProps };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { variantProps } from './variant-props.mjs';\n\nfunction isControllingVariants(props) {\n    return (isAnimationControls(props.animate) ||\n        variantProps.some((name) => isVariantLabel(props[name])));\n}\nfunction isVariantNode(props) {\n    return Boolean(isControllingVariants(props) || props.variants);\n}\n\nexport { isControllingVariants, isVariantNode };\n","import { isVariantLabel } from '../../render/utils/is-variant-label.mjs';\nimport { isControllingVariants } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction getCurrentTreeVariants(props, context) {\n    if (isControllingVariants(props)) {\n        const { initial, animate } = props;\n        return {\n            initial: initial === false || isVariantLabel(initial)\n                ? initial\n                : undefined,\n            animate: isVariantLabel(animate) ? animate : undefined,\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\n\nexport { getCurrentTreeVariants };\n","import { useContext, useMemo } from 'react';\nimport { MotionContext } from './index.mjs';\nimport { getCurrentTreeVariants } from './utils.mjs';\n\nfunction useCreateMotionContext(props) {\n    const { initial, animate } = getCurrentTreeVariants(props, useContext(MotionContext));\n    return useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);\n}\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\n\nexport { useCreateMotionContext };\n","const featureProps = {\n    animation: [\n        \"animate\",\n        \"variants\",\n        \"whileHover\",\n        \"whileTap\",\n        \"exit\",\n        \"whileInView\",\n        \"whileFocus\",\n        \"whileDrag\",\n    ],\n    exit: [\"exit\"],\n    drag: [\"drag\", \"dragControls\"],\n    focus: [\"whileFocus\"],\n    hover: [\"whileHover\", \"onHoverStart\", \"onHoverEnd\"],\n    tap: [\"whileTap\", \"onTap\", \"onTapStart\", \"onTapCancel\"],\n    pan: [\"onPan\", \"onPanStart\", \"onPanSessionStart\", \"onPanEnd\"],\n    inView: [\"whileInView\", \"onViewportEnter\", \"onViewportLeave\"],\n    layout: [\"layout\", \"layoutId\"],\n};\nconst featureDefinitions = {};\nfor (const key in featureProps) {\n    featureDefinitions[key] = {\n        isEnabled: (props) => featureProps[key].some((name) => !!props[name]),\n    };\n}\n\nexport { featureDefinitions };\n","import { featureDefinitions } from './definitions.mjs';\n\nfunction loadFeatures(features) {\n    for (const key in features) {\n        featureDefinitions[key] = {\n            ...featureDefinitions[key],\n            ...features[key],\n        };\n    }\n}\n\nexport { loadFeatures };\n","import { createContext } from 'react';\n\n/**\n * Internal, exported only for usage in Framer\n */\nconst SwitchLayoutGroupContext = createContext({});\n\nexport { SwitchLayoutGroupContext };\n","const motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n\nexport { motionComponentSymbol };\n","import * as React from 'react';\nimport { forwardRef, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../context/MotionContext/index.mjs';\nimport { useVisualElement } from './utils/use-visual-element.mjs';\nimport { useMotionRef } from './utils/use-motion-ref.mjs';\nimport { useCreateMotionContext } from '../context/MotionContext/create.mjs';\nimport { loadFeatures } from './features/load-features.mjs';\nimport { isBrowser } from '../utils/is-browser.mjs';\nimport { LayoutGroupContext } from '../context/LayoutGroupContext.mjs';\nimport { LazyContext } from '../context/LazyContext.mjs';\nimport { SwitchLayoutGroupContext } from '../context/SwitchLayoutGroupContext.mjs';\nimport { motionComponentSymbol } from './utils/symbol.mjs';\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component, }) {\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        /**\n         * If we need to measure the element we load this functionality in a\n         * separate class component in order to gain access to getSnapshotBeforeUpdate.\n         */\n        let MeasureLayout;\n        const configAndProps = {\n            ...useContext(MotionConfigContext),\n            ...props,\n            layoutId: useLayoutId(props),\n        };\n        const { isStatic } = configAndProps;\n        const context = useCreateMotionContext(props);\n        const visualState = useVisualState(props, isStatic);\n        if (!isStatic && isBrowser) {\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */\n            context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement);\n            /**\n             * Load Motion gesture and animation features. These are rendered as renderless\n             * components so each feature can optionally make use of React lifecycle methods.\n             */\n            const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n            const isStrict = useContext(LazyContext).strict;\n            if (context.visualElement) {\n                MeasureLayout = context.visualElement.loadFeatures(\n                // Note: Pass the full new combined props to correctly re-render dynamic feature components.\n                configAndProps, isStrict, preloadedFeatures, initialLayoutGroupConfig);\n            }\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */\n        return (React.createElement(MotionContext.Provider, { value: context },\n            MeasureLayout && context.visualElement ? (React.createElement(MeasureLayout, { visualElement: context.visualElement, ...configAndProps })) : null,\n            useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)));\n    }\n    const ForwardRefComponent = forwardRef(MotionComponent);\n    ForwardRefComponent[motionComponentSymbol] = Component;\n    return ForwardRefComponent;\n}\nfunction useLayoutId({ layoutId }) {\n    const layoutGroupId = useContext(LayoutGroupContext).id;\n    return layoutGroupId && layoutId !== undefined\n        ? layoutGroupId + \"-\" + layoutId\n        : layoutId;\n}\n\nexport { createMotionComponent };\n","import { createMotionComponent } from '../../motion/index.mjs';\n\n/**\n * Convert any React component into a `motion` component. The provided component\n * **must** use `React.forwardRef` to the underlying DOM component you want to animate.\n *\n * ```jsx\n * const Component = React.forwardRef((props, ref) => {\n *   return <div ref={ref} />\n * })\n *\n * const MotionComponent = motion(Component)\n * ```\n *\n * @public\n */\nfunction createMotionProxy(createConfig) {\n    function custom(Component, customMotionComponentConfig = {}) {\n        return createMotionComponent(createConfig(Component, customMotionComponentConfig));\n    }\n    if (typeof Proxy === \"undefined\") {\n        return custom;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */\n    const componentCache = new Map();\n    return new Proxy(custom, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */\n        get: (_target, key) => {\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */\n            if (!componentCache.has(key)) {\n                componentCache.set(key, custom(key));\n            }\n            return componentCache.get(key);\n        },\n    });\n}\n\nexport { createMotionProxy };\n","/**\n * We keep these listed seperately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */\nconst lowercaseSVGElements = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"switch\",\n    \"symbol\",\n    \"svg\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\",\n];\n\nexport { lowercaseSVGElements };\n","import { lowercaseSVGElements } from '../../svg/lowercase-elements.mjs';\n\nfunction isSVGComponent(Component) {\n    if (\n    /**\n     * If it's not a string, it's a custom React component. Currently we only support\n     * HTML custom React components.\n     */\n    typeof Component !== \"string\" ||\n        /**\n         * If it contains a dash, the element is a custom HTML webcomponent.\n         */\n        Component.includes(\"-\")) {\n        return false;\n    }\n    else if (\n    /**\n     * If it's in our list of lowercase SVG tags, it's an SVG component\n     */\n    lowercaseSVGElements.indexOf(Component) > -1 ||\n        /**\n         * If it contains a capital letter, it's an SVG component\n         */\n        /[A-Z]/.test(Component)) {\n        return true;\n    }\n    return false;\n}\n\nexport { isSVGComponent };\n","const scaleCorrectors = {};\nfunction addScaleCorrector(correctors) {\n    Object.assign(scaleCorrectors, correctors);\n}\n\nexport { addScaleCorrector, scaleCorrectors };\n","/**\n * Generate a list of every possible transform key.\n */\nconst transformPropOrder = [\n    \"transformPerspective\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"translateX\",\n    \"translateY\",\n    \"translateZ\",\n    \"scale\",\n    \"scaleX\",\n    \"scaleY\",\n    \"rotate\",\n    \"rotateX\",\n    \"rotateY\",\n    \"rotateZ\",\n    \"skew\",\n    \"skewX\",\n    \"skewY\",\n];\n/**\n * A quick lookup for transform props.\n */\nconst transformProps = new Set(transformPropOrder);\n\nexport { transformPropOrder, transformProps };\n","import { scaleCorrectors } from '../../projection/styles/scale-correction.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\n\nfunction isForcedMotionValue(key, { layout, layoutId }) {\n    return (transformProps.has(key) ||\n        key.startsWith(\"origin\") ||\n        ((layout || layoutId !== undefined) &&\n            (!!scaleCorrectors[key] || key === \"opacity\")));\n}\n\nexport { isForcedMotionValue };\n","import { transformPropOrder } from './transform.mjs';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(transform, { enableHardwareAcceleration = true, allowTransformNone = true, }, transformIsDefault, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        if (transform[key] !== undefined) {\n            const transformName = translateAlias[key] || key;\n            transformString += `${transformName}(${transform[key]}) `;\n        }\n    }\n    if (enableHardwareAcceleration && !transform.z) {\n        transformString += \"translateZ(0)\";\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (allowTransformNone && transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n","/**\n * Provided a value and a ValueType, returns the value as that value type.\n */\nconst getValueAsType = (value, type) => {\n    return type && typeof value === \"number\"\n        ? type.transform(value)\n        : value;\n};\n\nexport { getValueAsType };\n","import { number } from '../../../value/types/numbers/index.mjs';\n\nconst int = {\n    ...number,\n    transform: Math.round,\n};\n\nexport { int };\n","import { scale, alpha } from '../../../value/types/numbers/index.mjs';\nimport { px, degrees, progressPercentage } from '../../../value/types/numbers/units.mjs';\nimport { int } from './type-int.mjs';\n\nconst numberValueTypes = {\n    // Border props\n    borderWidth: px,\n    borderTopWidth: px,\n    borderRightWidth: px,\n    borderBottomWidth: px,\n    borderLeftWidth: px,\n    borderRadius: px,\n    radius: px,\n    borderTopLeftRadius: px,\n    borderTopRightRadius: px,\n    borderBottomRightRadius: px,\n    borderBottomLeftRadius: px,\n    // Positioning props\n    width: px,\n    maxWidth: px,\n    height: px,\n    maxHeight: px,\n    size: px,\n    top: px,\n    right: px,\n    bottom: px,\n    left: px,\n    // Spacing props\n    padding: px,\n    paddingTop: px,\n    paddingRight: px,\n    paddingBottom: px,\n    paddingLeft: px,\n    margin: px,\n    marginTop: px,\n    marginRight: px,\n    marginBottom: px,\n    marginLeft: px,\n    // Transform props\n    rotate: degrees,\n    rotateX: degrees,\n    rotateY: degrees,\n    rotateZ: degrees,\n    scale,\n    scaleX: scale,\n    scaleY: scale,\n    scaleZ: scale,\n    skew: degrees,\n    skewX: degrees,\n    skewY: degrees,\n    distance: px,\n    translateX: px,\n    translateY: px,\n    translateZ: px,\n    x: px,\n    y: px,\n    z: px,\n    perspective: px,\n    transformPerspective: px,\n    opacity: alpha,\n    originX: progressPercentage,\n    originY: progressPercentage,\n    originZ: px,\n    // Misc\n    zIndex: int,\n    // SVG\n    fillOpacity: alpha,\n    strokeOpacity: alpha,\n    numOctaves: int,\n};\n\nexport { numberValueTypes };\n","import { buildTransform } from './build-transform.mjs';\nimport { isCSSVariableName } from '../../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nfunction buildHTMLStyles(state, latestValues, options, transformTemplate) {\n    const { style, vars, transform, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    // Does the calculated transform essentially equal \"none\"?\n    let transformIsNone = true;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept seperately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        /**\n         * If this is a CSS variable we don't do any further processing.\n         */\n        if (isCSSVariableName(key)) {\n            vars[key] = value;\n            continue;\n        }\n        // Convert the value to its default value type, ie 0 -> \"0px\"\n        const valueType = numberValueTypes[key];\n        const valueAsType = getValueAsType(value, valueType);\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            transform[key] = valueAsType;\n            // If we already know we have a non-default transform, early return\n            if (!transformIsNone)\n                continue;\n            // Otherwise check to see if this is a default transform\n            if (value !== (valueType.default || 0))\n                transformIsNone = false;\n        }\n        else if (key.startsWith(\"origin\")) {\n            // If this is a transform origin, flag and enable further transform-origin processing\n            hasTransformOrigin = true;\n            transformOrigin[key] = valueAsType;\n        }\n        else {\n            style[key] = valueAsType;\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(state.transform, options, transformIsNone, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nexport { buildHTMLStyles };\n","const createHtmlRenderState = () => ({\n    style: {},\n    transform: {},\n    transformOrigin: {},\n    vars: {},\n});\n\nexport { createHtmlRenderState };\n","import { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (const key in source) {\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState, isStatic) {\n    return useMemo(() => {\n        const state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState, isStatic) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState, isStatic));\n    return style;\n}\nfunction useHTMLProps(props, visualState, isStatic) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState, isStatic);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined &&\n        (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps };\n","/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */\nconst validMotionProps = new Set([\n    \"animate\",\n    \"exit\",\n    \"variants\",\n    \"initial\",\n    \"style\",\n    \"values\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"custom\",\n    \"inherit\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"_dragX\",\n    \"_dragY\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"globalTapTarget\",\n    \"ignoreStrict\",\n    \"viewport\",\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */\nfunction isValidMotionProp(key) {\n    return (key.startsWith(\"while\") ||\n        (key.startsWith(\"drag\") && key !== \"draggable\") ||\n        key.startsWith(\"layout\") ||\n        key.startsWith(\"onTap\") ||\n        key.startsWith(\"onPan\") ||\n        key.startsWith(\"onLayout\") ||\n        validMotionProps.has(key));\n}\n\nexport { isValidMotionProp };\n","import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\n\nlet shouldForward = (key) => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp)\n        return;\n    // Explicitly filter our events\n    shouldForward = (key) => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n}\ncatch (_a) {\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for (const key in props) {\n        /**\n         * values is considered a valid prop by Emotion, so if it's present\n         * this will be rendered out to the DOM unless explicitly filtered.\n         *\n         * We check the type as it could be used with the `feColorMatrix`\n         * element, which we support.\n         */\n        if (key === \"values\" && typeof props.values === \"object\")\n            continue;\n        if (shouldForward(key) ||\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\n            (!isDom && !isValidMotionProp(key)) ||\n            // If trying to use native HTML drag events, forward drag listeners\n            (props[\"draggable\"] && key.startsWith(\"onDrag\"))) {\n            filteredProps[key] = props[key];\n        }\n    }\n    return filteredProps;\n}\n\nexport { filterProps, loadExternalIsValidProp };\n","import { px } from '../../../value/types/numbers/units.mjs';\n\nfunction calcOrigin(origin, offset, size) {\n    return typeof origin === \"string\"\n        ? origin\n        : px.transform(offset + size * origin);\n}\n/**\n * The SVG transform origin defaults are different to CSS and is less intuitive,\n * so we use the measured dimensions of the SVG to reconcile these.\n */\nfunction calcSVGTransformOrigin(dimensions, originX, originY) {\n    const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);\n    const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);\n    return `${pxOriginX} ${pxOriginY}`;\n}\n\nexport { calcSVGTransformOrigin };\n","import { px } from '../../../value/types/numbers/units.mjs';\n\nconst dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\",\n};\nconst camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\",\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */\nfunction buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {\n    // Normalise path length by setting SVG attribute pathLength to 1\n    attrs.pathLength = 1;\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    const keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = px.transform(-offset);\n    // Build the dash array\n    const pathLength = px.transform(length);\n    const pathSpacing = px.transform(spacing);\n    attrs[keys.array] = `${pathLength} ${pathSpacing}`;\n}\n\nexport { buildSVGPath };\n","import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { calcSVGTransformOrigin } from './transform-origin.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, { attrX, attrY, attrScale, originX, originY, pathLength, pathSpacing = 1, pathOffset = 0, \n// This is object creation, which we try to avoid per-frame.\n...latest }, options, isSVGTag, transformTemplate) {\n    buildHTMLStyles(state, latest, options, transformTemplate);\n    /**\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n     * as normal HTML tags.\n     */\n    if (isSVGTag) {\n        if (state.style.viewBox) {\n            state.attrs.viewBox = state.style.viewBox;\n        }\n        return;\n    }\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style, dimensions } = state;\n    /**\n     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n     * and copy it into style.\n     */\n    if (attrs.transform) {\n        if (dimensions)\n            style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    // Parse transformOrigin\n    if (dimensions &&\n        (originX !== undefined || originY !== undefined || style.transform)) {\n        style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n    }\n    // Render attrX/attrY/attrScale as attributes\n    if (attrX !== undefined)\n        attrs.x = attrX;\n    if (attrY !== undefined)\n        attrs.y = attrY;\n    if (attrScale !== undefined)\n        attrs.scale = attrScale;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\nexport { buildSVGAttrs };\n","import { createHtmlRenderState } from '../../html/utils/create-render-state.mjs';\n\nconst createSvgRenderState = () => ({\n    ...createHtmlRenderState(),\n    attrs: {},\n});\n\nexport { createSvgRenderState };\n","const isSVGTag = (tag) => typeof tag === \"string\" && tag.toLowerCase() === \"svg\";\n\nexport { isSVGTag };\n","import { useMemo } from 'react';\nimport { copyRawValuesOnly } from '../html/use-props.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n    const visualProps = useMemo(() => {\n        const state = createSvgRenderState();\n        buildSVGAttrs(state, visualState, { enableHardwareAcceleration: false }, isSVGTag(Component), props.transformTemplate);\n        return {\n            ...state.attrs,\n            style: { ...state.style },\n        };\n    }, [visualState]);\n    if (props.style) {\n        const rawStyles = {};\n        copyRawValuesOnly(rawStyles, props.style, props);\n        visualProps.style = { ...rawStyles, ...visualProps.style };\n    }\n    return visualProps;\n}\n\nexport { useSVGProps };\n","import { Fragment, useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction createUseRender(forwardMotionProps = false) {\n    const useRender = (Component, props, ref, { latestValues }, isStatic) => {\n        const useVisualProps = isSVGComponent(Component)\n            ? useSVGProps\n            : useHTMLProps;\n        const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n        const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n        const elementProps = Component !== Fragment\n            ? { ...filteredProps, ...visualProps, ref }\n            : {};\n        /**\n         * If component has been handed a motion value as its child,\n         * memoise its initial value and render that. Subsequent updates\n         * will be handled by the onChange handler\n         */\n        const { children } = props;\n        const renderedChildren = useMemo(() => (isMotionValue(children) ? children.get() : children), [children]);\n        return createElement(Component, {\n            ...elementProps,\n            children: renderedChildren,\n        });\n    };\n    return useRender;\n}\n\nexport { createUseRender };\n","function renderHTML(element, { style, vars }, styleProp, projection) {\n    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));\n    // Loop over any CSS variables and assign those.\n    for (const key in vars) {\n        element.style.setProperty(key, vars[key]);\n    }\n}\n\nexport { renderHTML };\n","/**\n * A set of attribute names that are always read/written as camel case.\n */\nconst camelCaseAttributes = new Set([\n    \"baseFrequency\",\n    \"diffuseConstant\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerWidth\",\n    \"numOctaves\",\n    \"targetX\",\n    \"targetY\",\n    \"surfaceScale\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"stdDeviation\",\n    \"tableValues\",\n    \"viewBox\",\n    \"gradientTransform\",\n    \"pathLength\",\n    \"startOffset\",\n    \"textLength\",\n    \"lengthAdjust\",\n]);\n\nexport { camelCaseAttributes };\n","import { camelToDash } from '../../dom/utils/camel-to-dash.mjs';\nimport { renderHTML } from '../../html/utils/render.mjs';\nimport { camelCaseAttributes } from './camel-case-attrs.mjs';\n\nfunction renderSVG(element, renderState, _styleProp, projection) {\n    renderHTML(element, renderState, undefined, projection);\n    for (const key in renderState.attrs) {\n        element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);\n    }\n}\n\nexport { renderSVG };\n","import { isForcedMotionValue } from '../../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps) {\n    const { style } = props;\n    const newValues = {};\n    for (const key in style) {\n        if (isMotionValue(style[key]) ||\n            (prevProps.style && isMotionValue(prevProps.style[key])) ||\n            isForcedMotionValue(key, props)) {\n            newValues[key] = style[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","import { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\nimport { scrapeMotionValuesFromProps as scrapeMotionValuesFromProps$1 } from '../../html/utils/scrape-motion-values.mjs';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps) {\n    const newValues = scrapeMotionValuesFromProps$1(props, prevProps);\n    for (const key in props) {\n        if (isMotionValue(props[key]) || isMotionValue(prevProps[key])) {\n            const targetKey = transformPropOrder.indexOf(key) !== -1\n                ? \"attr\" + key.charAt(0).toUpperCase() + key.substring(1)\n                : key;\n            newValues[targetKey] = props[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","function resolveVariantFromProps(props, definition, custom, currentValues = {}, currentVelocity = {}) {\n    /**\n     * If the variant definition is a function, resolve.\n     */\n    if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */\n    if (typeof definition === \"string\") {\n        definition = props.variants && props.variants[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */\n    if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    return definition;\n}\n\nexport { resolveVariantFromProps };\n","const isKeyframesTarget = (v) => {\n    return Array.isArray(v);\n};\n\nexport { isKeyframesTarget };\n","import { isKeyframesTarget } from '../animation/utils/is-keyframes-target.mjs';\n\nconst isCustomValue = (v) => {\n    return Boolean(v && typeof v === \"object\" && v.mix && v.toValue);\n};\nconst resolveFinalValueInKeyframes = (v) => {\n    // TODO maybe throw if v.length - 1 is placeholder token?\n    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;\n};\n\nexport { isCustomValue, resolveFinalValueInKeyframes };\n","import { isCustomValue } from '../../utils/resolve-value.mjs';\nimport { isMotionValue } from './is-motion-value.mjs';\n\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */\nfunction resolveMotionValue(value) {\n    const unwrappedValue = isMotionValue(value) ? value.get() : value;\n    return isCustomValue(unwrappedValue)\n        ? unwrappedValue.toValue()\n        : unwrappedValue;\n}\n\nexport { resolveMotionValue };\n","import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, onMount, }, props, context, presenceContext) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    if (onMount) {\n        state.mount = (instance) => onMount(props, instance, state);\n    }\n    return state;\n}\nconst makeUseVisualState = (config) => (props, isStatic) => {\n    const context = useContext(MotionContext);\n    const presenceContext = useContext(PresenceContext);\n    const make = () => makeState(config, props, context, presenceContext);\n    return isStatic ? make() : useConstant(make);\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props, {});\n    for (const key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    if (context &&\n        isVariantNode$1 &&\n        !isControllingVariants$1 &&\n        props.inherit !== false) {\n        if (initial === undefined)\n            initial = context.initial;\n        if (animate === undefined)\n            animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext\n        ? presenceContext.initial === false\n        : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !isAnimationControls(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n        list.forEach((definition) => {\n            const resolved = resolveVariantFromProps(props, definition);\n            if (!resolved)\n                return;\n            const { transitionEnd, transition, ...target } = resolved;\n            for (const key in target) {\n                let valueTarget = target[key];\n                if (Array.isArray(valueTarget)) {\n                    /**\n                     * Take final keyframe if the initial animation is blocked because\n                     * we want to initialise at the end of that blocked animation.\n                     */\n                    const index = isInitialAnimationBlocked\n                        ? valueTarget.length - 1\n                        : 0;\n                    valueTarget = valueTarget[index];\n                }\n                if (valueTarget !== null) {\n                    values[key] = valueTarget;\n                }\n            }\n            for (const key in transitionEnd)\n                values[key] = transitionEnd[key];\n        });\n    }\n    return values;\n}\n\nexport { makeUseVisualState };\n","import { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst svgMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n        createRenderState: createSvgRenderState,\n        onMount: (props, instance, { renderState, latestValues }) => {\n            frame.read(() => {\n                try {\n                    renderState.dimensions =\n                        typeof instance.getBBox ===\n                            \"function\"\n                            ? instance.getBBox()\n                            : instance.getBoundingClientRect();\n                }\n                catch (e) {\n                    // Most likely trying to measure an unrendered element under Firefox\n                    renderState.dimensions = {\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0,\n                    };\n                }\n            });\n            frame.render(() => {\n                buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, isSVGTag(instance.tagName), props.transformTemplate);\n                renderSVG(instance, renderState);\n            });\n        },\n    }),\n};\n\nexport { svgMotionConfig };\n","import { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nconst htmlMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps,\n        createRenderState: createHtmlRenderState,\n    }),\n};\n\nexport { htmlMotionConfig };\n","import { isSVGComponent } from './is-svg-component.mjs';\nimport { createUseRender } from '../use-render.mjs';\nimport { svgMotionConfig } from '../../svg/config-motion.mjs';\nimport { htmlMotionConfig } from '../../html/config-motion.mjs';\n\nfunction createDomMotionConfig(Component, { forwardMotionProps = false }, preloadedFeatures, createVisualElement) {\n    const baseConfig = isSVGComponent(Component)\n        ? svgMotionConfig\n        : htmlMotionConfig;\n    return {\n        ...baseConfig,\n        preloadedFeatures,\n        useRender: createUseRender(forwardMotionProps),\n        createVisualElement,\n        Component,\n    };\n}\n\nexport { createDomMotionConfig };\n","function addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n\nexport { addDomEvent };\n","const isPrimaryPointer = (event) => {\n    if (event.pointerType === \"mouse\") {\n        return typeof event.button !== \"number\" || event.button <= 0;\n    }\n    else {\n        /**\n         * isPrimary is true for all mice buttons, whereas every touch point\n         * is regarded as its own input. So subsequent concurrent touch points\n         * will be false.\n         *\n         * Specifically match against false here as incomplete versions of\n         * PointerEvents in very old browser might have it set as undefined.\n         */\n        return event.isPrimary !== false;\n    }\n};\n\nexport { isPrimaryPointer };\n","import { isPrimaryPointer } from './utils/is-primary-pointer.mjs';\n\nfunction extractEventInfo(event, pointType = \"page\") {\n    return {\n        point: {\n            x: event[pointType + \"X\"],\n            y: event[pointType + \"Y\"],\n        },\n    };\n}\nconst addPointerInfo = (handler) => {\n    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\n\nexport { addPointerInfo, extractEventInfo };\n","import { addDomEvent } from './add-dom-event.mjs';\nimport { addPointerInfo } from './event-info.mjs';\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\n\nexport { addPointerEvent };\n","function createLock(name) {\n    let lock = null;\n    return () => {\n        const openLock = () => {\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nconst globalHorizontalLock = createLock(\"dragHorizontal\");\nconst globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    let lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    }\n    else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    }\n    else {\n        const openHorizontal = globalHorizontalLock();\n        const openVertical = globalVerticalLock();\n        if (openHorizontal && openVertical) {\n            lock = () => {\n                openHorizontal();\n                openVertical();\n            };\n        }\n        else {\n            // Release the locks because we don't use them\n            if (openHorizontal)\n                openHorizontal();\n            if (openVertical)\n                openVertical();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    const openGestureLock = getGlobalLock(true);\n    if (!openGestureLock)\n        return true;\n    openGestureLock();\n    return false;\n}\n\nexport { createLock, getGlobalLock, isDragActive };\n","class Feature {\n    constructor(node) {\n        this.isMounted = false;\n        this.node = node;\n    }\n    update() { }\n}\n\nexport { Feature };\n","import { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction addHoverEvent(node, isActive) {\n    const eventName = \"pointer\" + (isActive ? \"enter\" : \"leave\");\n    const callbackName = \"onHover\" + (isActive ? \"Start\" : \"End\");\n    const handleEvent = (event, info) => {\n        if (event.pointerType === \"touch\" || isDragActive())\n            return;\n        const props = node.getProps();\n        if (node.animationState && props.whileHover) {\n            node.animationState.setActive(\"whileHover\", isActive);\n        }\n        if (props[callbackName]) {\n            frame.update(() => props[callbackName](event, info));\n        }\n    };\n    return addPointerEvent(node.current, eventName, handleEvent, {\n        passive: !node.getProps()[callbackName],\n    });\n}\nclass HoverGesture extends Feature {\n    mount() {\n        this.unmount = pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n    }\n    unmount() { }\n}\n\nexport { HoverGesture };\n","import { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\n\nclass FocusGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n    }\n    unmount() { }\n}\n\nexport { FocusGesture };\n","/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nconst isNodeOrChild = (parent, child) => {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nexport { isNodeOrChild };\n","import { extractEventInfo } from '../events/event-info.mjs';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { noop } from '../utils/noop.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction fireSyntheticPointerEvent(name, handler) {\n    if (!handler)\n        return;\n    const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n    handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\nclass PressGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removeStartListeners = noop;\n        this.removeEndListeners = noop;\n        this.removeAccessibleListeners = noop;\n        this.startPointerPress = (startEvent, startInfo) => {\n            if (this.isPressing)\n                return;\n            this.removeEndListeners();\n            const props = this.node.getProps();\n            const endPointerPress = (endEvent, endInfo) => {\n                if (!this.checkPressEnd())\n                    return;\n                const { onTap, onTapCancel, globalTapTarget } = this.node.getProps();\n                frame.update(() => {\n                    /**\n                     * We only count this as a tap gesture if the event.target is the same\n                     * as, or a child of, this component's element\n                     */\n                    !globalTapTarget &&\n                        !isNodeOrChild(this.node.current, endEvent.target)\n                        ? onTapCancel && onTapCancel(endEvent, endInfo)\n                        : onTap && onTap(endEvent, endInfo);\n                });\n            };\n            const removePointerUpListener = addPointerEvent(window, \"pointerup\", endPointerPress, { passive: !(props.onTap || props[\"onPointerUp\"]) });\n            const removePointerCancelListener = addPointerEvent(window, \"pointercancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props.onTapCancel || props[\"onPointerCancel\"]) });\n            this.removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);\n            this.startPress(startEvent, startInfo);\n        };\n        this.startAccessiblePress = () => {\n            const handleKeydown = (keydownEvent) => {\n                if (keydownEvent.key !== \"Enter\" || this.isPressing)\n                    return;\n                const handleKeyup = (keyupEvent) => {\n                    if (keyupEvent.key !== \"Enter\" || !this.checkPressEnd())\n                        return;\n                    fireSyntheticPointerEvent(\"up\", (event, info) => {\n                        const { onTap } = this.node.getProps();\n                        if (onTap) {\n                            frame.update(() => onTap(event, info));\n                        }\n                    });\n                };\n                this.removeEndListeners();\n                this.removeEndListeners = addDomEvent(this.node.current, \"keyup\", handleKeyup);\n                fireSyntheticPointerEvent(\"down\", (event, info) => {\n                    this.startPress(event, info);\n                });\n            };\n            const removeKeydownListener = addDomEvent(this.node.current, \"keydown\", handleKeydown);\n            const handleBlur = () => {\n                if (!this.isPressing)\n                    return;\n                fireSyntheticPointerEvent(\"cancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));\n            };\n            const removeBlurListener = addDomEvent(this.node.current, \"blur\", handleBlur);\n            this.removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);\n        };\n    }\n    startPress(event, info) {\n        this.isPressing = true;\n        const { onTapStart, whileTap } = this.node.getProps();\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", true);\n        }\n        if (onTapStart) {\n            frame.update(() => onTapStart(event, info));\n        }\n    }\n    checkPressEnd() {\n        this.removeEndListeners();\n        this.isPressing = false;\n        const props = this.node.getProps();\n        if (props.whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", false);\n        }\n        return !isDragActive();\n    }\n    cancelPress(event, info) {\n        if (!this.checkPressEnd())\n            return;\n        const { onTapCancel } = this.node.getProps();\n        if (onTapCancel) {\n            frame.update(() => onTapCancel(event, info));\n        }\n    }\n    mount() {\n        const props = this.node.getProps();\n        const removePointerListener = addPointerEvent(props.globalTapTarget ? window : this.node.current, \"pointerdown\", this.startPointerPress, { passive: !(props.onTapStart || props[\"onPointerStart\"]) });\n        const removeFocusListener = addDomEvent(this.node.current, \"focus\", this.startAccessiblePress);\n        this.removeStartListeners = pipe(removePointerListener, removeFocusListener);\n    }\n    unmount() {\n        this.removeStartListeners();\n        this.removeEndListeners();\n        this.removeAccessibleListeners();\n    }\n}\n\nexport { PressGesture };\n","/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nexport { observeIntersection };\n","import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n","import { HoverGesture } from '../../gestures/hover.mjs';\nimport { FocusGesture } from '../../gestures/focus.mjs';\nimport { PressGesture } from '../../gestures/press.mjs';\nimport { InViewFeature } from './viewport/index.mjs';\n\nconst gestureAnimations = {\n    inView: {\n        Feature: InViewFeature,\n    },\n    tap: {\n        Feature: PressGesture,\n    },\n    focus: {\n        Feature: FocusGesture,\n    },\n    hover: {\n        Feature: HoverGesture,\n    },\n};\n\nexport { gestureAnimations };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","import { resolveVariantFromProps } from './resolve-variants.mjs';\n\n/**\n * Creates an object containing the latest state of every MotionValue on a VisualElement\n */\nfunction getCurrent(visualElement) {\n    const current = {};\n    visualElement.values.forEach((value, key) => (current[key] = value.get()));\n    return current;\n}\n/**\n * Creates an object containing the latest velocity of every MotionValue on a VisualElement\n */\nfunction getVelocity(visualElement) {\n    const velocity = {};\n    visualElement.values.forEach((value, key) => (velocity[key] = value.getVelocity()));\n    return velocity;\n}\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, getCurrent(visualElement), getVelocity(visualElement));\n}\n\nexport { resolveVariant };\n","/**\n * Converts seconds to milliseconds\n *\n * @param seconds - Time in seconds.\n * @return milliseconds - Converted time in milliseconds.\n */\nconst secondsToMilliseconds = (seconds) => seconds * 1000;\nconst millisecondsToSeconds = (milliseconds) => milliseconds / 1000;\n\nexport { millisecondsToSeconds, secondsToMilliseconds };\n","const instantAnimationState = {\n    current: false,\n};\n\nexport { instantAnimationState };\n","const isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === \"number\";\n\nexport { isBezierDefinition };\n","import { isBezierDefinition } from '../../../easing/utils/is-bezier-definition.mjs';\n\nfunction isWaapiSupportedEasing(easing) {\n    return Boolean(!easing ||\n        (typeof easing === \"string\" && supportedWaapiEasing[easing]) ||\n        isBezierDefinition(easing) ||\n        (Array.isArray(easing) && easing.every(isWaapiSupportedEasing)));\n}\nconst cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;\nconst supportedWaapiEasing = {\n    linear: \"linear\",\n    ease: \"ease\",\n    easeIn: \"ease-in\",\n    easeOut: \"ease-out\",\n    easeInOut: \"ease-in-out\",\n    circIn: cubicBezierAsString([0, 0.65, 0.55, 1]),\n    circOut: cubicBezierAsString([0.55, 0, 1, 0.45]),\n    backIn: cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),\n    backOut: cubicBezierAsString([0.33, 1.53, 0.69, 0.99]),\n};\nfunction mapEasingToNativeEasing(easing) {\n    if (!easing)\n        return undefined;\n    return isBezierDefinition(easing)\n        ? cubicBezierAsString(easing)\n        : Array.isArray(easing)\n            ? easing.map(mapEasingToNativeEasing)\n            : supportedWaapiEasing[easing];\n}\n\nexport { cubicBezierAsString, isWaapiSupportedEasing, mapEasingToNativeEasing, supportedWaapiEasing };\n","import { mapEasingToNativeEasing } from './easing.mjs';\n\nfunction animateStyle(element, valueName, keyframes, { delay = 0, duration, repeat = 0, repeatType = \"loop\", ease, times, } = {}) {\n    const keyframeOptions = { [valueName]: keyframes };\n    if (times)\n        keyframeOptions.offset = times;\n    const easing = mapEasingToNativeEasing(ease);\n    /**\n     * If this is an easing array, apply to keyframes, not animation as a whole\n     */\n    if (Array.isArray(easing))\n        keyframeOptions.easing = easing;\n    return element.animate(keyframeOptions, {\n        delay,\n        duration,\n        easing: !Array.isArray(easing) ? easing : \"linear\",\n        fill: \"both\",\n        iterations: repeat + 1,\n        direction: repeatType === \"reverse\" ? \"alternate\" : \"normal\",\n    });\n}\n\nexport { animateStyle };\n","function getFinalKeyframe(keyframes, { repeat, repeatType = \"loop\" }) {\n    const index = repeat && repeatType !== \"loop\" && repeat % 2 === 1\n        ? 0\n        : keyframes.length - 1;\n    return keyframes[index];\n}\n\nexport { getFinalKeyframe };\n","import { noop } from '../utils/noop.mjs';\n\n/*\n  Bezier function generator\n  This has been modified from Gaëtan Renaudeau's BezierEasing\n  https://github.com/gre/bezier-easing/blob/master/src/index.js\n  https://github.com/gre/bezier-easing/blob/master/LICENSE\n  \n  I've removed the newtonRaphsonIterate algo because in benchmarking it\n  wasn't noticiably faster than binarySubdivision, indeed removing it\n  usually improved times, depending on the curve.\n  I also removed the lookup table, as for the added bundle size and loop we're\n  only cutting ~4 or so subdivision iterations. I bumped the max iterations up\n  to 12 to compensate and this still tended to be faster for no perceivable\n  loss in accuracy.\n  Usage\n    const easeOut = cubicBezier(.17,.67,.83,.67);\n    const x = easeOut(0.5); // returns 0.627...\n*/\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nconst calcBezier = (t, a1, a2) => (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) *\n    t;\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 12;\nfunction binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = lowerBound + (upperBound - lowerBound) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - x;\n        if (currentX > 0.0) {\n            upperBound = currentT;\n        }\n        else {\n            lowerBound = currentT;\n        }\n    } while (Math.abs(currentX) > subdivisionPrecision &&\n        ++i < subdivisionMaxIterations);\n    return currentT;\n}\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    // If this is a linear gradient, return linear easing\n    if (mX1 === mY1 && mX2 === mY2)\n        return noop;\n    const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);\n    // If animation is at start/end, return t without easing\n    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\n\nexport { cubicBezier };\n","import { cubicBezier } from './cubic-bezier.mjs';\n\nconst easeIn = cubicBezier(0.42, 0, 1, 1);\nconst easeOut = cubicBezier(0, 0, 0.58, 1);\nconst easeInOut = cubicBezier(0.42, 0, 0.58, 1);\n\nexport { easeIn, easeInOut, easeOut };\n","const isEasingArray = (ease) => {\n    return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\n\nexport { isEasingArray };\n","// Accepts an easing function and returns a new one that outputs mirrored values for\n// the second half of the animation. Turns easeIn into easeInOut.\nconst mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n\nexport { mirrorEasing };\n","// Accepts an easing function and returns a new one that outputs reversed values.\n// Turns easeIn into easeOut.\nconst reverseEasing = (easing) => (p) => 1 - easing(1 - p);\n\nexport { reverseEasing };\n","import { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst circIn = (p) => 1 - Math.sin(Math.acos(p));\nconst circOut = reverseEasing(circIn);\nconst circInOut = mirrorEasing(circIn);\n\nexport { circIn, circInOut, circOut };\n","import { cubicBezier } from './cubic-bezier.mjs';\nimport { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst backOut = cubicBezier(0.33, 1.53, 0.69, 0.99);\nconst backIn = reverseEasing(backOut);\nconst backInOut = mirrorEasing(backIn);\n\nexport { backIn, backInOut, backOut };\n","import { backIn } from './back.mjs';\n\nconst anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n\nexport { anticipate };\n","import { invariant } from '../../utils/errors.mjs';\nimport { cubicBezier } from '../cubic-bezier.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { easeIn, easeInOut, easeOut } from '../ease.mjs';\nimport { circIn, circInOut, circOut } from '../circ.mjs';\nimport { backIn, backInOut, backOut } from '../back.mjs';\nimport { anticipate } from '../anticipate.mjs';\n\nconst easingLookup = {\n    linear: noop,\n    easeIn,\n    easeInOut,\n    easeOut,\n    circIn,\n    circInOut,\n    circOut,\n    backIn,\n    backInOut,\n    backOut,\n    anticipate,\n};\nconst easingDefinitionToFunction = (definition) => {\n    if (Array.isArray(definition)) {\n        // If cubic bezier definition, create bezier curve\n        invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);\n        const [x1, y1, x2, y2] = definition;\n        return cubicBezier(x1, y1, x2, y2);\n    }\n    else if (typeof definition === \"string\") {\n        // Else lookup from table\n        invariant(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);\n        return easingLookup[definition];\n    }\n    return definition;\n};\n\nexport { easingDefinitionToFunction };\n","import { mixNumber } from '../mix/number.mjs';\nimport { progress } from '../progress.mjs';\n\nfunction fillOffset(offset, remaining) {\n    const min = offset[offset.length - 1];\n    for (let i = 1; i <= remaining; i++) {\n        const offsetProgress = progress(0, remaining, i);\n        offset.push(mixNumber(min, 1, offsetProgress));\n    }\n}\n\nexport { fillOffset };\n","import { fillOffset } from './fill.mjs';\n\nfunction defaultOffset(arr) {\n    const offset = [0];\n    fillOffset(offset, arr.length - 1);\n    return offset;\n}\n\nexport { defaultOffset };\n","function convertOffsetToTimes(offset, duration) {\n    return offset.map((o) => o * duration);\n}\n\nexport { convertOffsetToTimes };\n","import { easeInOut } from '../../easing/ease.mjs';\nimport { isEasingArray } from '../../easing/utils/is-easing-array.mjs';\nimport { easingDefinitionToFunction } from '../../easing/utils/map.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { convertOffsetToTimes } from '../../utils/offsets/time.mjs';\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction keyframes({ duration = 300, keyframes: keyframeValues, times, ease = \"easeInOut\", }) {\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */\n    const easingFunctions = isEasingArray(ease)\n        ? ease.map(easingDefinitionToFunction)\n        : easingDefinitionToFunction(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = {\n        done: false,\n        value: keyframeValues[0],\n    };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */\n    const absoluteTimes = convertOffsetToTimes(\n    // Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframeValues.length\n        ? times\n        : defaultOffset(keyframeValues), duration);\n    const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {\n        ease: Array.isArray(easingFunctions)\n            ? easingFunctions\n            : defaultEasing(keyframeValues, easingFunctions),\n    });\n    return {\n        calculatedDuration: duration,\n        next: (t) => {\n            state.value = mapTimeToKeyframe(t);\n            state.done = t >= duration;\n            return state;\n        },\n    };\n}\n\nexport { defaultEasing, keyframes };\n","import { velocityPerSecond } from '../../../utils/velocity-per-second.mjs';\n\nconst velocitySampleDuration = 5; // ms\nfunction calcGeneratorVelocity(resolveValue, t, current) {\n    const prevT = Math.max(t - velocitySampleDuration, 0);\n    return velocityPerSecond(current - resolveValue(prevT), t - prevT);\n}\n\nexport { calcGeneratorVelocity };\n","import { warning } from '../../../utils/errors.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\n\nconst safeMin = 0.001;\nconst minDuration = 0.01;\nconst maxDuration = 10.0;\nconst minDamping = 0.05;\nconst maxDamping = 1;\nfunction findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1, }) {\n    let envelope;\n    let derivative;\n    warning(duration <= secondsToMilliseconds(maxDuration), \"Spring duration must be 10 seconds or less\");\n    let dampingRatio = 1 - bounce;\n    /**\n     * Restrict dampingRatio and duration to within acceptable ranges.\n     */\n    dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n    duration = clamp(minDuration, maxDuration, millisecondsToSeconds(duration));\n    if (dampingRatio < 1) {\n        /**\n         * Underdamped spring\n         */\n        envelope = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const a = exponentialDecay - velocity;\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\n            const c = Math.exp(-delta);\n            return safeMin - (a / b) * c;\n        };\n        derivative = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const d = delta * velocity + velocity;\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n            const f = Math.exp(-delta);\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n            return (factor * ((d - e) * f)) / g;\n        };\n    }\n    else {\n        /**\n         * Critically-damped spring\n         */\n        envelope = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (undampedFreq - velocity) * duration + 1;\n            return -safeMin + a * b;\n        };\n        derivative = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (velocity - undampedFreq) * (duration * duration);\n            return a * b;\n        };\n    }\n    const initialGuess = 5 / duration;\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n    duration = secondsToMilliseconds(duration);\n    if (isNaN(undampedFreq)) {\n        return {\n            stiffness: 100,\n            damping: 10,\n            duration,\n        };\n    }\n    else {\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\n        return {\n            stiffness,\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n            duration,\n        };\n    }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n    let result = initialGuess;\n    for (let i = 1; i < rootIterations; i++) {\n        result = result - envelope(result) / derivative(result);\n    }\n    return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n\nexport { calcAngularFreq, findSpring, maxDamping, maxDuration, minDamping, minDuration };\n","import { millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorVelocity } from '../utils/velocity.mjs';\nimport { findSpring, calcAngularFreq } from './find.mjs';\n\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n    return keys.some((key) => options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = {\n        velocity: 0.0,\n        stiffness: 100,\n        damping: 10,\n        mass: 1.0,\n        isResolvedFromDuration: false,\n        ...options,\n    };\n    // stiffness/damping/mass overrides duration/bounce\n    if (!isSpringType(options, physicsKeys) &&\n        isSpringType(options, durationKeys)) {\n        const derived = findSpring(options);\n        springOptions = {\n            ...springOptions,\n            ...derived,\n            mass: 1.0,\n        };\n        springOptions.isResolvedFromDuration = true;\n    }\n    return springOptions;\n}\nfunction spring({ keyframes, restDelta, restSpeed, ...options }) {\n    const origin = keyframes[0];\n    const target = keyframes[keyframes.length - 1];\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: origin };\n    const { stiffness, damping, mass, duration, velocity, isResolvedFromDuration, } = getSpringOptions({\n        ...options,\n        velocity: -millisecondsToSeconds(options.velocity || 0),\n    });\n    const initialVelocity = velocity || 0.0;\n    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    const initialDelta = target - origin;\n    const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));\n    /**\n     * If we're working on a granular scale, use smaller defaults for determining\n     * when the spring is finished.\n     *\n     * These defaults have been selected emprically based on what strikes a good\n     * ratio between feeling good and finishing as soon as changes are imperceptible.\n     */\n    const isGranularScale = Math.abs(initialDelta) < 5;\n    restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);\n    restDelta || (restDelta = isGranularScale ? 0.005 : 0.5);\n    let resolveSpring;\n    if (dampingRatio < 1) {\n        const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n        // Underdamped spring\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            return (target -\n                envelope *\n                    (((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) /\n                        angularFreq) *\n                        Math.sin(angularFreq * t) +\n                        initialDelta * Math.cos(angularFreq * t)));\n        };\n    }\n    else if (dampingRatio === 1) {\n        // Critically damped spring\n        resolveSpring = (t) => target -\n            Math.exp(-undampedAngularFreq * t) *\n                (initialDelta +\n                    (initialVelocity + undampedAngularFreq * initialDelta) * t);\n    }\n    else {\n        // Overdamped spring\n        const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            // When performing sinh or cosh values can hit Infinity so we cap them here\n            const freqForT = Math.min(dampedAngularFreq * t, 300);\n            return (target -\n                (envelope *\n                    ((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) *\n                        Math.sinh(freqForT) +\n                        dampedAngularFreq *\n                            initialDelta *\n                            Math.cosh(freqForT))) /\n                    dampedAngularFreq);\n        };\n    }\n    return {\n        calculatedDuration: isResolvedFromDuration ? duration || null : null,\n        next: (t) => {\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                let currentVelocity = initialVelocity;\n                if (t !== 0) {\n                    /**\n                     * We only need to calculate velocity for under-damped springs\n                     * as over- and critically-damped springs can't overshoot, so\n                     * checking only for displacement is enough.\n                     */\n                    if (dampingRatio < 1) {\n                        currentVelocity = calcGeneratorVelocity(resolveSpring, t, current);\n                    }\n                    else {\n                        currentVelocity = 0;\n                    }\n                }\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;\n                state.done =\n                    isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            }\n            else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? target : current;\n            return state;\n        },\n    };\n}\n\nexport { spring };\n","import { spring } from './spring/index.mjs';\nimport { calcGeneratorVelocity } from './utils/velocity.mjs';\n\nfunction inertia({ keyframes, velocity = 0.0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed, }) {\n    const origin = keyframes[0];\n    const state = {\n        done: false,\n        value: origin,\n    };\n    const isOutOfBounds = (v) => (min !== undefined && v < min) || (max !== undefined && v > max);\n    const nearestBoundary = (v) => {\n        if (min === undefined)\n            return max;\n        if (max === undefined)\n            return min;\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    };\n    let amplitude = power * velocity;\n    const ideal = origin + amplitude;\n    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n    /**\n     * If the target has changed we need to re-calculate the amplitude, otherwise\n     * the animation will start from the wrong position.\n     */\n    if (target !== ideal)\n        amplitude = target - origin;\n    const calcDelta = (t) => -amplitude * Math.exp(-t / timeConstant);\n    const calcLatest = (t) => target + calcDelta(t);\n    const applyFriction = (t) => {\n        const delta = calcDelta(t);\n        const latest = calcLatest(t);\n        state.done = Math.abs(delta) <= restDelta;\n        state.value = state.done ? target : latest;\n    };\n    /**\n     * Ideally this would resolve for t in a stateless way, we could\n     * do that by always precalculating the animation but as we know\n     * this will be done anyway we can assume that spring will\n     * be discovered during that.\n     */\n    let timeReachedBoundary;\n    let spring$1;\n    const checkCatchBoundary = (t) => {\n        if (!isOutOfBounds(state.value))\n            return;\n        timeReachedBoundary = t;\n        spring$1 = spring({\n            keyframes: [state.value, nearestBoundary(state.value)],\n            velocity: calcGeneratorVelocity(calcLatest, t, state.value),\n            damping: bounceDamping,\n            stiffness: bounceStiffness,\n            restDelta,\n            restSpeed,\n        });\n    };\n    checkCatchBoundary(0);\n    return {\n        calculatedDuration: null,\n        next: (t) => {\n            /**\n             * We need to resolve the friction to figure out if we need a\n             * spring but we don't want to do this twice per frame. So here\n             * we flag if we updated for this frame and later if we did\n             * we can skip doing it again.\n             */\n            let hasUpdatedFrame = false;\n            if (!spring$1 && timeReachedBoundary === undefined) {\n                hasUpdatedFrame = true;\n                applyFriction(t);\n                checkCatchBoundary(t);\n            }\n            /**\n             * If we have a spring and the provided t is beyond the moment the friction\n             * animation crossed the min/max boundary, use the spring.\n             */\n            if (timeReachedBoundary !== undefined && t > timeReachedBoundary) {\n                return spring$1.next(t - timeReachedBoundary);\n            }\n            else {\n                !hasUpdatedFrame && applyFriction(t);\n                return state;\n            }\n        },\n    };\n}\n\nexport { inertia };\n","import { time } from '../../../frameloop/sync-time.mjs';\nimport { frame, cancelFrame, frameData } from '../../../frameloop/frame.mjs';\n\nconst frameloopDriver = (update) => {\n    const passTimestamp = ({ timestamp }) => update(timestamp);\n    return {\n        start: () => frame.update(passTimestamp, true),\n        stop: () => cancelFrame(passTimestamp),\n        /**\n         * If we're processing this frame we can use the\n         * framelocked timestamp to keep things in sync.\n         */\n        now: () => (frameData.isProcessing ? frameData.timestamp : time.now()),\n    };\n};\n\nexport { frameloopDriver };\n","/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxGeneratorDuration = 20000;\nfunction calcGeneratorDuration(generator) {\n    let duration = 0;\n    const timeStep = 50;\n    let state = generator.next(duration);\n    while (!state.done && duration < maxGeneratorDuration) {\n        duration += timeStep;\n        state = generator.next(duration);\n    }\n    return duration >= maxGeneratorDuration ? Infinity : duration;\n}\n\nexport { calcGeneratorDuration, maxGeneratorDuration };\n","import { keyframes } from '../../generators/keyframes.mjs';\nimport { spring } from '../../generators/spring/index.mjs';\nimport { inertia } from '../../generators/inertia.mjs';\nimport { frameloopDriver } from './driver-frameloop.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorDuration } from '../../generators/utils/calc-duration.mjs';\nimport { invariant } from '../../../utils/errors.mjs';\nimport { mix } from '../../../utils/mix/index.mjs';\nimport { pipe } from '../../../utils/pipe.mjs';\n\nconst types = {\n    decay: inertia,\n    inertia,\n    tween: keyframes,\n    keyframes: keyframes,\n    spring,\n};\nconst percentToProgress = (percent) => percent / 100;\n/**\n * Animate a single value on the main thread.\n *\n * This function is written, where functionality overlaps,\n * to be largely spec-compliant with WAAPI to allow fungibility\n * between the two.\n */\nfunction animateValue({ autoplay = true, delay = 0, driver = frameloopDriver, keyframes: keyframes$1, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", onPlay, onStop, onComplete, onUpdate, ...options }) {\n    let speed = 1;\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Resolve the current Promise every time we enter the\n     * finished state. This is WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let animationDriver;\n    const generatorFactory = types[type] || keyframes;\n    /**\n     * If this isn't the keyframes generator and we've been provided\n     * strings as keyframes, we need to interpolate these.\n     */\n    let mapNumbersToKeyframes;\n    if (generatorFactory !== keyframes &&\n        typeof keyframes$1[0] !== \"number\") {\n        if (process.env.NODE_ENV !== \"production\") {\n            invariant(keyframes$1.length === 2, `Only two keyframes currently supported with spring and inertia animations. Trying to animate ${keyframes$1}`);\n        }\n        mapNumbersToKeyframes = pipe(percentToProgress, mix(keyframes$1[0], keyframes$1[1]));\n        keyframes$1 = [0, 100];\n    }\n    const generator = generatorFactory({ ...options, keyframes: keyframes$1 });\n    let mirroredGenerator;\n    if (repeatType === \"mirror\") {\n        mirroredGenerator = generatorFactory({\n            ...options,\n            keyframes: [...keyframes$1].reverse(),\n            velocity: -(options.velocity || 0),\n        });\n    }\n    let playState = \"idle\";\n    let holdTime = null;\n    let startTime = null;\n    let cancelTime = null;\n    /**\n     * If duration is undefined and we have repeat options,\n     * we need to calculate a duration from the generator.\n     *\n     * We set it to the generator itself to cache the duration.\n     * Any timeline resolver will need to have already precalculated\n     * the duration by this step.\n     */\n    if (generator.calculatedDuration === null && repeat) {\n        generator.calculatedDuration = calcGeneratorDuration(generator);\n    }\n    const { calculatedDuration } = generator;\n    let resolvedDuration = Infinity;\n    let totalDuration = Infinity;\n    if (calculatedDuration !== null) {\n        resolvedDuration = calculatedDuration + repeatDelay;\n        totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n    }\n    let currentTime = 0;\n    const tick = (timestamp) => {\n        if (startTime === null)\n            return;\n        /**\n         * requestAnimationFrame timestamps can come through as lower than\n         * the startTime as set by performance.now(). Here we prevent this,\n         * though in the future it could be possible to make setting startTime\n         * a pending operation that gets resolved here.\n         */\n        if (speed > 0)\n            startTime = Math.min(startTime, timestamp);\n        if (speed < 0)\n            startTime = Math.min(timestamp - totalDuration / speed, startTime);\n        if (holdTime !== null) {\n            currentTime = holdTime;\n        }\n        else {\n            // Rounding the time because floating point arithmetic is not always accurate, e.g. 3000.367 - 1000.367 =\n            // 2000.0000000000002. This is a problem when we are comparing the currentTime with the duration, for\n            // example.\n            currentTime = Math.round(timestamp - startTime) * speed;\n        }\n        // Rebase on delay\n        const timeWithoutDelay = currentTime - delay * (speed >= 0 ? 1 : -1);\n        const isInDelayPhase = speed >= 0 ? timeWithoutDelay < 0 : timeWithoutDelay > totalDuration;\n        currentTime = Math.max(timeWithoutDelay, 0);\n        /**\n         * If this animation has finished, set the current time\n         * to the total duration.\n         */\n        if (playState === \"finished\" && holdTime === null) {\n            currentTime = totalDuration;\n        }\n        let elapsed = currentTime;\n        let frameGenerator = generator;\n        if (repeat) {\n            /**\n             * Get the current progress (0-1) of the animation. If t is >\n             * than duration we'll get values like 2.5 (midway through the\n             * third iteration)\n             */\n            const progress = Math.min(currentTime, totalDuration) / resolvedDuration;\n            /**\n             * Get the current iteration (0 indexed). For instance the floor of\n             * 2.5 is 2.\n             */\n            let currentIteration = Math.floor(progress);\n            /**\n             * Get the current progress of the iteration by taking the remainder\n             * so 2.5 is 0.5 through iteration 2\n             */\n            let iterationProgress = progress % 1.0;\n            /**\n             * If iteration progress is 1 we count that as the end\n             * of the previous iteration.\n             */\n            if (!iterationProgress && progress >= 1) {\n                iterationProgress = 1;\n            }\n            iterationProgress === 1 && currentIteration--;\n            currentIteration = Math.min(currentIteration, repeat + 1);\n            /**\n             * Reverse progress if we're not running in \"normal\" direction\n             */\n            const isOddIteration = Boolean(currentIteration % 2);\n            if (isOddIteration) {\n                if (repeatType === \"reverse\") {\n                    iterationProgress = 1 - iterationProgress;\n                    if (repeatDelay) {\n                        iterationProgress -= repeatDelay / resolvedDuration;\n                    }\n                }\n                else if (repeatType === \"mirror\") {\n                    frameGenerator = mirroredGenerator;\n                }\n            }\n            elapsed = clamp(0, 1, iterationProgress) * resolvedDuration;\n        }\n        /**\n         * If we're in negative time, set state as the initial keyframe.\n         * This prevents delay: x, duration: 0 animations from finishing\n         * instantly.\n         */\n        const state = isInDelayPhase\n            ? { done: false, value: keyframes$1[0] }\n            : frameGenerator.next(elapsed);\n        if (mapNumbersToKeyframes) {\n            state.value = mapNumbersToKeyframes(state.value);\n        }\n        let { done } = state;\n        if (!isInDelayPhase && calculatedDuration !== null) {\n            done = speed >= 0 ? currentTime >= totalDuration : currentTime <= 0;\n        }\n        const isAnimationFinished = holdTime === null &&\n            (playState === \"finished\" || (playState === \"running\" && done));\n        if (onUpdate) {\n            onUpdate(state.value);\n        }\n        if (isAnimationFinished) {\n            finish();\n        }\n        return state;\n    };\n    const stopAnimationDriver = () => {\n        animationDriver && animationDriver.stop();\n        animationDriver = undefined;\n    };\n    const cancel = () => {\n        playState = \"idle\";\n        stopAnimationDriver();\n        resolveFinishedPromise();\n        updateFinishedPromise();\n        startTime = cancelTime = null;\n    };\n    const finish = () => {\n        playState = \"finished\";\n        onComplete && onComplete();\n        stopAnimationDriver();\n        resolveFinishedPromise();\n    };\n    const play = () => {\n        if (hasStopped)\n            return;\n        if (!animationDriver)\n            animationDriver = driver(tick);\n        const now = animationDriver.now();\n        onPlay && onPlay();\n        if (holdTime !== null) {\n            startTime = now - holdTime;\n        }\n        else if (!startTime || playState === \"finished\") {\n            startTime = now;\n        }\n        if (playState === \"finished\") {\n            updateFinishedPromise();\n        }\n        cancelTime = startTime;\n        holdTime = null;\n        /**\n         * Set playState to running only after we've used it in\n         * the previous logic.\n         */\n        playState = \"running\";\n        animationDriver.start();\n    };\n    if (autoplay) {\n        play();\n    }\n    const controls = {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        get time() {\n            return millisecondsToSeconds(currentTime);\n        },\n        set time(newTime) {\n            newTime = secondsToMilliseconds(newTime);\n            currentTime = newTime;\n            if (holdTime !== null || !animationDriver || speed === 0) {\n                holdTime = newTime;\n            }\n            else {\n                startTime = animationDriver.now() - newTime / speed;\n            }\n        },\n        get duration() {\n            const duration = generator.calculatedDuration === null\n                ? calcGeneratorDuration(generator)\n                : generator.calculatedDuration;\n            return millisecondsToSeconds(duration);\n        },\n        get speed() {\n            return speed;\n        },\n        set speed(newSpeed) {\n            if (newSpeed === speed || !animationDriver)\n                return;\n            speed = newSpeed;\n            controls.time = millisecondsToSeconds(currentTime);\n        },\n        get state() {\n            return playState;\n        },\n        play,\n        pause: () => {\n            playState = \"paused\";\n            holdTime = currentTime;\n        },\n        stop: () => {\n            hasStopped = true;\n            if (playState === \"idle\")\n                return;\n            playState = \"idle\";\n            onStop && onStop();\n            cancel();\n        },\n        cancel: () => {\n            if (cancelTime !== null)\n                tick(cancelTime);\n            cancel();\n        },\n        complete: () => {\n            playState = \"finished\";\n        },\n        sample: (elapsed) => {\n            startTime = 0;\n            return tick(elapsed);\n        },\n    };\n    return controls;\n}\n\nexport { animateValue };\n","function memo(callback) {\n    let result;\n    return () => {\n        if (result === undefined)\n            result = callback();\n        return result;\n    };\n}\n\nexport { memo };\n","import { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { animateValue } from '../js/index.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { memo } from '../../../utils/memo.mjs';\nimport { noop } from '../../../utils/noop.mjs';\nimport { frame, cancelFrame } from '../../../frameloop/frame.mjs';\n\nconst supportsWaapi = memo(() => Object.hasOwnProperty.call(Element.prototype, \"animate\"));\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\n    \"opacity\",\n    \"clipPath\",\n    \"filter\",\n    \"transform\",\n]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nconst requiresPregeneratedKeyframes = (valueName, options) => options.type === \"spring\" ||\n    valueName === \"backgroundColor\" ||\n    !isWaapiSupportedEasing(options.ease);\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    const canAccelerateAnimation = supportsWaapi() &&\n        acceleratedValues.has(valueName) &&\n        !options.repeatDelay &&\n        options.repeatType !== \"mirror\" &&\n        options.damping !== 0 &&\n        options.type !== \"inertia\";\n    if (!canAccelerateAnimation)\n        return false;\n    /**\n     * TODO: Unify with js/index\n     */\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Cancelling an animation will write to the DOM. For safety we want to defer\n     * this until the next `update` frame lifecycle. This flag tracks whether we\n     * have a pending cancel, if so we shouldn't allow animations to finish.\n     */\n    let pendingCancel = false;\n    /**\n     * Resolve the current Promise every time we enter the\n     * finished state. This is WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let { keyframes, duration = 300, ease, times } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (requiresPregeneratedKeyframes(valueName, options)) {\n        const sampleAnimation = animateValue({\n            ...options,\n            repeat: 0,\n            delay: 0,\n        });\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        /**\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\n         * we're heading for an infinite loop.\n         */\n        let t = 0;\n        while (!state.done && t < maxDuration) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        times = undefined;\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n        times,\n    });\n    const cancelAnimation = () => {\n        pendingCancel = false;\n        animation.cancel();\n    };\n    const safeCancel = () => {\n        pendingCancel = true;\n        frame.update(cancelAnimation);\n        resolveFinishedPromise();\n        updateFinishedPromise();\n    };\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        if (pendingCancel)\n            return;\n        value.set(getFinalKeyframe(keyframes, options));\n        onComplete && onComplete();\n        safeCancel();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    const controls = {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        attachTimeline(timeline) {\n            animation.timeline = timeline;\n            animation.onfinish = null;\n            return noop;\n        },\n        get time() {\n            return millisecondsToSeconds(animation.currentTime || 0);\n        },\n        set time(newTime) {\n            animation.currentTime = secondsToMilliseconds(newTime);\n        },\n        get speed() {\n            return animation.playbackRate;\n        },\n        set speed(newSpeed) {\n            animation.playbackRate = newSpeed;\n        },\n        get duration() {\n            return millisecondsToSeconds(duration);\n        },\n        play: () => {\n            if (hasStopped)\n                return;\n            animation.play();\n            /**\n             * Cancel any pending cancel tasks\n             */\n            cancelFrame(cancelAnimation);\n        },\n        pause: () => animation.pause(),\n        stop: () => {\n            hasStopped = true;\n            if (animation.playState === \"idle\")\n                return;\n            /**\n             * WAAPI doesn't natively have any interruption capabilities.\n             *\n             * Rather than read commited styles back out of the DOM, we can\n             * create a renderless JS animation and sample it twice to calculate\n             * its current value, \"previous\" value, and therefore allow\n             * Motion to calculate velocity for any subsequent animation.\n             */\n            const { currentTime } = animation;\n            if (currentTime) {\n                const sampleAnimation = animateValue({\n                    ...options,\n                    autoplay: false,\n                });\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n            }\n            safeCancel();\n        },\n        complete: () => {\n            if (pendingCancel)\n                return;\n            animation.finish();\n        },\n        cancel: safeCancel,\n    };\n    return controls;\n}\n\nexport { createAcceleratedAnimation };\n","import { animateValue } from './js/index.mjs';\nimport { noop } from '../../utils/noop.mjs';\n\nfunction createInstantAnimation({ keyframes, delay, onUpdate, onComplete, }) {\n    const setValue = () => {\n        onUpdate && onUpdate(keyframes[keyframes.length - 1]);\n        onComplete && onComplete();\n        /**\n         * TODO: As this API grows it could make sense to always return\n         * animateValue. This will be a bigger project as animateValue\n         * is frame-locked whereas this function resolves instantly.\n         * This is a behavioural change and also has ramifications regarding\n         * assumptions within tests.\n         */\n        return {\n            time: 0,\n            speed: 1,\n            duration: 0,\n            play: (noop),\n            pause: (noop),\n            stop: (noop),\n            then: (resolve) => {\n                resolve();\n                return Promise.resolve();\n            },\n            cancel: (noop),\n            complete: (noop),\n        };\n    };\n    return delay\n        ? animateValue({\n            keyframes: [0, 1],\n            duration: 0,\n            delay,\n            onComplete: setValue,\n        })\n        : setValue();\n}\n\nexport { createInstantAnimation };\n","import { transformProps } from '../../render/html/utils/transform.mjs';\n\nconst underDampedSpring = {\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10,\n};\nconst criticallyDampedSpring = (target) => ({\n    type: \"spring\",\n    stiffness: 550,\n    damping: target === 0 ? 2 * Math.sqrt(550) : 30,\n    restSpeed: 10,\n});\nconst keyframesTransition = {\n    type: \"keyframes\",\n    duration: 0.8,\n};\n/**\n * Default easing curve is a slightly shallower version of\n * the default browser easing curve.\n */\nconst ease = {\n    type: \"keyframes\",\n    ease: [0.25, 0.1, 0.35, 1],\n    duration: 0.3,\n};\nconst getDefaultTransition = (valueKey, { keyframes }) => {\n    if (keyframes.length > 2) {\n        return keyframesTransition;\n    }\n    else if (transformProps.has(valueKey)) {\n        return valueKey.startsWith(\"scale\")\n            ? criticallyDampedSpring(keyframes[1])\n            : underDampedSpring;\n    }\n    return ease;\n};\n\nexport { getDefaultTransition };\n","import { complex } from '../../value/types/complex/index.mjs';\n\n/**\n * Check if a value is animatable. Examples:\n *\n * ✅: 100, \"100px\", \"#fff\"\n * ❌: \"block\", \"url(2.jpg)\"\n * @param value\n *\n * @internal\n */\nconst isAnimatable = (key, value) => {\n    // If the list of keys tat might be non-animatable grows, replace with Set\n    if (key === \"zIndex\")\n        return false;\n    // If it's a number or a keyframes array, we can animate it. We might at some point\n    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,\n    // but for now lets leave it like this for performance reasons\n    if (typeof value === \"number\" || Array.isArray(value))\n        return true;\n    if (typeof value === \"string\" && // It's animatable if we have a string\n        (complex.test(value) || value === \"0\") && // And it contains numbers and/or colors\n        !value.startsWith(\"url(\") // Unless it starts with \"url(\"\n    ) {\n        return true;\n    }\n    return false;\n};\n\nexport { isAnimatable };\n","import { complex } from './index.mjs';\nimport { floatRegex } from '../utils.mjs';\n\n/**\n * Properties that should default to 1 or 100%\n */\nconst maxDefaults = new Set([\"brightness\", \"contrast\", \"saturate\", \"opacity\"]);\nfunction applyDefaultFilter(v) {\n    const [name, value] = v.slice(0, -1).split(\"(\");\n    if (name === \"drop-shadow\")\n        return v;\n    const [number] = value.match(floatRegex) || [];\n    if (!number)\n        return v;\n    const unit = value.replace(number, \"\");\n    let defaultValue = maxDefaults.has(name) ? 1 : 0;\n    if (number !== value)\n        defaultValue *= 100;\n    return name + \"(\" + defaultValue + unit + \")\";\n}\nconst functionRegex = /([a-z-]*)\\(.*?\\)/g;\nconst filter = {\n    ...complex,\n    getAnimatableNone: (v) => {\n        const functions = v.match(functionRegex);\n        return functions ? functions.map(applyDefaultFilter).join(\" \") : v;\n    },\n};\n\nexport { filter };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { numberValueTypes } from './number.mjs';\n\n/**\n * A map of default value types for common values\n */\nconst defaultValueTypes = {\n    ...numberValueTypes,\n    // Color props\n    color,\n    backgroundColor: color,\n    outlineColor: color,\n    fill: color,\n    stroke: color,\n    // Border props\n    borderColor: color,\n    borderTopColor: color,\n    borderRightColor: color,\n    borderBottomColor: color,\n    borderLeftColor: color,\n    filter,\n    WebkitFilter: filter,\n};\n/**\n * Gets the default ValueType for the provided value key\n */\nconst getDefaultValueType = (key) => defaultValueTypes[key];\n\nexport { defaultValueTypes, getDefaultValueType };\n","import { complex } from '../../../value/types/complex/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { getDefaultValueType } from './defaults.mjs';\n\nfunction getAnimatableNone(key, value) {\n    let defaultValueType = getDefaultValueType(key);\n    if (defaultValueType !== filter)\n        defaultValueType = complex;\n    // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n    return defaultValueType.getAnimatableNone\n        ? defaultValueType.getAnimatableNone(value)\n        : undefined;\n}\n\nexport { getAnimatableNone };\n","/**\n * Check if the value is a zero value string like \"0px\" or \"0%\"\n */\nconst isZeroValueString = (v) => /^0[^.\\s]+$/.test(v);\n\nexport { isZeroValueString };\n","import { isZeroValueString } from '../../utils/is-zero-value-string.mjs';\n\nfunction isNone(value) {\n    if (typeof value === \"number\") {\n        return value === 0;\n    }\n    else if (value !== null) {\n        return value === \"none\" || value === \"0\" || isZeroValueString(value);\n    }\n}\n\nexport { isNone };\n","import { getAnimatableNone } from '../../render/dom/value-types/animatable-none.mjs';\nimport { isAnimatable } from './is-animatable.mjs';\nimport { isNone } from './is-none.mjs';\n\nfunction getKeyframes(value, valueName, target, transition) {\n    const isTargetAnimatable = isAnimatable(valueName, target);\n    let keyframes;\n    if (Array.isArray(target)) {\n        keyframes = [...target];\n    }\n    else {\n        keyframes = [null, target];\n    }\n    const defaultOrigin = transition.from !== undefined ? transition.from : value.get();\n    let animatableTemplateValue = undefined;\n    const noneKeyframeIndexes = [];\n    for (let i = 0; i < keyframes.length; i++) {\n        /**\n         * Fill null/wildcard keyframes\n         */\n        if (keyframes[i] === null) {\n            keyframes[i] = i === 0 ? defaultOrigin : keyframes[i - 1];\n        }\n        if (isNone(keyframes[i])) {\n            noneKeyframeIndexes.push(i);\n        }\n        // TODO: Clean this conditional, it works for now\n        if (typeof keyframes[i] === \"string\" &&\n            keyframes[i] !== \"none\" &&\n            keyframes[i] !== \"0\") {\n            animatableTemplateValue = keyframes[i];\n        }\n    }\n    if (isTargetAnimatable &&\n        noneKeyframeIndexes.length &&\n        animatableTemplateValue) {\n        for (let i = 0; i < noneKeyframeIndexes.length; i++) {\n            const index = noneKeyframeIndexes[i];\n            keyframes[index] = getAnimatableNone(valueName, animatableTemplateValue);\n        }\n    }\n    return keyframes;\n}\n\nexport { getKeyframes };\n","/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */\nfunction isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {\n    return !!Object.keys(transition).length;\n}\nfunction getValueTransition(transition, key) {\n    return transition[key] || transition[\"default\"] || transition;\n}\n\nexport { getValueTransition, isTransitionDefined };\n","import { warning } from '../../utils/errors.mjs';\nimport { secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { createAcceleratedAnimation } from '../animators/waapi/create-accelerated-animation.mjs';\nimport { createInstantAnimation } from '../animators/instant.mjs';\nimport { getDefaultTransition } from '../utils/default-transitions.mjs';\nimport { isAnimatable } from '../utils/is-animatable.mjs';\nimport { getKeyframes } from '../utils/keyframes.mjs';\nimport { getValueTransition, isTransitionDefined } from '../utils/transitions.mjs';\nimport { animateValue } from '../animators/js/index.mjs';\nimport { MotionGlobalConfig } from '../../utils/GlobalConfig.mjs';\n\nconst animateMotionValue = (valueName, value, target, transition = {}) => {\n    return (onComplete) => {\n        const valueTransition = getValueTransition(transition, valueName) || {};\n        /**\n         * Most transition values are currently completely overwritten by value-specific\n         * transitions. In the future it'd be nicer to blend these transitions. But for now\n         * delay actually does inherit from the root transition if not value-specific.\n         */\n        const delay = valueTransition.delay || transition.delay || 0;\n        /**\n         * Elapsed isn't a public transition option but can be passed through from\n         * optimized appear effects in milliseconds.\n         */\n        let { elapsed = 0 } = transition;\n        elapsed = elapsed - secondsToMilliseconds(delay);\n        const keyframes = getKeyframes(value, valueName, target, valueTransition);\n        /**\n         * Check if we're able to animate between the start and end keyframes,\n         * and throw a warning if we're attempting to animate between one that's\n         * animatable and another that isn't.\n         */\n        const originKeyframe = keyframes[0];\n        const targetKeyframe = keyframes[keyframes.length - 1];\n        const isOriginAnimatable = isAnimatable(valueName, originKeyframe);\n        const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);\n        warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from \"${originKeyframe}\" to \"${targetKeyframe}\". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \\`style\\` property.`);\n        let options = {\n            keyframes,\n            velocity: value.getVelocity(),\n            ease: \"easeOut\",\n            ...valueTransition,\n            delay: -elapsed,\n            onUpdate: (v) => {\n                value.set(v);\n                valueTransition.onUpdate && valueTransition.onUpdate(v);\n            },\n            onComplete: () => {\n                onComplete();\n                valueTransition.onComplete && valueTransition.onComplete();\n            },\n        };\n        /**\n         * If there's no transition defined for this value, we can generate\n         * unqiue transition settings for this value.\n         */\n        if (!isTransitionDefined(valueTransition)) {\n            options = {\n                ...options,\n                ...getDefaultTransition(valueName, options),\n            };\n        }\n        /**\n         * Both WAAPI and our internal animation functions use durations\n         * as defined by milliseconds, while our external API defines them\n         * as seconds.\n         */\n        if (options.duration) {\n            options.duration = secondsToMilliseconds(options.duration);\n        }\n        if (options.repeatDelay) {\n            options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n        }\n        if (!isOriginAnimatable ||\n            !isTargetAnimatable ||\n            instantAnimationState.current ||\n            valueTransition.type === false ||\n            MotionGlobalConfig.skipAnimations) {\n            /**\n             * If we can't animate this value, or the global instant animation flag is set,\n             * or this is simply defined as an instant transition, return an instant transition.\n             */\n            return createInstantAnimation(instantAnimationState.current\n                ? { ...options, delay: 0 }\n                : options);\n        }\n        /**\n         * Animate via WAAPI if possible.\n         */\n        if (\n        /**\n         * If this is a handoff animation, the optimised animation will be running via\n         * WAAPI. Therefore, this animation must be JS to ensure it runs \"under\" the\n         * optimised animation.\n         */\n        !transition.isHandoff &&\n            value.owner &&\n            value.owner.current instanceof HTMLElement &&\n            /**\n             * If we're outputting values to onUpdate then we can't use WAAPI as there's\n             * no way to read the value from WAAPI every frame.\n             */\n            !value.owner.getProps().onUpdate) {\n            const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);\n            if (acceleratedAnimation)\n                return acceleratedAnimation;\n        }\n        /**\n         * If we didn't create an accelerated animation, create a JS animation\n         */\n        return animateValue(options);\n    };\n};\n\nexport { animateMotionValue };\n","import { isMotionValue } from '../utils/is-motion-value.mjs';\n\nfunction isWillChangeMotionValue(value) {\n    return Boolean(isMotionValue(value) && value.add);\n}\n\nexport { isWillChangeMotionValue };\n","/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */\nconst isNumericalString = (v) => /^\\-?\\d*\\.?\\d+$/.test(v);\n\nexport { isNumericalString };\n","/**\n * Tests a provided value against a ValueType\n */\nconst testValueType = (v) => (type) => type.test(v);\n\nexport { testValueType };\n","/**\n * ValueType for \"auto\"\n */\nconst auto = {\n    test: (v) => v === \"auto\",\n    parse: (v) => v,\n};\n\nexport { auto };\n","import { number } from '../../../value/types/numbers/index.mjs';\nimport { px, percent, degrees, vw, vh } from '../../../value/types/numbers/units.mjs';\nimport { testValueType } from './test.mjs';\nimport { auto } from './type-auto.mjs';\n\n/**\n * A list of value types commonly used for dimensions\n */\nconst dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */\nconst findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));\n\nexport { dimensionValueTypes, findDimensionValueType };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { complex } from '../../../value/types/complex/index.mjs';\nimport { dimensionValueTypes } from './dimensions.mjs';\nimport { testValueType } from './test.mjs';\n\n/**\n * A list of all ValueTypes\n */\nconst valueTypes = [...dimensionValueTypes, color, complex];\n/**\n * Tests a value against the list of ValueTypes\n */\nconst findValueType = (v) => valueTypes.find(testValueType(v));\n\nexport { findValueType };\n","import { isNumericalString } from '../../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../../utils/is-zero-value-string.mjs';\nimport { resolveFinalValueInKeyframes } from '../../utils/resolve-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\nimport { getAnimatableNone } from '../dom/value-types/animatable-none.mjs';\nimport { findValueType } from '../dom/value-types/find.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {};\n    target = { ...target, ...transitionEnd };\n    for (const key in target) {\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [...variantLabels].reverse();\n    reversedLabels.forEach((key) => {\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        if (visualElement.variantChildren) {\n            visualElement.variantChildren.forEach((child) => {\n                setVariants(child, variantLabels);\n            });\n        }\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\nfunction checkTargetForNewValues(visualElement, target, origin) {\n    var _a, _b;\n    const newValueKeys = Object.keys(target).filter((key) => !visualElement.hasValue(key));\n    const numNewValues = newValueKeys.length;\n    if (!numNewValues)\n        return;\n    for (let i = 0; i < numNewValues; i++) {\n        const key = newValueKeys[i];\n        const targetValue = target[key];\n        let value = null;\n        /**\n         * If the target is a series of keyframes, we can use the first value\n         * in the array. If this first value is null, we'll still need to read from the DOM.\n         */\n        if (Array.isArray(targetValue)) {\n            value = targetValue[0];\n        }\n        /**\n         * If the target isn't keyframes, or the first keyframe was null, we need to\n         * first check if an origin value was explicitly defined in the transition as \"from\",\n         * if not read the value from the DOM. As an absolute fallback, take the defined target value.\n         */\n        if (value === null) {\n            value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];\n        }\n        /**\n         * If value is still undefined or null, ignore it. Preferably this would throw,\n         * but this was causing issues in Framer.\n         */\n        if (value === undefined || value === null)\n            continue;\n        if (typeof value === \"string\" &&\n            (isNumericalString(value) || isZeroValueString(value))) {\n            // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n            value = parseFloat(value);\n        }\n        else if (!findValueType(value) && complex.test(targetValue)) {\n            value = getAnimatableNone(key, targetValue);\n        }\n        visualElement.addValue(key, motionValue(value, { owner: visualElement }));\n        if (origin[key] === undefined) {\n            origin[key] = value;\n        }\n        if (value !== null)\n            visualElement.setBaseTarget(key, value);\n    }\n}\nfunction getOriginFromTransition(key, transition) {\n    if (!transition)\n        return;\n    const valueTransition = transition[key] || transition[\"default\"] || transition;\n    return valueTransition.from;\n}\nfunction getOrigin(target, transition, visualElement) {\n    const origin = {};\n    for (const key in target) {\n        const transitionOrigin = getOriginFromTransition(key, transition);\n        if (transitionOrigin !== undefined) {\n            origin[key] = transitionOrigin;\n        }\n        else {\n            const value = visualElement.getValue(key);\n            if (value) {\n                origin[key] = value.get();\n            }\n        }\n    }\n    return origin;\n}\n\nexport { checkTargetForNewValues, getOrigin, getOriginFromTransition, setTarget, setValues };\n","import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/transitions.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction hasKeyframesChanged(value, target) {\n    const current = value.get();\n    if (Array.isArray(target)) {\n        for (let i = 0; i < target.length; i++) {\n            if (target[i] !== current)\n                return true;\n        }\n    }\n    else {\n        return current !== target;\n    }\n}\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            elapsed: 0,\n            ...getValueTransition(transition || {}, key),\n        };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        if (window.HandoffAppearAnimations) {\n            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n            if (appearId) {\n                const elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n                if (elapsed !== null) {\n                    valueTransition.elapsed = elapsed;\n                    valueTransition.isHandoff = true;\n                }\n            }\n        }\n        let canSkip = !valueTransition.isHandoff &&\n            !hasKeyframesChanged(value, valueTarget);\n        if (valueTransition.type === \"spring\" &&\n            (value.getVelocity() || valueTransition.velocity)) {\n            canSkip = false;\n        }\n        /**\n         * Temporarily disable skipping animations if there's an animation in\n         * progress. Better would be to track the current target of a value\n         * and compare that against valueTarget.\n         */\n        if (value.animation) {\n            canSkip = false;\n        }\n        if (canSkip)\n            continue;\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition));\n        const animation = value.animation;\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation.then(() => willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            transitionEnd && setTarget(visualElement, transitionEnd);\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\n\nfunction animateVariant(visualElement, variant, options = {}) {\n    const resolved = resolveVariant(visualElement, variant, options.custom);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => Promise.all(animateTarget(visualElement, resolved, options))\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(() => last());\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1\n        ? (i = 0) => i * staggerChildren\n        : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n\nexport { animateVariant, sortByTreeOrder };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\nimport { animateVariant } from './visual-element-variant.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));\n    }\n    return animation.then(() => visualElement.notify(\"AnimationComplete\", definition));\n}\n\nexport { animateVisualElement };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { variantPriorityOrder } from './variant-props.mjs';\nimport { animateVisualElement } from '../../animation/interfaces/visual-element.mjs';\n\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    const state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (acc, definition) => {\n        const resolved = resolveVariant(visualElement, definition);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(options, changedActiveType) {\n        const props = visualElement.getProps();\n        const context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined ? props[type] : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            let handledRemovedValues = false;\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                if (removedKeys.has(key)) {\n                    handledRemovedValues = true;\n                    removedKeys.delete(key);\n                }\n                typeState.needsAnimating[key] = true;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                let valueHasChanged = false;\n                if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                    valueHasChanged = !shallowCompare(next, prev);\n                }\n                else {\n                    valueHasChanged = next !== prev;\n                }\n                if (valueHasChanged) {\n                    if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             */\n            if (shouldAnimateType && (!isInherited || handledRemovedValues)) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type, ...options },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation[key] = fallbackTarget;\n                }\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            (props.initial === false || props.initial === props.animate) &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        const animations = animateChanges(options, type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState };\n","import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */\n    constructor(node) {\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        this.unmount();\n        if (isAnimationControls(animate)) {\n            this.unmount = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n    mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() { }\n}\n\nexport { AnimationFeature };\n","import { Feature } from '../Feature.mjs';\n\nlet id = 0;\nclass ExitAnimationFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.id = id++;\n    }\n    update() {\n        if (!this.node.presenceContext)\n            return;\n        const { isPresent, onExitComplete, custom } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent, { custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom });\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(() => onExitComplete(this.id));\n        }\n    }\n    mount() {\n        const { register } = this.node.presenceContext || {};\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() { }\n}\n\nexport { ExitAnimationFeature };\n","import { AnimationFeature } from './animation/index.mjs';\nimport { ExitAnimationFeature } from './animation/exit.mjs';\n\nconst animations = {\n    animation: {\n        Feature: AnimationFeature,\n    },\n    exit: {\n        Feature: ExitAnimationFeature,\n    },\n};\n\nexport { animations };\n","const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { extractEventInfo } from '../../events/event-info.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../utils/time-conversion.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\nimport { isPrimaryPointer } from '../../events/utils/is-primary-pointer.mjs';\nimport { frame, cancelFrame, frameData } from '../../frameloop/frame.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint, contextWindow, dragSnapToOrigin = false } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        /**\n         * @internal\n         */\n        this.contextWindow = window;\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            const { onEnd, onSessionEnd, resumeAnimation } = this.handlers;\n            if (this.dragSnapToOrigin)\n                resumeAnimation && resumeAnimation();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.dragSnapToOrigin = dragSnapToOrigin;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        this.contextWindow = contextWindow || window;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(this.contextWindow, \"pointermove\", this.handlePointerMove), addPointerEvent(this.contextWindow, \"pointerup\", this.handlePointerUp), addPointerEvent(this.contextWindow, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","import { mixNumber } from '../../utils/mix/number.mjs';\n\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target = 0, maxDistance = 0.01) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mixNumber(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale))\n        delta.scale = 1;\n    delta.translate =\n        mixNumber(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate) || isNaN(delta.translate))\n        delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","import { progress } from '../../../utils/progress.mjs';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { mixNumber } from '../../../utils/mix/number.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(min, point, elastic.min)\n            : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(max, point, elastic.max)\n            : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","const createAxisDelta = () => ({\n    translate: 0,\n    scale: 1,\n    origin: 0,\n    originPoint: 0,\n});\nconst createDelta = () => ({\n    x: createAxisDelta(),\n    y: createAxisDelta(),\n});\nconst createAxis = () => ({ min: 0, max: 0 });\nconst createBox = () => ({\n    x: createAxis(),\n    y: createAxis(),\n});\n\nexport { createAxis, createAxisDelta, createBox, createDelta };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */\nfunction convertBoundingBoxToBox({ top, left, right, bottom, }) {\n    return {\n        x: { min: left, max: right },\n        y: { min: top, max: bottom },\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return { top: y.min, right: x.max, bottom: y.max, left: x.min };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */\nfunction transformBoxPoints(point, transformPoint) {\n    if (!transformPoint)\n        return point;\n    const topLeft = transformPoint({ x: point.left, y: point.top });\n    const bottomRight = transformPoint({ x: point.right, y: point.bottom });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x,\n    };\n}\n\nexport { convertBoundingBoxToBox, convertBoxToBoundingBox, transformBoxPoints };\n","function isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return (!isIdentityScale(scale) ||\n        !isIdentityScale(scaleX) ||\n        !isIdentityScale(scaleY));\n}\nfunction hasTransform(values) {\n    return (hasScale(values) ||\n        has2DTranslate(values) ||\n        values.z ||\n        values.rotate ||\n        values.rotateX ||\n        values.rotateY);\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\nexport { has2DTranslate, hasScale, hasTransform };\n","import { mixNumber } from '../../utils/mix/number.mjs';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */\n        const instance = node.instance;\n        if (instance &&\n            instance.style &&\n            instance.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    treeScale.x = snapToDefault(treeScale.x);\n    treeScale.y = snapToDefault(treeScale.y);\n}\nfunction snapToDefault(scale) {\n    if (Number.isInteger(scale))\n        return scale;\n    return scale > 1.0000000000001 || scale < 0.999999999999 ? scale : 1;\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, transforms, [key, scaleKey, originKey]) {\n    const axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n    const originPoint = mixNumber(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform, xKeys);\n    transformAxis(box.y, transform, yKeys);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n","import { convertBoundingBoxToBox, transformBoxPoints } from '../geometry/conversion.mjs';\nimport { translateAxis } from '../geometry/delta-apply.mjs';\n\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\nexport { measurePageBox, measureViewportBox };\n","// Fixes https://github.com/framer/motion/issues/2270\nconst getContextWindow = ({ current }) => {\n    return current ? current.ownerDocument.defaultView : null;\n};\n\nexport { getContextWindow };\n","import { invariant } from '../../utils/errors.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, calcOrigin } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            const { dragSnapToOrigin } = this.getProps();\n            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.update(() => onDragStart(event, info), false, true);\n            }\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        const resumeAnimation = () => eachAxis((axis) => {\n            var _a;\n            return this.getAnimationState(axis) === \"paused\" &&\n                ((_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());\n        });\n        const { dragSnapToOrigin } = this.getProps();\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n            resumeAnimation,\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            dragSnapToOrigin,\n            contextWindow: getContextWindow(this.visualElement),\n        });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.update(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        var _a;\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection &&\n            !this.visualElement.projection.layout\n            ? this.visualElement.projection.measure(false)\n            : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    pauseAnimation() {\n        eachAxis((axis) => { var _a; return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause(); });\n    }\n    getAnimationState(axis) {\n        var _a;\n        return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mixNumber(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mixNumber(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = noop;\n        this.removeListeners = noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nexport { DragGesture };\n","import { PanSession } from './PanSession.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        frame.update(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {\n            transformPagePoint: this.node.getTransformPagePoint(),\n            contextWindow: getContextWindow(this.node),\n        });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    frame.update(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n","import { useContext, useId, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => register(id), []);\n    const safeToRemove = () => onExitComplete && onExitComplete(id);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { px } from '../../value/types/numbers/units.mjs';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { mixNumber } from '../../utils/mix/number.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mixNumber(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n","import React__default, { useContext } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\nimport { microtask } from '../../../frameloop/microtask.mjs';\nimport { frame } from '../../../frameloop/frame.mjs';\n\nclass MeasureLayoutWithContext extends React__default.Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                frame.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            microtask.postRender(() => {\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (React__default.createElement(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","import { circOut } from '../../easing/circ.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { percent, px } from '../../value/types/numbers/units.mjs';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mixNumber(0, \n        // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = mixNumber(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mixNumber(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mixNumber(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mixNumber(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = compress(0, 0.5, circOut);\nconst easeCrossfadeOut = compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n\nexport { copyAxisInto, copyBoxInto };\n","import { mixNumber } from '../../utils/mix/number.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mixNumber(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mixNumber(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n    return (a.x.min === b.x.min &&\n        a.x.max === b.x.max &&\n        a.y.min === b.y.min &&\n        a.y.max === b.y.max);\n}\nfunction boxEqualsRounded(a, b) {\n    return (Math.round(a.x.min) === Math.round(b.x.min) &&\n        Math.round(a.x.max) === Math.round(b.x.max) &&\n        Math.round(a.y.min) === Math.round(b.y.min) &&\n        Math.round(a.y.max) === Math.round(b.y.max));\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\n\nexport { aspectRatio, boxEquals, boxEqualsRounded, isDeltaZero };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    if (xTranslate || yTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { rotate, rotateX, rotateY } = latestTransform;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { time } from '../frameloop/sync-time.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = time.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelFrame(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    frame.read(checkElapsed, true);\n    return () => cancelFrame(checkElapsed);\n}\n\nexport { delay };\n","function record(data) {\n    if (window.MotionDebug) {\n        window.MotionDebug.record(data);\n    }\n}\n\nexport { record };\n","function isSVGElement(element) {\n    return element instanceof SVGElement && element.tagName !== \"svg\";\n}\n\nexport { isSVGElement };\n","import { animateMotionValue } from './motion-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n\nexport { animateSingleValue };\n","import { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEqualsRounded, isDeltaZero, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { cancelFrame, frameData, steps, frame } from '../../frameloop/frame.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { time } from '../../frameloop/sync-time.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nconst hiddenVisibility = { visibility: \"hidden\" };\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nconst projectionFrameData = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                projectionFrameData.totalNodes =\n                    projectionFrameData.resolvedTargetDeltas =\n                        projectionFrameData.recalculatedProjection =\n                            0;\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                record(projectionFrameData);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            if (window.HandoffCancelAllAnimations) {\n                window.HandoffCancelAllAnimations();\n            }\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = time.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            steps.update.process(frameData);\n            steps.preRender.process(frameData);\n            steps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                microtask.read(() => this.update());\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            if (!this.targetDelta && !this.relativeTarget) {\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            projectionFrameData.resolvedTargetDeltas++;\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n                lead.targetWithTransforms = createBox();\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.projectionTransform) {\n                    this.projectionDelta = createDelta();\n                    this.projectionTransform = \"none\";\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            projectionFrameData.recalculatedProjection++;\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            var _a, _b;\n            if (!this.instance || this.isSVG)\n                return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\",\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    projectionFrameData.totalNodes++;\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mixNumber(delta.translate, 0, p);\n    output.scale = mixNumber(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mixNumber(from.min, to.min, p);\n    output.max = mixNumber(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { DragGesture } from '../../gestures/drag/index.mjs';\nimport { PanGesture } from '../../gestures/pan/index.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { drag };\n","import { invariant } from '../../../utils/errors.mjs';\nimport { isNumericalString } from '../../../utils/is-numerical-string.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nconst splitCSSVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    const match = splitCSSVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    const [, token, fallback] = match;\n    return [token, fallback];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        const trimmed = resolved.trim();\n        return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;\n    }\n    else if (isCSSVariableToken(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    }\n    else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, { ...target }, transitionEnd) {\n    const element = visualElement.current;\n    if (!(element instanceof Element))\n        return { target, transitionEnd };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = { ...transitionEnd };\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.values.forEach((value) => {\n        const current = value.get();\n        if (!isCSSVariableToken(current))\n            return;\n        const resolved = getVariableValue(current, element);\n        if (resolved)\n            value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for (const key in target) {\n        const current = target[key];\n        if (!isCSSVariableToken(current))\n            continue;\n        const resolved = getVariableValue(current, element);\n        if (!resolved)\n            continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        if (!transitionEnd)\n            transitionEnd = {};\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd[key] === undefined) {\n            transitionEnd[key] = current;\n        }\n    }\n    return { target, transitionEnd };\n}\n\nexport { parseCSSVariable, resolveCSSVariables };\n","import { isKeyframesTarget } from '../../../animation/utils/is-keyframes-target.mjs';\nimport { invariant } from '../../../utils/errors.mjs';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\nimport { findDimensionValueType } from '../value-types/dimensions.mjs';\nimport { isBrowser } from '../../../utils/is-browser.mjs';\nimport { number } from '../../../value/types/numbers/index.mjs';\nimport { px } from '../../../value/types/numbers/units.mjs';\n\nconst positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n    \"translateX\",\n    \"translateY\",\n]);\nconst isPositionalKey = (key) => positionalKeys.has(key);\nconst hasPositionalKey = (target) => {\n    return Object.keys(target).some(isPositionalKey);\n};\nconst isNumOrPxType = (v) => v === number || v === px;\nconst getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {\n    if (transform === \"none\" || !transform)\n        return 0;\n    const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        const matrix = transform.match(/^matrix\\((.+)\\)$/);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n};\nconst transformKeys = new Set([\"x\", \"y\", \"z\"]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n    const removedTransforms = [];\n    nonTranslationalTransformKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length)\n        visualElement.render();\n    return removedTransforms;\n}\nconst positionalValues = {\n    // Dimensions\n    width: ({ x }, { paddingLeft = \"0\", paddingRight = \"0\" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),\n    height: ({ y }, { paddingTop = \"0\", paddingBottom = \"0\" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),\n    top: (_bbox, { top }) => parseFloat(top),\n    left: (_bbox, { left }) => parseFloat(left),\n    bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),\n    right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\n// Alias translate longform names\npositionalValues.translateX = positionalValues.x;\npositionalValues.translateY = positionalValues.y;\nconst convertChangedValueTypes = (target, visualElement, changedKeys) => {\n    const originBbox = visualElement.measureViewportBox();\n    const element = visualElement.current;\n    const elementComputedStyle = getComputedStyle(element);\n    const { display } = elementComputedStyle;\n    const origin = {};\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    /**\n     * Record origins before we render and update styles\n     */\n    changedKeys.forEach((key) => {\n        origin[key] = positionalValues[key](originBbox, elementComputedStyle);\n    });\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.render();\n    const targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach((key) => {\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        const value = visualElement.getValue(key);\n        value && value.jump(origin[key]);\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nconst checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {}) => {\n    target = { ...target };\n    transitionEnd = { ...transitionEnd };\n    const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    let removedTransformValues = [];\n    let hasAttemptedToRemoveTransformValues = false;\n    const changedValueTypeKeys = [];\n    targetPositionalKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key))\n            return;\n        let from = origin[key];\n        let fromType = findDimensionValueType(from);\n        const to = target[key];\n        let toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if (isKeyframesTarget(to)) {\n            const numKeyframes = to.length;\n            const fromIndex = to[0] === null ? 1 : 0;\n            from = to[fromIndex];\n            fromType = findDimensionValueType(from);\n            for (let i = fromIndex; i < numKeyframes; i++) {\n                /**\n                 * Don't allow wildcard keyframes to be used to detect\n                 * a difference in value types.\n                 */\n                if (to[i] === null)\n                    break;\n                if (!toType) {\n                    toType = findDimensionValueType(to[i]);\n                    invariant(toType === fromType ||\n                        (isNumOrPxType(fromType) && isNumOrPxType(toType)), \"Keyframes must be of the same dimension as the current value\");\n                }\n                else {\n                    invariant(findDimensionValueType(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        }\n        else {\n            toType = findDimensionValueType(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                const current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                }\n                else if (Array.isArray(to) && toType === px) {\n                    target[key] = to.map(parseFloat);\n                }\n            }\n            else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) &&\n                (toType === null || toType === void 0 ? void 0 : toType.transform) &&\n                (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                }\n                else {\n                    target[key] = fromType.transform(to);\n                }\n            }\n            else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues =\n                        removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] =\n                    transitionEnd[key] !== undefined\n                        ? transitionEnd[key]\n                        : target[key];\n                value.jump(to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        const scrollY = changedValueTypeKeys.indexOf(\"height\") >= 0\n            ? window.pageYOffset\n            : null;\n        const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(([key, value]) => {\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.render();\n        // Restore scroll position\n        if (isBrowser && scrollY !== null) {\n            window.scrollTo({ top: scrollY });\n        }\n        return { target: convertedTarget, transitionEnd };\n    }\n    else {\n        return { target, transitionEnd };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */\nfunction unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target)\n        ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd)\n        : { target, transitionEnd };\n}\n\nexport { positionalValues, unitConversion };\n","import { resolveCSSVariables } from './css-variables-conversion.mjs';\nimport { unitConversion } from './unit-conversion.mjs';\n\n/**\n * Parse a DOM variant to make it animatable. This involves resolving CSS variables\n * and ensuring animations like \"20%\" => \"calc(50vw)\" are performed in pixels.\n */\nconst parseDomVariant = (visualElement, target, origin, transitionEnd) => {\n    const resolved = resolveCSSVariables(visualElement, target, transitionEnd);\n    target = resolved.target;\n    transitionEnd = resolved.transitionEnd;\n    return unitConversion(visualElement, target, origin, transitionEnd);\n};\n\nexport { parseDomVariant };\n","// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nconst hasReducedMotionListener = { current: false };\n\nexport { hasReducedMotionListener, prefersReducedMotion };\n","import { isBrowser } from '../is-browser.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n\nexport { initPrefersReducedMotion };\n","import { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    const { willChange } = next;\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */\n            if (process.env.NODE_ENV === \"development\") {\n                warnOnce(nextValue.version === \"11.0.8\", `Attempting to mix Framer Motion versions ${nextValue.version} with 11.0.8 may not work as expected.`);\n            }\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.remove(key);\n            }\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","const visualElementStore = new WeakMap();\n\nexport { visualElementStore };\n","import { warning, invariant } from '../utils/errors.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { variantProps } from './utils/variant-props.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\nconst numVariantProps = variantProps.length;\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    constructor({ parent, props, presenceContext, reducedMotionConfig, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = () => frame.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps) {\n        return {};\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            this.features[key].unmount();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate &&\n                frame.update(this.notifyUpdate, false, true);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, initialLayoutGroupConfig) {\n        let ProjectionNodeConstructor;\n        let MeasureLayout;\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (process.env.NODE_ENV !== \"production\" &&\n            preloadedFeatures &&\n            isStrict) {\n            const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n            renderedProps.ignoreStrict\n                ? warning(false, strictMessage)\n                : invariant(false, strictMessage);\n        }\n        for (let i = 0; i < numFeatures; i++) {\n            const name = featureNames[i];\n            const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent, } = featureDefinitions[name];\n            if (ProjectionNode)\n                ProjectionNodeConstructor = ProjectionNode;\n            if (isEnabled(renderedProps)) {\n                if (!this.features[name] && FeatureConstructor) {\n                    this.features[name] = new FeatureConstructor(this);\n                }\n                if (MeasureLayoutComponent) {\n                    MeasureLayout = MeasureLayoutComponent;\n                }\n            }\n        }\n        if ((this.type === \"html\" || this.type === \"svg\") &&\n            !this.projection &&\n            ProjectionNodeConstructor) {\n            this.projection = new ProjectionNodeConstructor(this.latestValues, this.parent && this.parent.projection);\n            const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = renderedProps;\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) ||\n                    (dragConstraints && isRefObject(dragConstraints)),\n                visualElement: this,\n                scheduleRender: () => this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */\n                animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n                layoutRoot,\n            });\n        }\n        return MeasureLayout;\n    }\n    updateFeatures() {\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature.isMounted) {\n                feature.update();\n            }\n            else {\n                feature.mount();\n                feature.isMounted = true;\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */\n    makeTargetAnimatable(target, canMutate = true) {\n        return this.makeTargetAnimatableFromInstance(target, canMutate);\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listener = props[\"on\" + key];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    getVariantContext(startAtParent = false) {\n        if (startAtParent) {\n            return this.parent ? this.parent.getVariantContext() : undefined;\n        }\n        if (!this.isControllingVariants) {\n            const context = this.parent\n                ? this.parent.getVariantContext() || {}\n                : {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        if (value !== this.values.get(key)) {\n            this.removeValue(key);\n            this.bindToMotionValue(key, value);\n        }\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key) {\n        var _a;\n        return this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\"\n            ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key]\n            : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n","import { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { parseDomVariant } from './utils/parse-dom-variant.mjs';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style ? props.style[key] : undefined;\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, isMounted) {\n        const origin = getOrigin(target, transition || {}, this);\n        if (isMounted) {\n            checkTargetForNewValues(this, target, origin);\n            const parsed = parseDomVariant(this, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return {\n            transition,\n            transitionEnd,\n            ...target,\n        };\n    }\n}\n\nexport { DOMVisualElement };\n","import { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariableName } from '../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"html\";\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariableName(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, options, props) {\n        buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest) => {\n                if (this.current)\n                    this.current.textContent = `${latest}`;\n            });\n        }\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderHTML(instance, renderState, styleProp, projection);\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n","import { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"svg\";\n        this.isSVGTag = false;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    measureInstanceViewportBox() {\n        return createBox();\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    build(renderState, latestValues, options, props) {\n        buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n","import { HTMLVisualElement } from '../html/HTMLVisualElement.mjs';\nimport { SVGVisualElement } from '../svg/SVGVisualElement.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new SVGVisualElement(options, { enableHardwareAcceleration: false })\n        : new HTMLVisualElement(options, { enableHardwareAcceleration: true });\n};\n\nexport { createDomVisualElement };\n","import { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { layout };\n","import { createMotionComponent } from '../../motion/index.mjs';\nimport { createMotionProxy } from './motion-proxy.mjs';\nimport { createDomMotionConfig } from './utils/create-config.mjs';\nimport { gestureAnimations } from '../../motion/features/gestures.mjs';\nimport { animations } from '../../motion/features/animations.mjs';\nimport { drag } from '../../motion/features/drag.mjs';\nimport { createDomVisualElement } from './create-visual-element.mjs';\nimport { layout } from '../../motion/features/layout.mjs';\n\nconst preloadedFeatures = {\n    ...animations,\n    ...gestureAnimations,\n    ...drag,\n    ...layout,\n};\n/**\n * HTML & SVG components, optimised for use with gestures and animation. These can be used as\n * drop-in replacements for any HTML & SVG component, all CSS & SVG properties are supported.\n *\n * @public\n */\nconst motion = /*@__PURE__*/ createMotionProxy((Component, config) => createDomMotionConfig(Component, config, preloadedFeatures, createDomVisualElement));\n/**\n * Create a DOM `motion` component with the provided string. This is primarily intended\n * as a full alternative to `motion` for consumers who have to support environments that don't\n * support `Proxy`.\n *\n * ```javascript\n * import { createDomMotionComponent } from \"framer-motion\"\n *\n * const motion = {\n *   div: createDomMotionComponent('div')\n * }\n * ```\n *\n * @public\n */\nfunction createDomMotionComponent(key) {\n    return createMotionComponent(createDomMotionConfig(key, { forwardMotionProps: false }, preloadedFeatures, createDomVisualElement));\n}\n\nexport { createDomMotionComponent, motion };\n","const checkStringStartsWith = (token) => (key) => typeof key === \"string\" && key.startsWith(token);\nconst isCSSVariableName = checkStringStartsWith(\"--\");\nconst startsAsVariableToken = checkStringStartsWith(\"var(--\");\nconst isCSSVariableToken = (value) => {\n    const startsWithToken = startsAsVariableToken(value);\n    if (!startsWithToken)\n        return false;\n    // Ensure any comments are stripped from the value as this can harm performance of the regex.\n    return singleCssVariableRegex.test(value.split(\"/*\")[0].trim());\n};\nconst singleCssVariableRegex = /var\\s*\\(\\s*--[\\w-]+(\\s*,\\s*(?:(?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)+)?\\s*\\)$/i;\n\nexport { isCSSVariableName, isCSSVariableToken };\n","const MotionGlobalConfig = {\n    skipAnimations: false,\n    useManualTiming: false,\n};\n\nexport { MotionGlobalConfig };\n","function addUniqueItem(arr, item) {\n    if (arr.indexOf(item) === -1)\n        arr.push(item);\n}\nfunction removeItem(arr, item) {\n    const index = arr.indexOf(item);\n    if (index > -1)\n        arr.splice(index, 1);\n}\n// Adapted from array-move\nfunction moveItem([...arr], fromIndex, toIndex) {\n    const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;\n    if (startIndex >= 0 && startIndex < arr.length) {\n        const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;\n        const [item] = arr.splice(fromIndex, 1);\n        arr.splice(endIndex, 0, item);\n    }\n    return arr;\n}\n\nexport { addUniqueItem, moveItem, removeItem };\n","const clamp = (min, max, v) => {\n    if (v > max)\n        return max;\n    if (v < min)\n        return min;\n    return v;\n};\n\nexport { clamp };\n","import { noop } from './noop.mjs';\n\nlet warning = noop;\nlet invariant = noop;\nif (process.env.NODE_ENV !== \"production\") {\n    warning = (check, message) => {\n        if (!check && typeof console !== \"undefined\") {\n            console.warn(message);\n        }\n    };\n    invariant = (check, message) => {\n        if (!check) {\n            throw new Error(message);\n        }\n    };\n}\n\nexport { invariant, warning };\n","import { invariant } from './errors.mjs';\nimport { clamp } from './clamp.mjs';\nimport { pipe } from './pipe.mjs';\nimport { progress } from './progress.mjs';\nimport { noop } from './noop.mjs';\nimport { mix } from './mix/index.mjs';\n\nfunction createMixers(output, ease, customMixer) {\n    const mixers = [];\n    const mixerFactory = customMixer || mix;\n    const numMixers = output.length - 1;\n    for (let i = 0; i < numMixers; i++) {\n        let mixer = mixerFactory(output[i], output[i + 1]);\n        if (ease) {\n            const easingFunction = Array.isArray(ease) ? ease[i] || noop : ease;\n            mixer = pipe(easingFunction, mixer);\n        }\n        mixers.push(mixer);\n    }\n    return mixers;\n}\n/**\n * Create a function that maps from a numerical input array to a generic output array.\n *\n * Accepts:\n *   - Numbers\n *   - Colors (hex, hsl, hsla, rgb, rgba)\n *   - Complex (combinations of one or more numbers or strings)\n *\n * ```jsx\n * const mixColor = interpolate([0, 1], ['#fff', '#000'])\n *\n * mixColor(0.5) // 'rgba(128, 128, 128, 1)'\n * ```\n *\n * TODO Revist this approach once we've moved to data models for values,\n * probably not needed to pregenerate mixer functions.\n *\n * @public\n */\nfunction interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {\n    const inputLength = input.length;\n    invariant(inputLength === output.length, \"Both input and output ranges must be the same length\");\n    /**\n     * If we're only provided a single input, we can just make a function\n     * that returns the output.\n     */\n    if (inputLength === 1)\n        return () => output[0];\n    // If input runs highest -> lowest, reverse both arrays\n    if (input[0] > input[inputLength - 1]) {\n        input = [...input].reverse();\n        output = [...output].reverse();\n    }\n    const mixers = createMixers(output, ease, mixer);\n    const numMixers = mixers.length;\n    const interpolator = (v) => {\n        let i = 0;\n        if (numMixers > 1) {\n            for (; i < input.length - 2; i++) {\n                if (v < input[i + 1])\n                    break;\n            }\n        }\n        const progressInRange = progress(input[i], input[i + 1], v);\n        return mixers[i](progressInRange);\n    };\n    return isClamp\n        ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v))\n        : interpolator;\n}\n\nexport { interpolate };\n","const isBrowser = typeof document !== \"undefined\";\n\nexport { isBrowser };\n","// Adapted from https://gist.github.com/mjackson/5311256\nfunction hueToRgb(p, q, t) {\n    if (t < 0)\n        t += 1;\n    if (t > 1)\n        t -= 1;\n    if (t < 1 / 6)\n        return p + (q - p) * 6 * t;\n    if (t < 1 / 2)\n        return q;\n    if (t < 2 / 3)\n        return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\nfunction hslaToRgba({ hue, saturation, lightness, alpha }) {\n    hue /= 360;\n    saturation /= 100;\n    lightness /= 100;\n    let red = 0;\n    let green = 0;\n    let blue = 0;\n    if (!saturation) {\n        red = green = blue = lightness;\n    }\n    else {\n        const q = lightness < 0.5\n            ? lightness * (1 + saturation)\n            : lightness + saturation - lightness * saturation;\n        const p = 2 * lightness - q;\n        red = hueToRgb(p, q, hue + 1 / 3);\n        green = hueToRgb(p, q, hue);\n        blue = hueToRgb(p, q, hue - 1 / 3);\n    }\n    return {\n        red: Math.round(red * 255),\n        green: Math.round(green * 255),\n        blue: Math.round(blue * 255),\n        alpha,\n    };\n}\n\nexport { hslaToRgba };\n","import { mixNumber } from './number.mjs';\nimport { invariant } from '../errors.mjs';\nimport { hslaToRgba } from '../hsla-to-rgba.mjs';\nimport { hex } from '../../value/types/color/hex.mjs';\nimport { rgba } from '../../value/types/color/rgba.mjs';\nimport { hsla } from '../../value/types/color/hsla.mjs';\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nconst mixLinearColor = (from, to, v) => {\n    const fromExpo = from * from;\n    const expo = v * (to * to - fromExpo) + fromExpo;\n    return expo < 0 ? 0 : Math.sqrt(expo);\n};\nconst colorTypes = [hex, rgba, hsla];\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\nfunction asRGBA(color) {\n    const type = getColorType(color);\n    invariant(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);\n    let model = type.parse(color);\n    if (type === hsla) {\n        // TODO Remove this cast - needed since Framer Motion's stricter typing\n        model = hslaToRgba(model);\n    }\n    return model;\n}\nconst mixColor = (from, to) => {\n    const fromRGBA = asRGBA(from);\n    const toRGBA = asRGBA(to);\n    const blended = { ...fromRGBA };\n    return (v) => {\n        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n        blended.alpha = mixNumber(fromRGBA.alpha, toRGBA.alpha, v);\n        return rgba.transform(blended);\n    };\n};\n\nexport { mixColor, mixLinearColor };\n","import { mixNumber as mixNumber$1 } from './number.mjs';\nimport { mixColor } from './color.mjs';\nimport { pipe } from '../pipe.mjs';\nimport { warning } from '../errors.mjs';\nimport { color } from '../../value/types/color/index.mjs';\nimport { complex, analyseComplexValue } from '../../value/types/complex/index.mjs';\nimport { isCSSVariableToken } from '../../render/dom/utils/is-css-variable.mjs';\n\nfunction mixImmediate(a, b) {\n    return (p) => (p > 0 ? b : a);\n}\nfunction mixNumber(a, b) {\n    return (p) => mixNumber$1(a, b, p);\n}\nfunction getMixer(a) {\n    if (typeof a === \"number\") {\n        return mixNumber;\n    }\n    else if (typeof a === \"string\") {\n        return isCSSVariableToken(a)\n            ? mixImmediate\n            : color.test(a)\n                ? mixColor\n                : mixComplex;\n    }\n    else if (Array.isArray(a)) {\n        return mixArray;\n    }\n    else if (typeof a === \"object\") {\n        return color.test(a) ? mixColor : mixObject;\n    }\n    return mixImmediate;\n}\nfunction mixArray(a, b) {\n    const output = [...a];\n    const numValues = output.length;\n    const blendValue = a.map((v, i) => getMixer(v)(v, b[i]));\n    return (p) => {\n        for (let i = 0; i < numValues; i++) {\n            output[i] = blendValue[i](p);\n        }\n        return output;\n    };\n}\nfunction mixObject(a, b) {\n    const output = { ...a, ...b };\n    const blendValue = {};\n    for (const key in output) {\n        if (a[key] !== undefined && b[key] !== undefined) {\n            blendValue[key] = getMixer(a[key])(a[key], b[key]);\n        }\n    }\n    return (v) => {\n        for (const key in blendValue) {\n            output[key] = blendValue[key](v);\n        }\n        return output;\n    };\n}\nfunction matchOrder(origin, target) {\n    var _a;\n    const orderedOrigin = [];\n    const pointers = { color: 0, var: 0, number: 0 };\n    for (let i = 0; i < target.values.length; i++) {\n        const type = target.types[i];\n        const originIndex = origin.indexes[type][pointers[type]];\n        const originValue = (_a = origin.values[originIndex]) !== null && _a !== void 0 ? _a : 0;\n        orderedOrigin[i] = originValue;\n        pointers[type]++;\n    }\n    return orderedOrigin;\n}\nconst mixComplex = (origin, target) => {\n    const template = complex.createTransformer(target);\n    const originStats = analyseComplexValue(origin);\n    const targetStats = analyseComplexValue(target);\n    const canInterpolate = originStats.indexes.var.length === targetStats.indexes.var.length &&\n        originStats.indexes.color.length === targetStats.indexes.color.length &&\n        originStats.indexes.number.length >= targetStats.indexes.number.length;\n    if (canInterpolate) {\n        return pipe(mixArray(matchOrder(originStats, targetStats), targetStats.values), template);\n    }\n    else {\n        warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);\n        return mixImmediate(origin, target);\n    }\n};\n\nexport { getMixer, mixArray, mixComplex, mixObject };\n","import { getMixer } from './complex.mjs';\nimport { mixNumber } from './number.mjs';\n\nfunction mix(from, to, p) {\n    if (typeof from === \"number\" &&\n        typeof to === \"number\" &&\n        typeof p === \"number\") {\n        return mixNumber(from, to, p);\n    }\n    const mixer = getMixer(from);\n    return mixer(from, to);\n}\n\nexport { mix };\n","/*\n  Value in range from progress\n\n  Given a lower limit and an upper limit, we return the value within\n  that range as expressed by progress (usually a number from 0 to 1)\n\n  So progress = 0.5 would change\n\n  from -------- to\n\n  to\n\n  from ---- to\n\n  E.g. from = 10, to = 20, progress = 0.5 => 15\n\n  @param [number]: Lower limit of range\n  @param [number]: Upper limit of range\n  @param [number]: The progress between lower and upper limits expressed 0-1\n  @return [number]: Value as calculated from progress within range (not limited within range)\n*/\nconst mixNumber = (from, to, progress) => {\n    return from + (to - from) * progress;\n};\n\nexport { mixNumber };\n","const noop = (any) => any;\n\nexport { noop };\n","/**\n * Pipe\n * Compose other transformers to run linearily\n * pipe(min(20), max(40))\n * @param  {...functions} transformers\n * @return {function}\n */\nconst combineFunctions = (a, b) => (v) => b(a(v));\nconst pipe = (...transformers) => transformers.reduce(combineFunctions);\n\nexport { pipe };\n","/*\n  Progress within given range\n\n  Given a lower limit and an upper limit, we return the progress\n  (expressed as a number 0-1) represented by the given value, and\n  limit that progress to within 0-1.\n\n  @param [number]: Lower limit\n  @param [number]: Upper limit\n  @param [number]: Value to find progress within given range\n  @return [number]: Progress of value within range as expressed 0-1\n*/\nconst progress = (from, to, value) => {\n    const toFromDifference = to - from;\n    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;\n};\n\nexport { progress };\n","import { addUniqueItem, removeItem } from './array.mjs';\n\nclass SubscriptionManager {\n    constructor() {\n        this.subscriptions = [];\n    }\n    add(handler) {\n        addUniqueItem(this.subscriptions, handler);\n        return () => removeItem(this.subscriptions, handler);\n    }\n    notify(a, b, c) {\n        const numSubscriptions = this.subscriptions.length;\n        if (!numSubscriptions)\n            return;\n        if (numSubscriptions === 1) {\n            /**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */\n            this.subscriptions[0](a, b, c);\n        }\n        else {\n            for (let i = 0; i < numSubscriptions; i++) {\n                /**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */\n                const handler = this.subscriptions[i];\n                handler && handler(a, b, c);\n            }\n        }\n    }\n    getSize() {\n        return this.subscriptions.length;\n    }\n    clear() {\n        this.subscriptions.length = 0;\n    }\n}\n\nexport { SubscriptionManager };\n","import { useRef } from 'react';\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nfunction useConstant(init) {\n    const ref = useRef(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n\nexport { useConstant };\n","import { useLayoutEffect, useEffect } from 'react';\nimport { isBrowser } from './is-browser.mjs';\n\nconst useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\n\nexport { useIsomorphicLayoutEffect };\n","/*\n  Convert velocity into velocity per second\n\n  @param [number]: Unit per frame\n  @param [number]: Frame duration in ms\n*/\nfunction velocityPerSecond(velocity, frameDuration) {\n    return frameDuration ? velocity * (1000 / frameDuration) : 0;\n}\n\nexport { velocityPerSecond };\n","import { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { time } from '../frameloop/sync-time.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\n/**\n * Maximum time between the value of two frames, beyond which we\n * assume the velocity has since been 0.\n */\nconst MAX_VELOCITY_DELTA = 30;\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\nconst collectMotionValues = {\n    current: undefined,\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    constructor(init, options = {}) {\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"11.0.8\";\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = false;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        this.updateAndNotify = (v, render = true) => {\n            const currentTime = time.now();\n            /**\n             * If we're updating the value during another frame or eventloop\n             * than the previous frame, then the we set the previous frame value\n             * to current.\n             */\n            if (this.updatedAt !== currentTime) {\n                this.setPrevFrameValue();\n            }\n            this.prev = this.current;\n            this.setCurrent(v);\n            // Update update subscribers\n            if (this.current !== this.prev && this.events.change) {\n                this.events.change.notify(this.current);\n            }\n            // Update render subscribers\n            if (render && this.events.renderRequest) {\n                this.events.renderRequest.notify(this.current);\n            }\n        };\n        this.hasAnimated = false;\n        this.setCurrent(init);\n        this.canTrackVelocity = isFloat(this.current);\n        this.owner = options.owner;\n    }\n    setCurrent(current) {\n        this.current = current;\n        this.updatedAt = time.now();\n    }\n    setPrevFrameValue(prevFrameValue = this.current) {\n        this.prevFrameValue = prevFrameValue;\n        this.prevUpdatedAt = this.updatedAt;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n    onChange(subscription) {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).`);\n        }\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return () => {\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */\n                frame.read(() => {\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for (const eventManagers in this.events) {\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = undefined;\n        this.prevFrameValue = prev;\n        this.prevUpdatedAt = this.updatedAt - delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n    jump(v) {\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.prevUpdatedAt = this.prevFrameValue = undefined;\n        this.stop();\n        if (this.stopPassiveEffect)\n            this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        if (collectMotionValues.current) {\n            collectMotionValues.current.push(this);\n        }\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        const currentTime = time.now();\n        if (!this.canTrackVelocity ||\n            this.prevFrameValue === undefined ||\n            currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {\n            return 0;\n        }\n        const delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);\n        // Casts because of parseFloat's poor typing\n        return velocityPerSecond(parseFloat(this.current) -\n            parseFloat(this.prevFrameValue), delta);\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    start(startAnimation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve);\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(() => {\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n\nexport { MotionValue, collectMotionValues, motionValue };\n","import { rgba } from './rgba.mjs';\nimport { isColorString } from './utils.mjs';\n\nfunction parseHex(v) {\n    let r = \"\";\n    let g = \"\";\n    let b = \"\";\n    let a = \"\";\n    // If we have 6 characters, ie #FF0000\n    if (v.length > 5) {\n        r = v.substring(1, 3);\n        g = v.substring(3, 5);\n        b = v.substring(5, 7);\n        a = v.substring(7, 9);\n        // Or we have 3 characters, ie #F00\n    }\n    else {\n        r = v.substring(1, 2);\n        g = v.substring(2, 3);\n        b = v.substring(3, 4);\n        a = v.substring(4, 5);\n        r += r;\n        g += g;\n        b += b;\n        a += a;\n    }\n    return {\n        red: parseInt(r, 16),\n        green: parseInt(g, 16),\n        blue: parseInt(b, 16),\n        alpha: a ? parseInt(a, 16) / 255 : 1,\n    };\n}\nconst hex = {\n    test: isColorString(\"#\"),\n    parse: parseHex,\n    transform: rgba.transform,\n};\n\nexport { hex };\n","import { alpha } from '../numbers/index.mjs';\nimport { percent } from '../numbers/units.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst hsla = {\n    test: isColorString(\"hsl\", \"hue\"),\n    parse: splitColor(\"hue\", \"saturation\", \"lightness\"),\n    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {\n        return (\"hsla(\" +\n            Math.round(hue) +\n            \", \" +\n            percent.transform(sanitize(saturation)) +\n            \", \" +\n            percent.transform(sanitize(lightness)) +\n            \", \" +\n            sanitize(alpha.transform(alpha$1)) +\n            \")\");\n    },\n};\n\nexport { hsla };\n","import { isString } from '../utils.mjs';\nimport { hex } from './hex.mjs';\nimport { hsla } from './hsla.mjs';\nimport { rgba } from './rgba.mjs';\n\nconst color = {\n    test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),\n    parse: (v) => {\n        if (rgba.test(v)) {\n            return rgba.parse(v);\n        }\n        else if (hsla.test(v)) {\n            return hsla.parse(v);\n        }\n        else {\n            return hex.parse(v);\n        }\n    },\n    transform: (v) => {\n        return isString(v)\n            ? v\n            : v.hasOwnProperty(\"red\")\n                ? rgba.transform(v)\n                : hsla.transform(v);\n    },\n};\n\nexport { color };\n","import { clamp } from '../../../utils/clamp.mjs';\nimport { number, alpha } from '../numbers/index.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst clampRgbUnit = (v) => clamp(0, 255, v);\nconst rgbUnit = {\n    ...number,\n    transform: (v) => Math.round(clampRgbUnit(v)),\n};\nconst rgba = {\n    test: isColorString(\"rgb\", \"red\"),\n    parse: splitColor(\"red\", \"green\", \"blue\"),\n    transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => \"rgba(\" +\n        rgbUnit.transform(red) +\n        \", \" +\n        rgbUnit.transform(green) +\n        \", \" +\n        rgbUnit.transform(blue) +\n        \", \" +\n        sanitize(alpha.transform(alpha$1)) +\n        \")\",\n};\n\nexport { rgbUnit, rgba };\n","import { isString, singleColorRegex, floatRegex } from '../utils.mjs';\n\n/**\n * Returns true if the provided string is a color, ie rgba(0,0,0,0) or #000,\n * but false if a number or multiple colors\n */\nconst isColorString = (type, testProp) => (v) => {\n    return Boolean((isString(v) && singleColorRegex.test(v) && v.startsWith(type)) ||\n        (testProp && Object.prototype.hasOwnProperty.call(v, testProp)));\n};\nconst splitColor = (aName, bName, cName) => (v) => {\n    if (!isString(v))\n        return v;\n    const [a, b, c, alpha] = v.match(floatRegex);\n    return {\n        [aName]: parseFloat(a),\n        [bName]: parseFloat(b),\n        [cName]: parseFloat(c),\n        alpha: alpha !== undefined ? parseFloat(alpha) : 1,\n    };\n};\n\nexport { isColorString, splitColor };\n","import { color } from '../color/index.mjs';\nimport { isString, floatRegex, colorRegex, sanitize } from '../utils.mjs';\n\nfunction test(v) {\n    var _a, _b;\n    return (isNaN(v) &&\n        isString(v) &&\n        (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) +\n            (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) >\n            0);\n}\nconst NUMBER_TOKEN = \"number\";\nconst COLOR_TOKEN = \"color\";\nconst VAR_TOKEN = \"var\";\nconst VAR_FUNCTION_TOKEN = \"var(\";\nconst SPLIT_TOKEN = \"${}\";\nconst complexRegex = /(var\\s*\\(\\s*--[\\w-]+(\\s*,\\s*(?:(?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)+)?\\s*\\))|(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))|((-)?([\\d]*\\.?[\\d])+)/gi;\nfunction analyseComplexValue(value) {\n    const originalValue = value.toString();\n    const matchedValues = originalValue.match(complexRegex) || [];\n    const values = [];\n    const indexes = {\n        color: [],\n        number: [],\n        var: [],\n    };\n    const types = [];\n    for (let i = 0; i < matchedValues.length; i++) {\n        const parsedValue = matchedValues[i];\n        if (color.test(parsedValue)) {\n            indexes.color.push(i);\n            types.push(COLOR_TOKEN);\n            values.push(color.parse(parsedValue));\n        }\n        else if (parsedValue.startsWith(VAR_FUNCTION_TOKEN)) {\n            indexes.var.push(i);\n            types.push(VAR_TOKEN);\n            values.push(parsedValue);\n        }\n        else {\n            indexes.number.push(i);\n            types.push(NUMBER_TOKEN);\n            values.push(parseFloat(parsedValue));\n        }\n    }\n    const tokenised = originalValue.replace(complexRegex, SPLIT_TOKEN);\n    const split = tokenised.split(SPLIT_TOKEN);\n    return { values, split, indexes, types };\n}\nfunction parseComplexValue(v) {\n    return analyseComplexValue(v).values;\n}\nfunction createTransformer(source) {\n    const { split, types } = analyseComplexValue(source);\n    const numSections = split.length;\n    return (v) => {\n        let output = \"\";\n        for (let i = 0; i < numSections; i++) {\n            output += split[i];\n            if (v[i] !== undefined) {\n                const type = types[i];\n                if (type === NUMBER_TOKEN) {\n                    output += sanitize(v[i]);\n                }\n                else if (type === COLOR_TOKEN) {\n                    output += color.transform(v[i]);\n                }\n                else {\n                    output += v[i];\n                }\n            }\n        }\n        return output;\n    };\n}\nconst convertNumbersToZero = (v) => typeof v === \"number\" ? 0 : v;\nfunction getAnimatableNone(v) {\n    const parsed = parseComplexValue(v);\n    const transformer = createTransformer(v);\n    return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = {\n    test,\n    parse: parseComplexValue,\n    createTransformer,\n    getAnimatableNone,\n};\n\nexport { analyseComplexValue, complex };\n","import { clamp } from '../../../utils/clamp.mjs';\n\nconst number = {\n    test: (v) => typeof v === \"number\",\n    parse: parseFloat,\n    transform: (v) => v,\n};\nconst alpha = {\n    ...number,\n    transform: (v) => clamp(0, 1, v),\n};\nconst scale = {\n    ...number,\n    default: 1,\n};\n\nexport { alpha, number, scale };\n","import { isString } from '../utils.mjs';\n\nconst createUnitType = (unit) => ({\n    test: (v) => isString(v) && v.endsWith(unit) && v.split(\" \").length === 1,\n    parse: parseFloat,\n    transform: (v) => `${v}${unit}`,\n});\nconst degrees = createUnitType(\"deg\");\nconst percent = createUnitType(\"%\");\nconst px = createUnitType(\"px\");\nconst vh = createUnitType(\"vh\");\nconst vw = createUnitType(\"vw\");\nconst progressPercentage = {\n    ...percent,\n    parse: (v) => percent.parse(v) / 100,\n    transform: (v) => percent.transform(v * 100),\n};\n\nexport { degrees, percent, progressPercentage, px, vh, vw };\n","/**\n * TODO: When we move from string as a source of truth to data models\n * everything in this folder should probably be referred to as models vs types\n */\n// If this number is a decimal, make it just five decimal places\n// to avoid exponents\nconst sanitize = (v) => Math.round(v * 100000) / 100000;\nconst floatRegex = /(-)?([\\d]*\\.?[\\d])+/g;\nconst colorRegex = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))/gi;\nconst singleColorRegex = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))$/i;\nfunction isString(v) {\n    return typeof v === \"string\";\n}\n\nexport { colorRegex, floatRegex, isString, sanitize, singleColorRegex };\n","const isMotionValue = (value) => Boolean(value && value.getVelocity);\n\nexport { isMotionValue };\n"],"names":["clsx","e","t","f","n","arguments","length","r","Array","isArray","__webpack_exports__","Z","useCallbackRef","initialValue","callback","ref","react__WEBPACK_IMPORTED_MODULE_0__","useState","value","facade","current","last","_extends","Object","assign","bind","target","i","source","key","prototype","hasOwnProperty","call","apply","o","Space","Enter","Escape","Backspace","Delete","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Home","End","PageUp","PageDown","Tab","p","_utils_disposables_js__WEBPACK_IMPORTED_MODULE_1__","k","useEffect","dispose","_use_latest_value_js__WEBPACK_IMPORTED_MODULE_1__","E","useCallback","I","useId","_use_server_handoff_complete_js__WEBPACK_IMPORTED_MODULE_1__","H","u","_utils_env_js__WEBPACK_IMPORTED_MODULE_2__","O","nextId","_use_iso_morphic_effect_js__WEBPACK_IMPORTED_MODULE_3__","l","_utils_env_js__WEBPACK_IMPORTED_MODULE_1__","isServer","useLayoutEffect","s","useRef","_use_iso_morphic_effect_js__WEBPACK_IMPORTED_MODULE_1__","isHandoffComplete","handoff","Symbol","T","y","c","_use_event_js__WEBPACK_IMPORTED_MODULE_1__","z","every","parentElement","HTMLFieldSetElement","HTMLLegendElement","getAttribute","previousElementSibling","filter","Boolean","join","m","enqueue","push","addEventListener","a","add","removeEventListener","requestAnimationFrame","cancelAnimationFrame","nextFrame","setTimeout","clearTimeout","microTask","_micro_task_js__WEBPACK_IMPORTED_MODULE_0__","Y","indexOf","splice","workQueue","defineProperty","d","enumerable","configurable","writable","constructor","detect","set","handoffState","currentId","reset","isClient","window","document","keys","map","Error","captureStackTrace","queueMicrotask","Promise","resolve","then","catch","j","None","RenderStrategy","Static","w","Unmount","Hidden","X","ourProps","theirProps","slot","defaultTag","features","visible","name","h","static","unmount","_match_js__WEBPACK_IMPORTED_MODULE_1__","hidden","style","display","as","children","refName","className","F","entries","Fragment","P","isValidElement","_class_names_js__WEBPACK_IMPORTED_MODULE_2__","A","props","cloneElement","createElement","startsWith","disabled","fromEntries","Event","nativeEvent","defaultPrevented","V","forwardRef","displayName","$6ed0406888f73fc4$export$43e446d32b3d21af","refs","forEach","node","$6ed0406888f73fc4$export$c7b2cbe3552a0d05","$8927f6f2acc4f386$export$250ffa63cdc0d034","$8927f6f2acc4f386$var$NODES","reduce","primitive","Node","forwardedRef","asChild","primitiveProps","Comp","_radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_2__","g7","for","_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__","$8927f6f2acc4f386$export$6d1a0317bde7de7f","event","react_dom__WEBPACK_IMPORTED_MODULE_1__","flushSync","dispatchEvent","$5e63c961fc1ce211$export$8c6ed5c666ac1360","slotProps","childrenArray","Children","toArray","slottable","find","$5e63c961fc1ce211$var$isSlottable","newElement","newChildren","child","count","only","$5e63c961fc1ce211$var$SlotClone","_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","undefined","$5e63c961fc1ce211$var$mergeProps","childProps","overrideProps","propName","slotPropValue","childPropValue","isHandler","test","args","_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_2__","$5e63c961fc1ce211$export$d9f1ccf0bdb05d45","type","LayoutGroupContext","createContext","MotionConfigContext","transformPagePoint","isStatic","reducedMotion","PresenceContext","Queue","order","scheduled","Set","process","has","remove","index","delete","clear","stepsOrder","createRenderBatcher","scheduleNextBatch","allowKeepAlive","runNextFrame","useDefaultElapsed","state","delta","timestamp","isProcessing","steps","acc","createRenderStep","thisFrame","numToRun","flushNextFrame","toKeepAlive","WeakSet","step","schedule","keepAlive","immediate","addToCurrentFrame","queue","cancel","frameData","processStep","stepId","processBatch","GlobalConfig","useManualTiming","performance","now","Math","max","min","wake","frame","cancelFrame","_batcher_mjs__WEBPACK_IMPORTED_MODULE_0__","_utils_noop_mjs__WEBPACK_IMPORTED_MODULE_1__","clearTime","time","_frame_mjs__WEBPACK_IMPORTED_MODULE_0__","_utils_GlobalConfig_mjs__WEBPACK_IMPORTED_MODULE_1__","newTime","result","isValidProp","MotionContext","react","LazyContext","strict","camelToDash","str","replace","toLowerCase","optimizedAppearDataAttribute","microtask","cancelMicrotask","batcher","isRefObject","isVariantLabel","v","isAnimationControls","start","variantPriorityOrder","variantProps","isControllingVariants","animate","some","isVariantNode","variants","variantLabelsAsDependency","prop","featureProps","animation","exit","drag","focus","hover","tap","pan","inView","layout","featureDefinitions","isEnabled","SwitchLayoutGroupContext","motionComponentSymbol","lowercaseSVGElements","isSVGComponent","Component","includes","scaleCorrectors","transformPropOrder","transformProps","isForcedMotionValue","layoutId","translateAlias","x","transformPerspective","numTransforms","getValueAsType","transform","type_int_int","numbers","Rx","round","numberValueTypes","borderWidth","units","px","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderRadius","radius","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","width","maxWidth","height","maxHeight","size","top","right","bottom","left","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","margin","marginTop","marginRight","marginBottom","marginLeft","rotate","RW","rotateX","rotateY","rotateZ","scale","bA","scaleX","scaleY","scaleZ","skew","skewX","skewY","distance","translateX","translateY","translateZ","perspective","opacity","Fq","originX","$C","originY","originZ","zIndex","fillOpacity","strokeOpacity","numOctaves","buildHTMLStyles","latestValues","options","transformTemplate","vars","transformOrigin","hasTransform","hasTransformOrigin","transformIsNone","is_css_variable","valueType","valueAsType","default","buildTransform","enableHardwareAcceleration","allowTransformNone","transformIsDefault","transformString","transformName","trim","createHtmlRenderState","copyRawValuesOnly","is_motion_value","useHTMLProps","visualState","htmlProps","useStyle","styleProp","useInitialMotionValues","useMemo","dragListener","draggable","userSelect","WebkitUserSelect","WebkitTouchCallout","touchAction","tabIndex","onTap","onTapStart","whileTap","validMotionProps","isValidMotionProp","shouldForward","require","_a","calcOrigin","origin","offset","dashKeys","array","camelKeys","buildSVGAttrs","attrX","attrY","attrScale","pathLength","pathSpacing","pathOffset","latest","isSVGTag","viewBox","attrs","dimensions","calcSVGTransformOrigin","pxOriginX","pxOriginY","buildSVGPath","spacing","useDashCase","createSvgRenderState","tag","useSVGProps","_isStatic","visualProps","rawStyles","renderHTML","element","projection","getProjectionStyles","setProperty","camelCaseAttributes","renderSVG","renderState","_styleProp","setAttribute","scrapeMotionValuesFromProps","prevProps","newValues","scrape_motion_values_scrapeMotionValuesFromProps","targetKey","charAt","toUpperCase","substring","resolveVariantFromProps","definition","custom","currentValues","currentVelocity","isKeyframesTarget","isCustomValue","mix","toValue","resolveFinalValueInKeyframes","resolveMotionValue","unwrappedValue","get","makeUseVisualState","context","useContext","presenceContext","context_PresenceContext","make","makeState","createRenderState","onMount","makeLatestValues","scrapeMotionValues","values","motionValues","initial","isControllingVariants$1","isVariantNode$1","inherit","isInitialAnimationBlocked","variantToSet","list","resolved","transitionEnd","transition","valueTarget","mount","instance","config","use_constant","svgMotionConfig","useVisualState","frameloop_frame","Wi","read","getBBox","getBoundingClientRect","render","tagName","htmlMotionConfig","addDomEvent","eventName","handler","passive","isPrimaryPointer","pointerType","button","isPrimary","extractEventInfo","pointType","point","addPointerInfo","addPointerEvent","createLock","lock","globalHorizontalLock","globalVerticalLock","getGlobalLock","openHorizontal","openVertical","isDragActive","openGestureLock","Feature","isMounted","update","addHoverEvent","isActive","callbackName","info","getProps","animationState","whileHover","setActive","isNodeOrChild","parent","fireSyntheticPointerEvent","syntheticPointerEvent","PointerEvent","observerCallbacks","WeakMap","observers","fireObserverCallback","entry","fireAllObserverCallbacks","thresholdNames","all","shallowCompare","next","prev","prevLength","resolveVariant","visualElement","getCurrent","getVelocity","velocity","secondsToMilliseconds","seconds","millisecondsToSeconds","milliseconds","instantAnimationState","isBezierDefinition","easing","cubicBezierAsString","b","supportedWaapiEasing","linear","ease","easeIn","easeOut","easeInOut","circIn","circOut","backIn","backOut","calcBezier","a1","a2","cubicBezier","mX1","mY1","mX2","mY2","noop","getTForX","binarySubdivide","lowerBound","upperBound","currentX","currentT","abs","aX","isEasingArray","mirrorEasing","reverseEasing","sin","acos","circInOut","backInOut","easingLookup","anticipate","pow","easingDefinitionToFunction","errors","x1","y1","x2","y2","keyframes","duration","keyframeValues","times","easingFunctions","done","absoluteTimes","defaultOffset","arr","fillOffset","remaining","offsetProgress","progress","number","mapTimeToKeyframe","interpolate","calculatedDuration","calcGeneratorVelocity","resolveValue","prevT","velocity_per_second","R","calcAngularFreq","undampedFreq","dampingRatio","sqrt","durationKeys","physicsKeys","isSpringType","spring","restDelta","restSpeed","resolveSpring","stiffness","damping","mass","isResolvedFromDuration","getSpringOptions","springOptions","derived","findSpring","bounce","envelope","derivative","K","clamp","exponentialDecay","safeMin","exp","g","factor","initialGuess","approximateRoot","isNaN","initialVelocity","initialDelta","undampedAngularFreq","isGranularScale","angularFreq","cos","dampedAngularFreq","freqForT","sinh","cosh","isBelowVelocityThreshold","isBelowDisplacementThreshold","inertia","power","timeConstant","bounceDamping","bounceStiffness","modifyTarget","timeReachedBoundary","spring$1","isOutOfBounds","nearestBoundary","amplitude","ideal","calcDelta","calcLatest","applyFriction","checkCatchBoundary","hasUpdatedFrame","frameloopDriver","passTimestamp","stop","Pn","sync_time","calcGeneratorDuration","generator","Infinity","types","decay","tween","percentToProgress","percent","animateValue","autoplay","delay","driver","keyframes$1","repeat","repeatDelay","repeatType","onPlay","onStop","onComplete","onUpdate","resolveFinishedPromise","currentFinishedPromise","animationDriver","mapNumbersToKeyframes","mirroredGenerator","speed","hasStopped","updateFinishedPromise","generatorFactory","pipe","C","reverse","playState","holdTime","startTime","cancelTime","resolvedDuration","totalDuration","currentTime","tick","timeWithoutDelay","isInDelayPhase","elapsed","frameGenerator","currentIteration","floor","iterationProgress","isOddIteration","isAnimationFinished","finish","stopAnimationDriver","play","controls","reject","newSpeed","pause","complete","sample","supportsWaapi","Element","acceleratedValues","requiresPregeneratedKeyframes","valueName","isWaapiSupportedEasing","underDampedSpring","criticallyDampedSpring","keyframesTransition","getDefaultTransition","valueKey","isAnimatable","complex","maxDefaults","applyDefaultFilter","slice","split","match","utils","KP","unit","defaultValue","functionRegex","getAnimatableNone","functions","defaultValueTypes","color","$","backgroundColor","outlineColor","fill","stroke","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","WebkitFilter","getDefaultValueType","defaultValueType","isZeroValueString","getValueTransition","animateMotionValue","valueTransition","getKeyframes","animatableTemplateValue","isTargetAnimatable","defaultOrigin","from","noneKeyframeIndexes","originKeyframe","targetKeyframe","isOriginAnimatable","isTransitionDefined","when","_delay","delayChildren","staggerChildren","staggerDirection","skipAnimations","createInstantAnimation","setValue","isHandoff","owner","HTMLElement","acceleratedAnimation","createAcceleratedAnimation","canAccelerateAnimation","pendingCancel","sampleAnimation","pregeneratedKeyframes","animateStyle","keyframeOptions","mapEasingToNativeEasing","iterations","direction","cancelAnimation","safeCancel","onfinish","getFinalKeyframe","attachTimeline","timeline","playbackRate","setWithVelocity","isWillChangeMotionValue","isNumericalString","testValueType","dimensionValueTypes","aQ","vw","vh","parse","findDimensionValueType","valueTypes","findValueType","animateTarget","transitionOverride","makeTargetAnimatable","willChange","getValue","animations","animationTypeState","getState","shouldBlockAnimation","protectedKeys","needsAnimating","shouldBlock","HandoffAppearAnimations","appearId","canSkip","hasKeyframesChanged","shouldReduceMotion","setTarget","hasValue","addValue","es_value","BX","animateVariant","variant","getAnimation","getChildAnimations","variantChildren","forwardDelay","animateChildren","maxStaggerDuration","generateStaggerDuration","sort","sortByTreeOrder","notify","first","sortNodePosition","reversePriorityOrder","numAnimationTypes","createTypeState","prevResolvedValues","id","PanSession","handlers","contextWindow","dragSnapToOrigin","startEvent","lastMoveEvent","lastMoveEventInfo","updatePoint","getPanInfo","history","isPanStarted","isDistancePastThreshold","distance2D","xDelta","yDelta","onStart","onMove","handlePointerMove","transformPoint","handlePointerUp","end","onEnd","onSessionEnd","resumeAnimation","panInfo","initialInfo","onSessionStart","removeListeners","updateHandlers","subtractPoint","lastDevicePoint","PanSession_getVelocity","timeDelta","timestampedPoint","lastPoint","calcLength","axis","isNear","maxDistance","calcAxisDelta","originPoint","translate","calcBoxDelta","calcRelativeAxis","relative","calcRelativeAxisPosition","calcRelativePosition","calcRelativeAxisConstraints","calcViewportAxisConstraints","layoutAxis","constraintsAxis","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","createAxisDelta","createDelta","createAxis","createBox","eachAxis","convertBoundingBoxToBox","isIdentityScale","hasScale","has2DTranslate","is2DTranslate","applyPointDelta","boxScale","applyAxisDelta","applyBoxDelta","box","snapToDefault","isInteger","translateAxis","transformAxis","transforms","scaleKey","originKey","axisOrigin","xKeys","yKeys","transformBox","measureViewportBox","transformBoxPoints","topLeft","bottomRight","getContextWindow","ownerDocument","defaultView","elementDragControls","VisualElementDragControls","openGlobalLock","isDragging","currentDirection","constraints","hasMutatedConstraints","elastic","originEvent","snapToCursor","isPresent","panSession","pauseAnimation","stopAnimation","dragPropagation","onDragStart","resolveConstraints","isAnimationBlocked","getAxisMotionValue","measuredAxis","layoutBox","parseFloat","dragDirectionLock","onDirectionLock","onDrag","getCurrentDirection","lockThreshold","updateAxis","getAnimationState","getTransformPagePoint","startAnimation","onDragEnd","_point","shouldDrag","axisValue","applyConstraints","dragConstraints","measure","prevConstraints","resolveRefConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","relativeConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","measurePageBox","rootProjectionNode","viewportBox","scroll","root","measuredConstraints","userConstraints","convertBoxToBoundingBox","dragMomentum","dragTransition","onDragTransitionEnd","momentumAnimations","startAxisValueAnimation","dragKey","externalMotionValue","scalePositionWithinConstraints","boxProgress","constraints_calcOrigin","sourceLength","targetLength","updateScroll","updateLayout","addListeners","stopPointerListener","measureDragConstraints","stopMeasureLayoutListener","stopResizeListener","stopLayoutUpdateListener","hasLayoutChanged","motionValue","asyncHandler","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","pixelsToPercent","pixels","correctBorderRadius","correct","MeasureLayoutWithContext","componentDidMount","layoutGroup","switchLayoutGroup","defaultScaleCorrectors","group","register","didUpdate","safeToRemove","setOptions","onExitComplete","getSnapshotBeforeUpdate","layoutDependency","willUpdate","promote","relegate","postRender","stack","getStack","members","componentDidUpdate","currentAnimation","isLead","componentWillUnmount","promoteContext","scheduleCheckAfterUnmount","deregister","MeasureLayout","usePresence","applyTo","boxShadow","treeScale","projectionDelta","shadow","template","createTransformer","xScale","yScale","averageScale","borders","numBorders","asNumber","isPx","getRadius","radiusName","easeCrossfadeIn","compress","easeCrossfadeOut","copyAxisInto","originAxis","copyBoxInto","originBox","removePointDelta","removeAxisTransforms","sourceAxis","removeAxisDelta","relativeProgress","delta_remove_xKeys","delta_remove_yKeys","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","boxEqualsRounded","aspectRatio","NodeStack","y4","scheduleRender","cl","prevLead","lead","indexOfNode","findIndex","member","preserveFollowOpacity","show","resumeFrom","preserveOpacity","snapshot","animationValues","isUpdating","isLayoutDirty","crossfade","hide","exitAnimationComplete","resumingFrom","removeLeadSnapshot","buildProjectionTransform","latestTransform","xTranslate","yTranslate","elementScaleX","elementScaleY","compareByDepth","depth","FlatTree","isDirty","transformAxes","hiddenVisibility","visibility","create_projection_node_id","projectionFrameData","totalNodes","resolvedTargetDeltas","recalculatedProjection","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","animationId","isTreeAnimating","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","eventHandlers","Map","hasTreeAnimated","updateScheduled","projectionUpdateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","MotionDebug","record","hasProjected","isVisible","animationProgress","sharedNodes","path","subscription_manager","L","notifyListeners","subscriptionManager","hasListeners","SVGElement","cancelDelay","resizeUnblockUpdate","timeout","checkElapsed","finishAnimation","registerSharedNode","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","setAnimationOrigin","animationOptions","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","getTransformTemplate","shouldNotifyListeners","prevTransformTemplateValue","updateSnapshot","updateWasBlocked","clearMeasurements","clearIsLayoutDirty","HandoffCancelAllAnimations","resetTransformStyle","notifyLayoutUpdate","S6","preRender","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","alwaysMeasureLayout","prevLayout","layoutCorrected","phase","needsMeasurement","layoutScroll","isRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","removeElementScroll","roundAxis","measuredBox","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","nodeBox","setTargetDelta","targetDelta","forceRelativeParentToResolveTarget","relativeParent","resolvedRelativeTargetAt","forceRecalculation","getLead","isShared","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isProjecting","pendingAnimation","prevTreeScaleX","prevTreeScaleY","applyTreeDeltas","treePath","isSharedTransition","treeLength","projectionTransform","projectionDeltaWithTransform","prevProjectionTransform","notifyAll","prevRelativeTarget","snapshotLatestValues","mixedValues","relativeLayout","snapshotSource","layoutSource","isSharedLayoutAnimation","isOnlyMember","shouldCrossfadeOpacity","hasOpacityCrossfade","mixTargetDelta","mixAxisDelta","output","mixAxis","to","mixValues","follow","opacityExit","borderLabel","followRadius","leadRadius","canMix","animateSingleValue","motionValue$1","completeAnimation","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","yLength","initialPromotionConfig","shouldPreserveFollowOpacity","getPrevLead","hasRotate","resetValues","setStaticValue","_b","styles","pointerEvents","emptyStyles","valuesToRender","corrected","num","resetTree","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","userAgentContains","navigator","userAgent","string","roundPoint","DocumentProjectionNode","documentElement","scrollLeft","body","scrollTop","HTMLProjectionNode","documentNode","getComputedStyle","position","splitCSSVariableRegex","getVariableValue","token","fallback","parseCSSVariable","exec","getPropertyValue","trimmed","positionalKeys","isPositionalKey","hasPositionalKey","isNumOrPxType","getPosFromMatrix","matrix","pos","getTranslateFromMatrix","pos2","pos3","_bbox","matrix3d","transformKeys","nonTranslationalTransformKeys","positionalValues","convertChangedValueTypes","changedKeys","originBbox","elementComputedStyle","targetBbox","jump","checkAndConvertChangedValueTypes","targetPositionalKeys","removedTransformValues","hasAttemptedToRemoveTransformValues","changedValueTypeKeys","toType","fromType","numKeyframes","fromIndex","removeNonTranslationalTransform","removedTransforms","scrollY","pageYOffset","convertedTarget","is_browser","scrollTo","parseDomVariant","resolveCSSVariables","prefersReducedMotion","hasReducedMotionListener","visualElementStore","featureNames","numFeatures","propEventHandlers","numVariantProps","VisualElement","reducedMotionConfig","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","triggerBuild","renderInstance","baseTarget","initialValues","manuallyAnimateOnMount","initialMotionValues","_props","_prevProps","removeFromVariantTree","addVariantChild","bindToMotionValue","initPrefersReducedMotion","matchMedia","motionMediaQuery","setReducedMotionPreferences","matches","addListener","valueIsTransform","removeOnChange","on","latestValue","removeOnRenderRequest","other","sortInstanceNodePosition","loadFeatures","renderedProps","isStrict","preloadedFeatures","initialLayoutGroupConfig","ProjectionNodeConstructor","FeatureConstructor","ProjectionNode","MeasureLayoutComponent","updateFeatures","feature","build","measureInstanceViewportBox","getStaticValue","canMutate","makeTargetAnimatableFromInstance","prevPresenceContext","listener","updateMotionValuesFromProps","nextValue","prevValue","existingValue","hasAnimated","removeValue","handleChildMotionValue","getVariant","getClosestVariantNode","getVariantContext","startAtParent","closestVariantNode","unsubscribe","removeValueFromRenderState","readValue","getBaseTargetFromProps","readValueFromInstance","setBaseTarget","getBaseTarget","valueFromInitial","DOMVisualElement","compareDocumentPosition","getOrigin","transitionOrigin","getOriginFromTransition","checkTargetForNewValues","newValueKeys","numNewValues","targetValue","parsed","HTMLVisualElement","defaultType","computedStyle","childSubscription","textContent","SVGVisualElement","create_visual_element_createDomVisualElement","createAnimationState","animateVisualElement","resolvedDefinition","whileInView","whileDrag","whileFocus","isInitialRender","buildResolvedTypeValues","animateChanges","changedActiveType","removedKeys","encounteredKeys","removedVariantIndex","typeState","propIsVariant","activeDelta","isInherited","prevProp","variantDidChange","shouldAnimateType","handledRemovedValues","definitionList","resolvedValues","allKeys","markToAnimate","blockInitialAnimation","fallbackAnimation","fallbackTarget","shouldAnimate","setAnimateFunction","makeAnimator","updateAnimationControlsSubscription","subscribe","prevAnimate","prevIsPresent","exitAnimation","hasEnteredView","isInView","startObserver","viewport","rootMargin","amount","once","threshold","observeIntersection","rootInteresectionObserver","initIntersectionObserver","lookupRoot","rootObservers","JSON","stringify","IntersectionObserver","observe","unobserve","isIntersecting","onViewportEnter","onViewportLeave","hasOptionsChanged","hasViewportOptionChanged","prevViewport","removeStartListeners","removeEndListeners","removeAccessibleListeners","startPointerPress","startInfo","isPressing","removePointerUpListener","endEvent","endInfo","checkPressEnd","onTapCancel","globalTapTarget","removePointerCancelListener","cancelEvent","cancelInfo","cancelPress","startPress","startAccessiblePress","removeKeydownListener","keydownEvent","keyupEvent","removeBlurListener","removePointerListener","removeFocusListener","onFocus","isFocusVisible","onBlur","removePointerDownListener","onPointerDown","pointerDownEvent","session","createPanHandlers","onPanSessionStart","onPanStart","onPan","onPanEnd","removeGroupControls","dragControls","motion","createMotionProxy","createConfig","customMotionComponentConfig","motion_createMotionComponent","createVisualElement","useRender","ForwardRefComponent","externalRef","configAndProps","_","useLayoutId","layoutGroupId","useCreateMotionContext","getCurrentTreeVariants","useVisualElement","lazyContext","visualElementRef","renderer","useInsertionEffect","wantsHandoff","HandoffComplete","use_isomorphic_effect","Provider","Proxy","componentCache","_target","create_config_createDomMotionConfig","forwardMotionProps","baseConfig","createUseRender","useVisualProps","filteredProps","filterProps","isDom","elementProps","renderedChildren","checkStringStartsWith","isCSSVariableName","startsAsVariableToken","isCSSVariableToken","startsWithToken","singleCssVariableRegex","MotionGlobalConfig","addUniqueItem","item","removeItem","moveItem","toIndex","startIndex","endIndex","warning","_noop_mjs__WEBPACK_IMPORTED_MODULE_0__","invariant","input","isClamp","mixer","inputLength","_errors_mjs__WEBPACK_IMPORTED_MODULE_3__","mixers","createMixers","customMixer","mixerFactory","_mix_index_mjs__WEBPACK_IMPORTED_MODULE_0__","numMixers","easingFunction","_noop_mjs__WEBPACK_IMPORTED_MODULE_1__","_pipe_mjs__WEBPACK_IMPORTED_MODULE_2__","interpolator","progressInRange","_progress_mjs__WEBPACK_IMPORTED_MODULE_4__","_clamp_mjs__WEBPACK_IMPORTED_MODULE_5__","isBrowser","hueToRgb","q","mixLinearColor","fromExpo","expo","colorTypes","hex","rgba","hsla","J","getColorType","asRGBA","model","hslaToRgba","hue","saturation","lightness","alpha","red","green","blue","mixColor","fromRGBA","toRGBA","blended","mixImmediate","mixNumber","getMixer","mixComplex","mixArray","mixObject","numValues","blendValue","originStats","targetStats","canInterpolate","indexes","var","matchOrder","orderedOrigin","pointers","originIndex","originValue","any","combineFunctions","transformers","toFromDifference","SubscriptionManager","subscriptions","_array_mjs__WEBPACK_IMPORTED_MODULE_0__","numSubscriptions","getSize","useConstant","init","useIsomorphicLayoutEffect","_is_browser_mjs__WEBPACK_IMPORTED_MODULE_1__","velocityPerSecond","frameDuration","isFloat","collectMotionValues","MotionValue","version","canTrackVelocity","updateAndNotify","_frameloop_sync_time_mjs__WEBPACK_IMPORTED_MODULE_0__","updatedAt","setPrevFrameValue","setCurrent","change","renderRequest","prevFrameValue","prevUpdatedAt","onChange","subscription","_utils_subscription_manager_mjs__WEBPACK_IMPORTED_MODULE_1__","_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_2__","clearListeners","eventManagers","attach","passiveEffect","stopPassiveEffect","getPrevious","_utils_velocity_per_second_mjs__WEBPACK_IMPORTED_MODULE_3__","animationStart","animationComplete","clearAnimation","animationCancel","isAnimating","destroy","_utils_mjs__WEBPACK_IMPORTED_MODULE_0__","parseInt","_rgba_mjs__WEBPACK_IMPORTED_MODULE_1__","alpha$1","_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_1__","_utils_mjs__WEBPACK_IMPORTED_MODULE_2__","Nw","_numbers_index_mjs__WEBPACK_IMPORTED_MODULE_3__","_rgba_mjs__WEBPACK_IMPORTED_MODULE_0__","_hex_mjs__WEBPACK_IMPORTED_MODULE_1__","_hsla_mjs__WEBPACK_IMPORTED_MODULE_2__","_utils_mjs__WEBPACK_IMPORTED_MODULE_3__","HD","clampRgbUnit","_utils_clamp_mjs__WEBPACK_IMPORTED_MODULE_0__","rgbUnit","_numbers_index_mjs__WEBPACK_IMPORTED_MODULE_1__","isColorString","testProp","mj","splitColor","aName","bName","cName","NUMBER_TOKEN","COLOR_TOKEN","complexRegex","analyseComplexValue","originalValue","toString","matchedValues","parsedValue","_color_index_mjs__WEBPACK_IMPORTED_MODULE_1__","tokenised","parseComplexValue","numSections","convertNumbersToZero","dA","transformer","createUnitType","endsWith","degrees","progressPercentage","sanitize","floatRegex","colorRegex","singleColorRegex","isString","isMotionValue"],"sourceRoot":""}