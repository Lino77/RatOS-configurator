{"version":3,"file":"static/chunks/3867-a27b1f6f5731105d.js","mappings":"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","sources":["webpack://_N_E/./components/setup-steps/printer-rail-settings.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { Dropdown } from '@/components/forms/dropdown';\nimport { Board } from '@/zods/boards';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { Drivers } from '@/data/drivers';\nimport { findPreset, Steppers } from '@/data/steppers';\nimport { BadgeProps, badgeBackgroundColorStyle, badgeBorderColorStyle } from '@/components/common/badge';\nimport { TextInput } from '@/components/forms/text-input';\nimport { Banner } from '@/components/common/banner';\nimport { BoltIcon, LightBulbIcon } from '@heroicons/react/24/outline';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { FireIcon } from '@heroicons/react/24/solid';\nimport {\n\tBasePrinterRail,\n\tPrinterAxis,\n\tPrinterRailDefinition,\n\tgetSupportedVoltages,\n\tmatchesDefaultRail,\n} from '@/zods/motion';\nimport { deserializeDriver, serializePrinterRail } from '@/utils/serialization';\nimport { PrinterRailState, PrinterRailsState } from '@/recoil/printer';\nimport { useToolheads } from '@/hooks/useToolheadConfiguration';\nimport { trpc } from '@/utils/trpc';\nimport { twMerge } from 'tailwind-merge';\nimport { z } from 'zod';\nimport { AnimatePresence, motion } from 'framer-motion';\n\nconst railArray = z.array(BasePrinterRail);\n\ninterface PrinterRailSettingsProps {\n\tselectedBoard: Board | null;\n\tprinterRail: Zod.infer<typeof BasePrinterRail>;\n\tprinterRailDefault: Zod.infer<typeof PrinterRailDefinition>;\n\tperformanceMode?: boolean | null;\n\terrors?: z.inferFormattedError<typeof BasePrinterRail>;\n\t/**\n\t * This component should always be rendered to ensure the settings are updated when\n\t * switching performance mode, even if it isn't visible.\n\t */\n\tisVisible?: boolean;\n}\n\nexport const PrinterRailSettings: React.FC<PrinterRailSettingsProps> = (props) => {\n\tconst toolheads = useToolheads();\n\tconst toolhead = toolheads.find((th) => th.getExtruderAxis() === props.printerRail.axis);\n\tconst canBeExtruderlessBoard = toolheads.every((th) => th.hasToolboard());\n\tconst usesToolboard = toolhead?.getExtruderAxis() === props.printerRailDefault.axis && toolhead?.hasToolboard();\n\tconst board = usesToolboard ? toolhead.getToolboard() : props.selectedBoard;\n\tconst [performanceMode, setPerformanceMode] = useState(!!props.performanceMode);\n\tconst setPrinterRail = useSetRecoilState(PrinterRailState(props.printerRail.axis));\n\tconst printerRails = useRecoilValue(PrinterRailsState);\n\tconst integratedDriver =\n\t\tboard?.integratedDrivers &&\n\t\tboard.integratedDrivers[\n\t\t\tprops.printerRail.axis.startsWith('extruder') ? PrinterAxis.extruder : props.printerRail.axis\n\t\t];\n\tconst [driver, setDriver] = useState(\n\t\tintegratedDriver != null\n\t\t\t? deserializeDriver(integratedDriver) ?? props.printerRail.driver\n\t\t\t: props.printerRail.driver,\n\t);\n\tconst [stepper, setStepper] = useState(props.printerRail.stepper);\n\tconst [homingSpeed, setHomingSpeed] = useState(\n\t\tperformanceMode\n\t\t\t? props.printerRailDefault.performanceMode?.homingSpeed ?? props.printerRailDefault.homingSpeed\n\t\t\t: props.printerRailDefault.homingSpeed,\n\t);\n\tconst [motorSlot, setMotorSlot] = useState(\n\t\tprops.printerRail.motorSlot && props.selectedBoard?.motorSlots?.[props.printerRail.motorSlot]\n\t\t\t? props.printerRail.motorSlot\n\t\t\t: undefined,\n\t);\n\tconst guessMotorSlot = trpc.mcu.reversePinLookup.useQuery(\n\t\t{\n\t\t\taxis: props.printerRail.axis,\n\t\t\tcanUseExtruderlessConfigs: canBeExtruderlessBoard,\n\t\t\tboardPath: board?.path ?? '',\n\t\t},\n\t\t{ enabled: !!board },\n\t);\n\tconst errorCount =\n\t\tprops.errors == null\n\t\t\t? 0\n\t\t\t: Object.keys(props.errors).reduce((acc, key) => {\n\t\t\t\t\tconst objKey = key as keyof typeof props.errors;\n\t\t\t\t\tconst keyErrors = props.errors?.[objKey];\n\t\t\t\t\tif (keyErrors == null) {\n\t\t\t\t\t\treturn acc;\n\t\t\t\t\t}\n\t\t\t\t\tconst count = Array.isArray(keyErrors) ? keyErrors.length : keyErrors._errors.length;\n\t\t\t\t\treturn acc + count;\n\t\t\t\t}, 0);\n\n\tconst isSlotInUse = useCallback(\n\t\t(slot: string | undefined) => {\n\t\t\tif (slot == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn printerRails.some((pr) => {\n\t\t\t\tconst railToolhead = toolheads.find((th) => th.getExtruderAxis() === pr.axis);\n\t\t\t\tif (pr.axis === props.printerRail.axis) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (railToolhead?.hasToolboard()) {\n\t\t\t\t\t// The rail is an extruder rail and the toolhead has a toolboard, no chance of conflict.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn pr.motorSlot === slot;\n\t\t\t});\n\t\t},\n\t\t[printerRails, props.printerRail.axis, toolheads],\n\t);\n\n\tuseEffect(() => {\n\t\tif (guessMotorSlot.data && motorSlot == null && board?.motorSlots?.[guessMotorSlot.data] != null) {\n\t\t\tsetMotorSlot(guessMotorSlot.data);\n\t\t}\n\t}, [board, guessMotorSlot.data, motorSlot, props.printerRailDefault.axis]);\n\n\tconst supportedVoltages = getSupportedVoltages(board, driver).map((v) => {\n\t\treturn {\n\t\t\t...v,\n\t\t\tbadge:\n\t\t\t\tfindPreset(stepper, driver, v.id, undefined, performanceMode) != null\n\t\t\t\t\t? ({\n\t\t\t\t\t\t\tchildren: 'Tuned Preset',\n\t\t\t\t\t\t\tcolor: 'sky',\n\t\t\t\t\t\t} satisfies BadgeProps)\n\t\t\t\t\t: undefined,\n\t\t};\n\t});\n\tconst [voltage, setVoltage] = useState(\n\t\tsupportedVoltages.find((v) => v.id === props.printerRail.voltage) ??\n\t\t\tsupportedVoltages.find(\n\t\t\t\t(v) =>\n\t\t\t\t\tv.id ===\n\t\t\t\t\t(performanceMode && props.printerRailDefault.performanceMode?.voltage\n\t\t\t\t\t\t? props.printerRailDefault.performanceMode.voltage\n\t\t\t\t\t\t: props.printerRailDefault.voltage),\n\t\t\t) ??\n\t\t\tsupportedVoltages[0],\n\t);\n\tconst [current, setCurrent] = useState(props.printerRail.current);\n\tconst defaultPreset = useMemo(\n\t\t() =>\n\t\t\tfindPreset(\n\t\t\t\tprops.printerRailDefault.stepper,\n\t\t\t\tprops.printerRailDefault.driver,\n\t\t\t\tprops.printerRailDefault.voltage,\n\t\t\t\tprops.printerRailDefault.current,\n\t\t\t),\n\t\t[props.printerRailDefault],\n\t);\n\tconst recommendedPreset = useMemo(\n\t\t() => findPreset(stepper, driver, voltage.id, undefined, performanceMode),\n\t\t[stepper, driver, voltage, performanceMode],\n\t);\n\tconst matchingPreset = useMemo(\n\t\t() => findPreset(stepper, driver, voltage.id, current, performanceMode),\n\t\t[stepper, driver, voltage, performanceMode, current],\n\t);\n\n\tconst supportedDrivers = Drivers.filter((d) => {\n\t\treturn d.protocol === 'UART' || board?.stepperSPI != null;\n\t}).map((d) => {\n\t\treturn {\n\t\t\t...d,\n\t\t\tbadge:\n\t\t\t\tfindPreset(stepper, d, voltage.id, undefined, performanceMode) != null\n\t\t\t\t\t? ({\n\t\t\t\t\t\t\tchildren: 'Tuned Preset',\n\t\t\t\t\t\t\tcolor: 'sky',\n\t\t\t\t\t\t} satisfies BadgeProps)\n\t\t\t\t\t: undefined,\n\t\t};\n\t});\n\tconst steppers = Steppers.map((s) => {\n\t\treturn {\n\t\t\t...s,\n\t\t\tbadge:\n\t\t\t\tfindPreset(s, driver, voltage.id, undefined, performanceMode) != null\n\t\t\t\t\t? ({\n\t\t\t\t\t\t\tchildren: 'Tuned Preset',\n\t\t\t\t\t\t\tcolor: 'sky',\n\t\t\t\t\t\t} satisfies BadgeProps)\n\t\t\t\t\t: undefined,\n\t\t};\n\t});\n\n\tuseEffect(() => {\n\t\t// If current rail configuration matches the default rail configuration, adapt current and voltage\n\t\t// to match the performance mode when performance mode changes.\n\t\tif (matchesDefaultRail(props.printerRail, props.printerRailDefault, !props.performanceMode)) {\n\t\t\tif (props.performanceMode && props.printerRailDefault.performanceMode) {\n\t\t\t\tsetHomingSpeed(props.printerRailDefault.performanceMode.homingSpeed ?? props.printerRail.homingSpeed);\n\t\t\t\tif (props.printerRailDefault.performanceMode.voltage != null) {\n\t\t\t\t\tsetVoltage(\n\t\t\t\t\t\tsupportedVoltages.find(\n\t\t\t\t\t\t\t(sv) => sv.id === (props.printerRailDefault.performanceMode?.voltage ?? props.printerRailDefault.voltage),\n\t\t\t\t\t\t) ?? supportedVoltages[0],\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (props.printerRailDefault.performanceMode.current != null) {\n\t\t\t\t\tsetCurrent(props.printerRailDefault.performanceMode.current);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetHomingSpeed(props.printerRailDefault.homingSpeed);\n\t\t\t\tsetVoltage(supportedVoltages.find((sv) => sv.id === props.printerRailDefault.voltage) ?? supportedVoltages[0]);\n\t\t\t\tsetCurrent(props.printerRailDefault.current);\n\t\t\t}\n\t\t}\n\t\tsetPerformanceMode(!!props.performanceMode);\n\t\t// We don't want to react to anything other than performance mode changes.\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [props.performanceMode]);\n\n\tuseEffect(() => {\n\t\tconst currentVoltage = supportedVoltages.find((sv) => sv.id === voltage.id);\n\t\tif (!currentVoltage) {\n\t\t\tsetVoltage(\n\t\t\t\trecommendedPreset\n\t\t\t\t\t? supportedVoltages.find((sv) => sv.id === recommendedPreset.voltage) ?? supportedVoltages[0]\n\t\t\t\t\t: supportedVoltages[0],\n\t\t\t);\n\t\t\tif (recommendedPreset) {\n\t\t\t\tsetCurrent(recommendedPreset.run_current);\n\t\t\t}\n\t\t}\n\t}, [supportedVoltages, voltage, recommendedPreset]);\n\n\tuseEffect(() => {\n\t\tconst newState = {\n\t\t\taxis: props.printerRail.axis,\n\t\t\taxisDescription: props.printerRail.axisDescription,\n\t\t\trotationDistance: props.printerRail.rotationDistance,\n\t\t\thomingSpeed: homingSpeed,\n\t\t\tmotorSlot: motorSlot,\n\t\t\tdriver,\n\t\t\tvoltage: voltage.id,\n\t\t\tstepper,\n\t\t\tcurrent,\n\t\t};\n\t\tconst serializedNew = serializePrinterRail(newState);\n\t\tconst serializedOld = serializePrinterRail(props.printerRail);\n\t\tconst isDirty = Object.keys(serializedNew).some((key) => {\n\t\t\treturn serializedNew[key as keyof typeof serializedNew] !== serializedOld[key as keyof typeof serializedNew];\n\t\t});\n\t\tif (isDirty) {\n\t\t\tsetPrinterRail(serializedNew);\n\t\t}\n\t}, [current, driver, props.printerRail, homingSpeed, setPrinterRail, stepper, voltage.id, motorSlot]);\n\n\tconst isRecommendedPresetCompatible = recommendedPreset && recommendedPreset.run_current === current;\n\tconst railName =\n\t\tprops.printerRail.axis === 'extruder'\n\t\t\t? 'Extruder T0'\n\t\t\t: props.printerRail.axis === PrinterAxis.extruder1\n\t\t\t\t? 'Extruder T1'\n\t\t\t\t: 'Stepper ' + props.printerRail.axis.toLocaleUpperCase();\n\tconst motorSlotOptions =\n\t\tboard?.motorSlots != null && Object.keys(board.motorSlots).length > 0\n\t\t\t? Object.keys(board.motorSlots)\n\t\t\t\t\t.map((ms) => {\n\t\t\t\t\t\tif (board.motorSlots?.[ms].title == null) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst hasDiagPin = board.motorSlots?.[ms].diag_pin != null;\n\t\t\t\t\t\tconst hasEndstopPin = board.motorSlots?.[ms].endstop_pin != null;\n\t\t\t\t\t\tconst isInUse = isSlotInUse(ms);\n\t\t\t\t\t\tconst disabled =\n\t\t\t\t\t\t\t(props.printerRailDefault.axis.startsWith('x') || props.printerRailDefault.axis.startsWith('y')) &&\n\t\t\t\t\t\t\t!hasDiagPin;\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tid: ms,\n\t\t\t\t\t\t\ttitle: board.motorSlots?.[ms].title,\n\t\t\t\t\t\t\tdisabled: disabled,\n\t\t\t\t\t\t\tbadge: [\n\t\t\t\t\t\t\t\t!hasDiagPin\n\t\t\t\t\t\t\t\t\t? ({ children: 'No diag pin', color: disabled ? 'red' : 'gray' } satisfies BadgeProps)\n\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t\t!hasEndstopPin ? ({ children: 'No endstop pin', color: 'gray' } satisfies BadgeProps) : undefined,\n\t\t\t\t\t\t\t\tisInUse === true ? ({ children: 'In use', color: 'orange' } satisfies BadgeProps) : undefined,\n\t\t\t\t\t\t\t].filter(Boolean),\n\t\t\t\t\t\t};\n\t\t\t\t\t})\n\t\t\t\t\t.filter(Boolean)\n\t\t\t: null;\n\tconst motorSlotBadge = useMemo(() => {\n\t\tif (motorSlot == null || board?.motorSlots?.[motorSlot].title == null) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst hasDiagPin = board.motorSlots?.[motorSlot].diag_pin != null;\n\t\tconst disabled =\n\t\t\t(props.printerRailDefault.axis.startsWith('x') || props.printerRailDefault.axis.startsWith('y')) && !hasDiagPin;\n\t\treturn !hasDiagPin && disabled ? ({ children: 'No diag pin', color: 'red' } satisfies BadgeProps) : undefined;\n\t}, [board, motorSlot, props.printerRailDefault.axis]);\n\treturn (\n\t\t<AnimatePresence>\n\t\t\t{props.isVisible && (\n\t\t\t\t<motion.div\n\t\t\t\t\tkey={props.printerRail.axis}\n\t\t\t\t\texit={{ opacity: 0, scale: 0.9, y: -40 }}\n\t\t\t\t\tinitial={{ opacity: 0, scale: 0.9, y: 40 }}\n\t\t\t\t\tanimate={{ opacity: 1, scale: 1, y: 0 }}\n\t\t\t\t\tclassName={twMerge(\n\t\t\t\t\t\t'break-inside-avoid-column rounded-md border border-zinc-300 p-4 shadow-lg dark:border-zinc-700',\n\t\t\t\t\t\terrorCount > 0 && badgeBorderColorStyle({ color: 'red' }),\n\t\t\t\t\t\terrorCount > 0 && badgeBackgroundColorStyle({ color: 'red' }),\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"\">\n\t\t\t\t\t\t<h3\n\t\t\t\t\t\t\tclassName={twMerge(\n\t\t\t\t\t\t\t\t'text-sm font-bold leading-6 text-zinc-700 dark:text-zinc-300',\n\t\t\t\t\t\t\t\terrorCount > 0 && 'text-red-900/80 dark:text-red-100',\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{railName}\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t<p\n\t\t\t\t\t\t\tclassName={twMerge(\n\t\t\t\t\t\t\t\t'text-sm text-zinc-500 dark:text-zinc-400',\n\t\t\t\t\t\t\t\terrorCount > 0 && 'text-red-800/80 dark:text-red-100/60',\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{props.printerRail.axisDescription}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"mt-4 grid grid-cols-1 gap-4 sm:grid-cols-2\">\n\t\t\t\t\t\t{motorSlotOptions && (\n\t\t\t\t\t\t\t<div className=\"col-span-2\">\n\t\t\t\t\t\t\t\t<Dropdown\n\t\t\t\t\t\t\t\t\tlabel=\"Motor Slot\"\n\t\t\t\t\t\t\t\t\toptions={motorSlotOptions}\n\t\t\t\t\t\t\t\t\terror={props.errors?.motorSlot?._errors.join('\\n')}\n\t\t\t\t\t\t\t\t\tonSelect={(ms) => {\n\t\t\t\t\t\t\t\t\t\tsetMotorSlot(ms.id);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tvalue={motorSlot ? motorSlotOptions.find((ms) => ms.id === motorSlot) : undefined}\n\t\t\t\t\t\t\t\t\tbadge={motorSlotBadge}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<div className=\"col-span-2\">\n\t\t\t\t\t\t\t<Dropdown\n\t\t\t\t\t\t\t\tlabel=\"Driver\"\n\t\t\t\t\t\t\t\toptions={supportedDrivers}\n\t\t\t\t\t\t\t\tonSelect={setDriver}\n\t\t\t\t\t\t\t\tvalue={driver}\n\t\t\t\t\t\t\t\tdisabled={integratedDriver != null}\n\t\t\t\t\t\t\t\tbadge={[\n\t\t\t\t\t\t\t\t\tintegratedDriver != null\n\t\t\t\t\t\t\t\t\t\t? ({ children: 'Integrated', color: 'sky' } satisfies BadgeProps)\n\t\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t\t\tusesToolboard ? ({ children: 'Toolboard', color: 'yellow' } satisfies BadgeProps) : undefined,\n\t\t\t\t\t\t\t\t].filter(Boolean)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col-span-2\">\n\t\t\t\t\t\t\t<Dropdown label=\"Stepper\" options={steppers} onSelect={setStepper} value={stepper} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col-span-1\">\n\t\t\t\t\t\t\t<Dropdown label=\"Voltage\" options={supportedVoltages} onSelect={setVoltage} value={voltage} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col-span-1\">\n\t\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\tlabel=\"Current\"\n\t\t\t\t\t\t\t\tvalue={current}\n\t\t\t\t\t\t\t\tonChange={setCurrent}\n\t\t\t\t\t\t\t\tinputMode=\"decimal\"\n\t\t\t\t\t\t\t\tstep=\"any\"\n\t\t\t\t\t\t\t\tmin={0}\n\t\t\t\t\t\t\t\tmax={driver.maxCurrent}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{stepper.maxPeakCurrent / 1.41 < current && (\n\t\t\t\t\t\t\t<Banner Icon={FireIcon} color=\"yellow\" title=\"Stepper overcurrent!\" className=\"col-span-2\">\n\t\t\t\t\t\t\t\tYour stepper motor is rated for {Math.floor((stepper.maxPeakCurrent * 100) / 1.41) / 100}A RMS, but you\n\t\t\t\t\t\t\t\tare using {current}A.\n\t\t\t\t\t\t\t</Banner>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{matchingPreset != null && (\n\t\t\t\t\t\t\t<Banner Icon={LightBulbIcon} color=\"brand\" title=\"Driver tuning applied!\" className=\"col-span-2\">\n\t\t\t\t\t\t\t\tRatOS preset applied automatically.\n\t\t\t\t\t\t\t</Banner>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{matchingPreset?.run_current !== defaultPreset?.run_current &&\n\t\t\t\t\t\t\trecommendedPreset &&\n\t\t\t\t\t\t\t!isRecommendedPresetCompatible && (\n\t\t\t\t\t\t\t\t<Banner\n\t\t\t\t\t\t\t\t\tIcon={BoltIcon}\n\t\t\t\t\t\t\t\t\tcolor=\"sky\"\n\t\t\t\t\t\t\t\t\ttitle=\"Recommended tuning preset available at different current\"\n\t\t\t\t\t\t\t\t\tclassName=\"col-span-2\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tRatOS has a recommended preset for your current settings at {recommendedPreset.run_current}A. You can{' '}\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer font-bold underline hover:no-underline\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => setCurrent(recommendedPreset.run_current)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tchange the current to {recommendedPreset.run_current}A\n\t\t\t\t\t\t\t\t\t</span>{' '}\n\t\t\t\t\t\t\t\t\tto apply the preset automatically.\n\t\t\t\t\t\t\t\t</Banner>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</motion.div>\n\t\t\t)}\n\t\t</AnimatePresence>\n\t);\n};\n"],"names":["z","array","BasePrinterRail","PrinterRailSettings","props","deserializeDriver","board","supportedVoltages","toolheads","useToolheads","toolhead","find","th","getExtruderAxis","printerRail","axis","canBeExtruderlessBoard","every","hasToolboard","usesToolboard","printerRailDefault","getToolboard","selectedBoard","performanceMode","setPerformanceMode","useState","setPrinterRail","useSetRecoilState","PrinterRailState","printerRails","useRecoilValue","PrinterRailsState","integratedDriver","integratedDrivers","startsWith","PrinterAxis","extruder","driver","setDriver","stepper","setStepper","homingSpeed","setHomingSpeed","motorSlot","setMotorSlot","motorSlots","undefined","guessMotorSlot","trpc","mcu","reversePinLookup","useQuery","canUseExtruderlessConfigs","boardPath","path","enabled","errorCount","errors","Object","keys","reduce","acc","key","keyErrors","count","Array","isArray","length","_errors","isSlotInUse","useCallback","slot","some","railToolhead","pr","useEffect","data","getSupportedVoltages","map","v","badge","findPreset","id","children","color","voltage","setVoltage","current","setCurrent","defaultPreset","useMemo","recommendedPreset","matchingPreset","supportedDrivers","Drivers","filter","d","protocol","stepperSPI","steppers","Steppers","s","matchesDefaultRail","sv","currentVoltage","run_current","newState","axisDescription","rotationDistance","serializedNew","serializePrinterRail","serializedOld","isDirty","isRecommendedPresetCompatible","railName","extruder1","toLocaleUpperCase","motorSlotOptions","ms","title","hasDiagPin","diag_pin","hasEndstopPin","endstop_pin","isInUse","disabled","Boolean","motorSlotBadge","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","AnimatePresence","isVisible","jsxs","motion","div","exit","opacity","scale","y","initial","animate","className","twMerge","badgeBorderColorStyle","badgeBackgroundColorStyle","h3","p","Dropdown","label","options","error","join","onSelect","value","TextInput","type","onChange","inputMode","step","min","max","maxCurrent","maxPeakCurrent","Banner","Icon","FireIcon","Math","floor","LightBulbIcon","BoltIcon","span","onClick"],"sourceRoot":""}