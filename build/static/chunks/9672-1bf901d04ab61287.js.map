{"version":3,"file":"static/chunks/9672-1bf901d04ab61287.js","mappings":"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","sources":["webpack://_N_E/./components/common/card.tsx","webpack://_N_E/./components/setup-steps/printer-rail-settings.tsx","webpack://_N_E/<anon>"],"sourcesContent":["'use client';\nimport { cva } from 'class-variance-authority';\nimport React from 'react';\nimport { type MotionProps, motion } from 'framer-motion';\n\nconst cardVariants = cva([\n\t'relative rounded-lg  bg-white dark:bg-zinc-900/60',\n\t'shadow-[0px_0px_0px_1px_rgba(9,9,11,0.07),0px_2px_2px_0px_rgba(9,9,11,0.05)] dark:shadow-[0px_0px_0px_1px_rgba(255,255,255,0.05)]',\n\t'dark:before:-inset-px dark:before:rounded-xl',\n\t'dark:before:pointer-events-none dark:before:absolute dark:before:shadow-[0px_2px_8px_0px_rgba(0,_0,_0,_0.20),_0px_1px_0px_0px_rgba(255,_255,_255,_0.07)_inset]',\n]);\n\ntype CardProps = React.PropsWithChildren<\n\t{\n\t\tclassName?: string;\n\t} & MotionProps\n>;\n\nexport const Card: React.FC<CardProps> = (props) => {\n\treturn (\n\t\t<motion.div {...props} className={cardVariants({ className: props.className })}>\n\t\t\t{props.children}\n\t\t</motion.div>\n\t);\n};\n","import { Dropdown } from '@/components/forms/dropdown';\nimport { Board } from '@/zods/boards';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { Drivers } from '@/data/drivers';\nimport { findPreset, Steppers } from '@/data/steppers';\nimport { BadgeProps, badgeBackgroundColorStyle, badgeBorderColorStyle } from '@/components/common/badge';\nimport { TextInput } from '@/components/forms/text-input';\nimport { Banner } from '@/components/common/banner';\nimport { BoltIcon, LightBulbIcon } from '@heroicons/react/24/outline';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { FireIcon } from '@heroicons/react/24/solid';\nimport {\n\tBasePrinterRail,\n\tPrinterAxis,\n\tPrinterRailDefinition,\n\tgetSupportedVoltages,\n\tmatchesDefaultRail,\n} from '@/zods/motion';\nimport { deserializeDriver, serializePrinterRail } from '@/utils/serialization';\nimport { PrinterRailState, PrinterRailsState } from '@/recoil/printer';\nimport { useToolheads } from '@/hooks/useToolheadConfiguration';\nimport { trpc } from '@/utils/trpc';\nimport { twMerge } from 'tailwind-merge';\nimport { z } from 'zod';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { Card } from '@/components/common/card';\n\nconst railArray = z.array(BasePrinterRail);\n\ninterface PrinterRailSettingsProps {\n\tselectedBoard: Board | null;\n\tprinterRail: Zod.infer<typeof BasePrinterRail>;\n\tprinterRailDefault: Zod.infer<typeof PrinterRailDefinition>;\n\tperformanceMode?: boolean | null;\n\terrors?: z.inferFormattedError<typeof BasePrinterRail>;\n\t/**\n\t * This component should always be rendered to ensure the settings are updated when\n\t * switching performance mode, even if it isn't visible.\n\t */\n\tisVisible?: boolean;\n}\n\nexport const PrinterRailSettings: React.FC<PrinterRailSettingsProps> = (props) => {\n\tconst toolheads = useToolheads();\n\tconst toolhead = toolheads.find((th) => th.getExtruderAxis() === props.printerRail.axis);\n\tconst canBeExtruderlessBoard = toolheads.every((th) => th.hasToolboard());\n\tconst usesToolboard = toolhead?.getExtruderAxis() === props.printerRailDefault.axis && toolhead?.hasToolboard();\n\tconst board = usesToolboard ? toolhead.getToolboard() : props.selectedBoard;\n\tconst [performanceMode, setPerformanceMode] = useState(!!props.performanceMode);\n\tconst setPrinterRail = useSetRecoilState(PrinterRailState(props.printerRail.axis));\n\tconst printerRails = useRecoilValue(PrinterRailsState);\n\tconst integratedDriver =\n\t\tboard?.integratedDrivers &&\n\t\tboard.integratedDrivers[\n\t\t\tprops.printerRail.axis.startsWith('extruder') ? PrinterAxis.extruder : props.printerRail.axis\n\t\t];\n\tconst [driver, setDriver] = useState(\n\t\tintegratedDriver != null\n\t\t\t? deserializeDriver(integratedDriver) ?? props.printerRail.driver\n\t\t\t: props.printerRail.driver,\n\t);\n\tconst [stepper, setStepper] = useState(props.printerRail.stepper);\n\tconst [homingSpeed, setHomingSpeed] = useState(\n\t\tperformanceMode\n\t\t\t? props.printerRailDefault.performanceMode?.homingSpeed ?? props.printerRailDefault.homingSpeed\n\t\t\t: props.printerRailDefault.homingSpeed,\n\t);\n\tconst [motorSlot, setMotorSlot] = useState(\n\t\tprops.printerRail.motorSlot && props.selectedBoard?.motorSlots?.[props.printerRail.motorSlot]\n\t\t\t? props.printerRail.motorSlot\n\t\t\t: undefined,\n\t);\n\tconst guessMotorSlot = trpc.mcu.reversePinLookup.useQuery(\n\t\t{\n\t\t\taxis: props.printerRail.axis,\n\t\t\tcanUseExtruderlessConfigs: canBeExtruderlessBoard,\n\t\t\tboardPath: board?.path ?? '',\n\t\t},\n\t\t{ enabled: !!board },\n\t);\n\tconst errorCount =\n\t\tprops.errors == null\n\t\t\t? 0\n\t\t\t: Object.keys(props.errors).reduce((acc, key) => {\n\t\t\t\t\tconst objKey = key as keyof typeof props.errors;\n\t\t\t\t\tconst keyErrors = props.errors?.[objKey];\n\t\t\t\t\tif (keyErrors == null) {\n\t\t\t\t\t\treturn acc;\n\t\t\t\t\t}\n\t\t\t\t\tconst count = Array.isArray(keyErrors) ? keyErrors.length : keyErrors._errors.length;\n\t\t\t\t\treturn acc + count;\n\t\t\t\t}, 0);\n\n\tconst isSlotInUse = useCallback(\n\t\t(slot: string | undefined) => {\n\t\t\tif (slot == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn printerRails.some((pr) => {\n\t\t\t\tconst railToolhead = toolheads.find((th) => th.getExtruderAxis() === pr.axis);\n\t\t\t\tif (pr.axis === props.printerRail.axis) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (railToolhead?.hasToolboard()) {\n\t\t\t\t\t// The rail is an extruder rail and the toolhead has a toolboard, no chance of conflict.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn pr.motorSlot === slot;\n\t\t\t});\n\t\t},\n\t\t[printerRails, props.printerRail.axis, toolheads],\n\t);\n\n\tuseEffect(() => {\n\t\tif (guessMotorSlot.data && motorSlot == null && board?.motorSlots?.[guessMotorSlot.data] != null) {\n\t\t\tsetMotorSlot(guessMotorSlot.data);\n\t\t}\n\t}, [board, guessMotorSlot.data, motorSlot, props.printerRailDefault.axis]);\n\n\tconst supportedVoltages = getSupportedVoltages(board, driver).map((v) => {\n\t\treturn {\n\t\t\t...v,\n\t\t\tbadge:\n\t\t\t\tfindPreset(stepper, driver, v.id, undefined, performanceMode) != null\n\t\t\t\t\t? ({\n\t\t\t\t\t\t\tchildren: 'Tuned Preset',\n\t\t\t\t\t\t\tcolor: 'sky',\n\t\t\t\t\t\t} satisfies BadgeProps)\n\t\t\t\t\t: undefined,\n\t\t};\n\t});\n\tconst [voltage, setVoltage] = useState(\n\t\tsupportedVoltages.find((v) => v.id === props.printerRail.voltage) ??\n\t\t\tsupportedVoltages.find(\n\t\t\t\t(v) =>\n\t\t\t\t\tv.id ===\n\t\t\t\t\t(performanceMode && props.printerRailDefault.performanceMode?.voltage\n\t\t\t\t\t\t? props.printerRailDefault.performanceMode.voltage\n\t\t\t\t\t\t: props.printerRailDefault.voltage),\n\t\t\t) ??\n\t\t\tsupportedVoltages[0],\n\t);\n\tconst [current, setCurrent] = useState(props.printerRail.current);\n\tconst defaultPreset = useMemo(\n\t\t() =>\n\t\t\tfindPreset(\n\t\t\t\tprops.printerRailDefault.stepper,\n\t\t\t\tprops.printerRailDefault.driver,\n\t\t\t\tprops.printerRailDefault.voltage,\n\t\t\t\tprops.printerRailDefault.current,\n\t\t\t),\n\t\t[props.printerRailDefault],\n\t);\n\tconst recommendedPreset = useMemo(\n\t\t() => findPreset(stepper, driver, voltage.id, undefined, performanceMode),\n\t\t[stepper, driver, voltage, performanceMode],\n\t);\n\tconst matchingPreset = useMemo(\n\t\t() => findPreset(stepper, driver, voltage.id, current, performanceMode),\n\t\t[stepper, driver, voltage, performanceMode, current],\n\t);\n\n\tconst supportedDrivers = Drivers.filter((d) => {\n\t\treturn d.protocol === 'UART' || board?.stepperSPI != null;\n\t}).map((d) => {\n\t\treturn {\n\t\t\t...d,\n\t\t\tbadge:\n\t\t\t\tfindPreset(stepper, d, voltage.id, undefined, performanceMode) != null\n\t\t\t\t\t? ({\n\t\t\t\t\t\t\tchildren: 'Tuned Preset',\n\t\t\t\t\t\t\tcolor: 'sky',\n\t\t\t\t\t\t} satisfies BadgeProps)\n\t\t\t\t\t: undefined,\n\t\t};\n\t});\n\tconst steppers = Steppers.map((s) => {\n\t\treturn {\n\t\t\t...s,\n\t\t\tbadge:\n\t\t\t\tfindPreset(s, driver, voltage.id, undefined, performanceMode) != null\n\t\t\t\t\t? ({\n\t\t\t\t\t\t\tchildren: 'Tuned Preset',\n\t\t\t\t\t\t\tcolor: 'sky',\n\t\t\t\t\t\t} satisfies BadgeProps)\n\t\t\t\t\t: undefined,\n\t\t};\n\t});\n\n\tuseEffect(() => {\n\t\t// If current rail configuration matches the default rail configuration, adapt current and voltage\n\t\t// to match the performance mode when performance mode changes.\n\t\tif (matchesDefaultRail(props.printerRail, props.printerRailDefault, !props.performanceMode)) {\n\t\t\tif (props.performanceMode && props.printerRailDefault.performanceMode) {\n\t\t\t\tsetHomingSpeed(props.printerRailDefault.performanceMode.homingSpeed ?? props.printerRail.homingSpeed);\n\t\t\t\tif (props.printerRailDefault.performanceMode.voltage != null) {\n\t\t\t\t\tsetVoltage(\n\t\t\t\t\t\tsupportedVoltages.find(\n\t\t\t\t\t\t\t(sv) => sv.id === (props.printerRailDefault.performanceMode?.voltage ?? props.printerRailDefault.voltage),\n\t\t\t\t\t\t) ?? supportedVoltages[0],\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (props.printerRailDefault.performanceMode.current != null) {\n\t\t\t\t\tsetCurrent(props.printerRailDefault.performanceMode.current);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetHomingSpeed(props.printerRailDefault.homingSpeed);\n\t\t\t\tsetVoltage(supportedVoltages.find((sv) => sv.id === props.printerRailDefault.voltage) ?? supportedVoltages[0]);\n\t\t\t\tsetCurrent(props.printerRailDefault.current);\n\t\t\t}\n\t\t}\n\t\tsetPerformanceMode(!!props.performanceMode);\n\t\t// We don't want to react to anything other than performance mode changes.\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [props.performanceMode]);\n\n\tuseEffect(() => {\n\t\tconst currentVoltage = supportedVoltages.find((sv) => sv.id === voltage.id);\n\t\tif (!currentVoltage) {\n\t\t\tsetVoltage(\n\t\t\t\trecommendedPreset\n\t\t\t\t\t? supportedVoltages.find((sv) => sv.id === recommendedPreset.voltage) ?? supportedVoltages[0]\n\t\t\t\t\t: supportedVoltages[0],\n\t\t\t);\n\t\t\tif (recommendedPreset) {\n\t\t\t\tsetCurrent(recommendedPreset.run_current);\n\t\t\t}\n\t\t}\n\t}, [supportedVoltages, voltage, recommendedPreset]);\n\n\tuseEffect(() => {\n\t\tconst newState = {\n\t\t\taxis: props.printerRail.axis,\n\t\t\taxisDescription: props.printerRail.axisDescription,\n\t\t\trotationDistance: props.printerRail.rotationDistance,\n\t\t\thomingSpeed: homingSpeed,\n\t\t\tmotorSlot: motorSlot,\n\t\t\tdriver,\n\t\t\tvoltage: voltage.id,\n\t\t\tstepper,\n\t\t\tcurrent,\n\t\t};\n\t\tconst serializedNew = serializePrinterRail(newState);\n\t\tconst serializedOld = serializePrinterRail(props.printerRail);\n\t\tconst isDirty = Object.keys(serializedNew).some((key) => {\n\t\t\treturn serializedNew[key as keyof typeof serializedNew] !== serializedOld[key as keyof typeof serializedNew];\n\t\t});\n\t\tif (isDirty) {\n\t\t\tsetPrinterRail(serializedNew);\n\t\t}\n\t}, [current, driver, props.printerRail, homingSpeed, setPrinterRail, stepper, voltage.id, motorSlot]);\n\n\tconst isRecommendedPresetCompatible = recommendedPreset && recommendedPreset.run_current === current;\n\tconst railName =\n\t\tprops.printerRail.axis === 'extruder'\n\t\t\t? 'Extruder T0'\n\t\t\t: props.printerRail.axis === PrinterAxis.extruder1\n\t\t\t\t? 'Extruder T1'\n\t\t\t\t: 'Stepper ' + props.printerRail.axis.toLocaleUpperCase();\n\tconst motorSlotOptions =\n\t\tboard?.motorSlots != null && Object.keys(board.motorSlots).length > 0\n\t\t\t? Object.keys(board.motorSlots)\n\t\t\t\t\t.map((ms) => {\n\t\t\t\t\t\tif (board.motorSlots?.[ms].title == null) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst hasDiagPin = board.motorSlots?.[ms].diag_pin != null;\n\t\t\t\t\t\tconst hasEndstopPin = board.motorSlots?.[ms].endstop_pin != null;\n\t\t\t\t\t\tconst isInUse = isSlotInUse(ms);\n\t\t\t\t\t\tconst disabled =\n\t\t\t\t\t\t\t(props.printerRailDefault.axis.startsWith('x') || props.printerRailDefault.axis.startsWith('y')) &&\n\t\t\t\t\t\t\t!hasDiagPin;\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tid: ms,\n\t\t\t\t\t\t\ttitle: board.motorSlots?.[ms].title,\n\t\t\t\t\t\t\tdisabled: disabled,\n\t\t\t\t\t\t\tbadge: [\n\t\t\t\t\t\t\t\t!hasDiagPin\n\t\t\t\t\t\t\t\t\t? ({ children: 'No diag pin', color: disabled ? 'red' : 'gray' } satisfies BadgeProps)\n\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t\t!hasEndstopPin ? ({ children: 'No endstop pin', color: 'gray' } satisfies BadgeProps) : undefined,\n\t\t\t\t\t\t\t\tisInUse === true ? ({ children: 'In use', color: 'orange' } satisfies BadgeProps) : undefined,\n\t\t\t\t\t\t\t].filter(Boolean),\n\t\t\t\t\t\t};\n\t\t\t\t\t})\n\t\t\t\t\t.filter(Boolean)\n\t\t\t: null;\n\tconst motorSlotBadge = useMemo(() => {\n\t\tif (motorSlot == null || board?.motorSlots?.[motorSlot].title == null) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst hasDiagPin = board.motorSlots?.[motorSlot].diag_pin != null;\n\t\tconst disabled =\n\t\t\t(props.printerRailDefault.axis.startsWith('x') || props.printerRailDefault.axis.startsWith('y')) && !hasDiagPin;\n\t\treturn !hasDiagPin && disabled ? ({ children: 'No diag pin', color: 'red' } satisfies BadgeProps) : undefined;\n\t}, [board, motorSlot, props.printerRailDefault.axis]);\n\treturn (\n\t\t<AnimatePresence>\n\t\t\t{props.isVisible && (\n\t\t\t\t<Card\n\t\t\t\t\tkey={props.printerRail.axis}\n\t\t\t\t\texit={{ opacity: 0, scale: 0.9, y: -40 }}\n\t\t\t\t\tinitial={{ opacity: 0, scale: 0.9, y: 40 }}\n\t\t\t\t\tanimate={{ opacity: 1, scale: 1, y: 0 }}\n\t\t\t\t\tclassName={twMerge(\n\t\t\t\t\t\t'break-inside-avoid-column p-4',\n\t\t\t\t\t\terrorCount > 0 && badgeBorderColorStyle({ color: 'red' }),\n\t\t\t\t\t\terrorCount > 0 && badgeBackgroundColorStyle({ color: 'red' }),\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"\">\n\t\t\t\t\t\t<h3\n\t\t\t\t\t\t\tclassName={twMerge(\n\t\t\t\t\t\t\t\t'text-sm font-bold leading-6 text-zinc-700 dark:text-zinc-300',\n\t\t\t\t\t\t\t\terrorCount > 0 && 'text-red-900/80 dark:text-red-100',\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{railName}\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t<p\n\t\t\t\t\t\t\tclassName={twMerge(\n\t\t\t\t\t\t\t\t'text-sm text-zinc-500 dark:text-zinc-400',\n\t\t\t\t\t\t\t\terrorCount > 0 && 'text-red-800/80 dark:text-red-100/60',\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{props.printerRail.axisDescription}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"mt-4 grid grid-cols-1 gap-4 sm:grid-cols-2\">\n\t\t\t\t\t\t{motorSlotOptions && (\n\t\t\t\t\t\t\t<div className=\"col-span-2\">\n\t\t\t\t\t\t\t\t<Dropdown\n\t\t\t\t\t\t\t\t\tlabel=\"Motor Slot\"\n\t\t\t\t\t\t\t\t\toptions={motorSlotOptions}\n\t\t\t\t\t\t\t\t\terror={props.errors?.motorSlot?._errors.join('\\n')}\n\t\t\t\t\t\t\t\t\tonSelect={(ms) => {\n\t\t\t\t\t\t\t\t\t\tsetMotorSlot(ms.id);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tvalue={motorSlot ? motorSlotOptions.find((ms) => ms.id === motorSlot) : undefined}\n\t\t\t\t\t\t\t\t\tbadge={motorSlotBadge}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<div className=\"col-span-2\">\n\t\t\t\t\t\t\t<Dropdown\n\t\t\t\t\t\t\t\tlabel=\"Driver\"\n\t\t\t\t\t\t\t\toptions={supportedDrivers}\n\t\t\t\t\t\t\t\tonSelect={setDriver}\n\t\t\t\t\t\t\t\tvalue={driver}\n\t\t\t\t\t\t\t\tdisabled={integratedDriver != null}\n\t\t\t\t\t\t\t\tbadge={[\n\t\t\t\t\t\t\t\t\tintegratedDriver != null\n\t\t\t\t\t\t\t\t\t\t? ({ children: 'Integrated', color: 'sky' } satisfies BadgeProps)\n\t\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t\t\tusesToolboard ? ({ children: 'Toolboard', color: 'yellow' } satisfies BadgeProps) : undefined,\n\t\t\t\t\t\t\t\t].filter(Boolean)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col-span-2\">\n\t\t\t\t\t\t\t<Dropdown label=\"Stepper\" options={steppers} onSelect={setStepper} value={stepper} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col-span-1\">\n\t\t\t\t\t\t\t<Dropdown label=\"Voltage\" options={supportedVoltages} onSelect={setVoltage} value={voltage} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col-span-1\">\n\t\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\tlabel=\"Current\"\n\t\t\t\t\t\t\t\tvalue={current}\n\t\t\t\t\t\t\t\tonChange={setCurrent}\n\t\t\t\t\t\t\t\tinputMode=\"decimal\"\n\t\t\t\t\t\t\t\tstep=\"any\"\n\t\t\t\t\t\t\t\tmin={0}\n\t\t\t\t\t\t\t\tmax={driver.maxCurrent}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{stepper.maxPeakCurrent / 1.41 < current && (\n\t\t\t\t\t\t\t<Banner Icon={FireIcon} color=\"yellow\" title=\"Stepper overcurrent!\" className=\"col-span-2\">\n\t\t\t\t\t\t\t\tYour stepper motor is rated for {Math.floor((stepper.maxPeakCurrent * 100) / 1.41) / 100}A RMS, but you\n\t\t\t\t\t\t\t\tare using {current}A.\n\t\t\t\t\t\t\t</Banner>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{matchingPreset != null && (\n\t\t\t\t\t\t\t<Banner Icon={LightBulbIcon} color=\"brand\" title=\"Driver tuning applied!\" className=\"col-span-2\">\n\t\t\t\t\t\t\t\tRatOS preset applied automatically.\n\t\t\t\t\t\t\t</Banner>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{matchingPreset?.run_current !== defaultPreset?.run_current &&\n\t\t\t\t\t\t\trecommendedPreset &&\n\t\t\t\t\t\t\t!isRecommendedPresetCompatible && (\n\t\t\t\t\t\t\t\t<Banner\n\t\t\t\t\t\t\t\t\tIcon={BoltIcon}\n\t\t\t\t\t\t\t\t\tcolor=\"sky\"\n\t\t\t\t\t\t\t\t\ttitle=\"Recommended tuning preset available at different current\"\n\t\t\t\t\t\t\t\t\tclassName=\"col-span-2\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tRatOS has a recommended preset for your current settings at {recommendedPreset.run_current}A. You can{' '}\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer font-bold underline hover:no-underline\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => setCurrent(recommendedPreset.run_current)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tchange the current to {recommendedPreset.run_current}A\n\t\t\t\t\t\t\t\t\t</span>{' '}\n\t\t\t\t\t\t\t\t\tto apply the preset automatically.\n\t\t\t\t\t\t\t\t</Banner>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</Card>\n\t\t\t)}\n\t\t</AnimatePresence>\n\t);\n};\n"],"names":["cardVariants","cva","Card","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","motion","div","props","className","children","z","array","BasePrinterRail","PrinterRailSettings","deserializeDriver","board","supportedVoltages","toolheads","useToolheads","toolhead","find","th","getExtruderAxis","printerRail","axis","canBeExtruderlessBoard","every","hasToolboard","usesToolboard","printerRailDefault","getToolboard","selectedBoard","performanceMode","setPerformanceMode","useState","setPrinterRail","useSetRecoilState","PrinterRailState","printerRails","useRecoilValue","PrinterRailsState","integratedDriver","integratedDrivers","startsWith","PrinterAxis","extruder","driver","setDriver","stepper","setStepper","homingSpeed","setHomingSpeed","motorSlot","setMotorSlot","motorSlots","undefined","guessMotorSlot","trpc","mcu","reversePinLookup","useQuery","canUseExtruderlessConfigs","boardPath","path","enabled","errorCount","errors","Object","keys","reduce","acc","key","keyErrors","count","Array","isArray","length","_errors","isSlotInUse","useCallback","slot","some","railToolhead","pr","useEffect","data","getSupportedVoltages","map","v","badge","findPreset","id","color","voltage","setVoltage","current","setCurrent","defaultPreset","useMemo","recommendedPreset","matchingPreset","supportedDrivers","Drivers","filter","d","protocol","stepperSPI","steppers","Steppers","s","matchesDefaultRail","sv","currentVoltage","run_current","newState","axisDescription","rotationDistance","serializedNew","serializePrinterRail","serializedOld","isDirty","isRecommendedPresetCompatible","railName","extruder1","toLocaleUpperCase","motorSlotOptions","ms","title","hasDiagPin","diag_pin","hasEndstopPin","endstop_pin","isInUse","disabled","Boolean","motorSlotBadge","AnimatePresence","isVisible","jsxs","exit","opacity","scale","y","initial","animate","twMerge","badgeBorderColorStyle","badgeBackgroundColorStyle","h3","p","Dropdown","label","options","error","join","onSelect","value","TextInput","type","onChange","inputMode","step","min","max","maxCurrent","maxPeakCurrent","Banner","Icon","FireIcon","Math","floor","LightBulbIcon","BoltIcon","span","onClick"],"sourceRoot":""}