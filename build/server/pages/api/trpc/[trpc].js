"use strict";(()=>{var e={};e.id=829,e.ids=[829,2888],e.modules={18910:e=>{e.exports=require("@tanstack/react-query")},85337:e=>{e.exports=require("@trpc/client")},4129:e=>{e.exports=require("@trpc/next")},56368:e=>{e.exports=require("@trpc/server")},56988:e=>{e.exports=require("deep-equal")},54230:e=>{e.exports=require("glob")},20145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},24580:e=>{e.exports=require("node-cache")},71569:e=>{e.exports=require("object-hash")},58545:e=>{e.exports=require("pino")},16689:e=>{e.exports=require("react")},7636:e=>{e.exports=require("react-use-websocket")},20997:e=>{e.exports=require("react/jsx-runtime")},29755:e=>{e.exports=require("recoil")},44101:e=>{e.exports=require("recoil-sync")},53489:e=>{e.exports=require("ts-deepmerge")},38316:e=>{e.exports=require("zod")},15140:e=>{e.exports=require("zod-refine")},32081:e=>{e.exports=require("child_process")},57147:e=>{e.exports=require("fs")},73292:e=>{e.exports=require("fs/promises")},22037:e=>{e.exports=require("os")},71017:e=>{e.exports=require("path")},14521:e=>{e.exports=require("readline")},73837:e=>{e.exports=require("util")},37394:(e,t,s)=>{s.r(t),s.d(t,{config:()=>D,default:()=>q,routeModule:()=>T});var r={};s.r(r),s.d(r,{default:()=>O});var n=s(2573),i=s(29444),o=s(11089),a=s(19953),l=s(57147),c=s(73837),p=s(32081);let hasSsid=e=>e.ssid,hasKeys=e=>0!==Object.keys(e).length,bySignal=(e,t)=>t.signal-e.signal,parseCell=e=>{var t,s={};return(t=e.match(/BSS ([0-9A-Fa-f:-]{17})\(on/))&&(s.address=t[1].toLowerCase()),(t=e.match(/freq: ([0-9]+)/))&&(s.frequency=parseInt(t[1],10)),(t=e.match(/signal: (-?[0-9.]+) dBm/))&&(s.signal=parseFloat(t[1])),(t=e.match(/last seen: ([0-9]+) ms ago/))&&(s.lastSeenMs=parseInt(t[1],10)),(t=e.match(/SSID: \\x00/))?delete s.ssid:(t=e.match(/SSID: ([^\n]*)/))&&(s.ssid=t[1]),(t=e.match(/Country: ([^\t]*)/))&&(s.country=t[1]),(t=e.match(/DS Parameter set: channel ([0-9]+)/))?s.channel=parseInt(t[1],10):(t=e.match(/\* primary channel: ([0-9]+)/))&&(s.channel=parseInt(t[1],10)),(t=e.match(/RSN:[\s*]+Version: 1/))?s.security="wpa2":(t=e.match(/WPA:[\s*]+Version: 1/))?s.security="wpa":(t=e.match(/capability: ESS Privacy/))?s.security="wep":(t=e.match(/capability: ESS/))&&(s.security="open"),s},parseScan=e=>function({stdout:t,stderr:s}){return e?t.split(/(^|\n)(?=BSS )/).map(parseCell).filter(hasKeys).sort(bySignal):t.split(/(^|\n)(?=BSS )/).map(parseCell).filter(hasSsid).sort(bySignal)},getWirelessInterface=async()=>{let e=await (0,c.promisify)(p.exec)("iw dev | awk '$1==\"Interface\"{print $2}' | head -n1");return e.stdout.trim()},scan=async(e,t)=>{let s=t.apForce?" ap-force":"",r=await (0,c.promisify)(p.exec)("sudo iw dev "+e+" scan"+s);return parseScan(t.showHidden??!1)(r)};var m=s(39210),u=s(38316);let x=u.z.object({hostname:u.z.string().min(2).regex(/^([a-zA-Z0-9]|-)+$/,"Hostname can only include a-Z, 0-9 and dashes.")}),y=u.z.object({ssid:u.z.string(),passphrase:u.z.string().min(8).max(63),country:u.z.string().optional()});var h=s(82757),d=s(34110),g=s(56368),f=s(71017),E=s.n(f);let w=(0,d.Nd)({hostname:d.$y.input(x).mutation(async({input:e})=>{let t=(0,m.xg)();try{await (0,c.promisify)(p.exec)(`sudo ${E().join(t,"change-hostname.sh")} ${e.hostname}`)}catch(e){throw e instanceof Error&&(0,a.j)().error(e.message),new g.TRPCError({message:"An error occured while attempting to change the hostname",code:"INTERNAL_SERVER_ERROR",cause:e})}return{result:"success"}}),join:d.$y.input(y).mutation(async({input:e})=>{try{await (0,h.$)("add-wifi-network.sh",e.ssid,e.passphrase,e.country??"GB")}catch(e){throw e instanceof Error&&(0,a.j)().error(e.message),new g.TRPCError({message:"Invalid wifi credentials",code:"PRECONDITION_FAILED",cause:e})}return{result:"success"}}),scan:d.$y.query(async()=>{let e=await getWirelessInterface();if(null==e||""===e.trim())throw new g.TRPCError({message:"No wifi interface available on device, if you're connected via ethernet you can skip this step.",code:"INTERNAL_SERVER_ERROR"});try{return await scan(e,{apForce:!0})}catch(e){throw e instanceof Error&&(0,a.j)().error(e.message),new g.TRPCError({message:"Failed to scan wifi networks",code:"INTERNAL_SERVER_ERROR",cause:e})}})});var R=s(16906),N=s(71689),I=s(73292);u.z.object({fileName:u.z.string(),path:u.z.string(),extensionName:u.z.string()}),u.z.object({errorIfExists:u.z.boolean().optional(),errorIfNotExists:u.z.boolean().optional()});let symlinkExtensions=async e=>{let t=e.extensions.slice(),s=[];if(0===t.length)return{report:"No extensions registered, nothing to do.",cleanedUpExtensions:s,symlinkResults:[]};let r=E().resolve(E().join(e.gitRepoPath,".git","info","exclude")),n=await Promise.all(t.map(async t=>{if(!(0,l.existsSync)(E().resolve(E().join(t.path,t.fileName))))return{result:"error",message:`Extension file "${t.fileName}" does not exist in ${t.path} and has been removed from the list of registered extensions`};{s.push(t);let n=E().join("function"==typeof e.relativePath?e.relativePath(t):e.relativePath,t.fileName),i=E().resolve(E().join(e.gitRepoPath,n)),o=RegExp(`^${n}$`),a=await (0,m.M_)(r,o),c=(0,l.existsSync)(i);try{if(!1===c)await (0,I.symlink)(E().resolve(E().join(t.path,t.fileName)),i);else if(e.options?.errorIfExists)throw new g.TRPCError({code:"PRECONDITION_FAILED",message:`Symlink for "${t.fileName}" already exists.`});return!1===a&&await (0,I.appendFile)(r,`${n}
`),{result:"success",message:c?`Symlink for "${t.fileName}" already exists. Skipping.`:`Symlink for "${t.fileName}" created`}}catch(e){return{result:"error",message:`Failed to create symlink for "${t.fileName}"${e instanceof Error?`:
	${e.message}`:""}`}}}}));s.length!==t.length&&e.saveExtensions(s);let i=n.filter(e=>"success"===e.result).length,o=`Symlinked ${i}/${n.length} extension(s): 
`;return n.forEach(e=>{o+=`${e.message} 
`}),{report:o,cleanedUpExtensions:s,symlinkResults:n}},unlinkExtension=async e=>{let t=e.extension,s=E().join("function"==typeof e.relativePath?e.relativePath(t):e.relativePath,t.fileName),r=E().resolve(e.gitRepoPath,".git","info","exclude"),n=E().resolve(E().join(e.gitRepoPath,s));if(!(0,l.existsSync)(E().resolve(E().join(t.path,t.fileName))))return{result:"success",message:`Extension file "${t.fileName}" does not exist in ${t.path}. Nothing to do.`};{let i=RegExp(`^${s}$`);await (0,m.u5)(r,i,null);let o=(0,l.existsSync)(n);try{if(!0===o)await (0,I.unlink)(n);else if(e.options?.errorIfNotExists)throw new g.TRPCError({code:"PRECONDITION_FAILED",message:`Symlink for "${t.fileName}" doesn't exist.`});return{result:"success",message:o?`Symlink for "${t.fileName}" has been removed.`:`Symlink for "${t.fileName}" doesn't exist. Skipping.`}}catch(e){return{result:"error",message:`Failed to remove symlink for "${t.fileName}"`}}}},k=u.z.object({fileName:u.z.string(),path:u.z.string(),extensionName:u.z.string(),errorIfExists:u.z.boolean().optional(),errorIfNotExists:u.z.boolean().optional(),isKinematics:u.z.boolean().optional()}),S=u.z.array(k),getExtensions=()=>{let e=N.Rz.parse(process.env),t=e.RATOS_DATA_DIR,s=E().join(t,"klippy-extensions.json");(0,l.existsSync)(t)||(0,l.mkdirSync)(t),(0,l.existsSync)(s)||(0,l.writeFileSync)(s,"[]");let r=S.parse(JSON.parse((0,l.readFileSync)(s).toString()));return r},saveExtensions=e=>{let t=N.Rz.parse(process.env),s=t.RATOS_DATA_DIR,r=E().join(s,"klippy-extensions.json");(0,l.existsSync)(s)||(0,l.mkdirSync)(s),(0,l.writeFileSync)(r,JSON.stringify(e))},symlinkKlippyExtensions=async e=>{let t=N.Rz.parse(process.env),s=getExtensions();return await symlinkExtensions({extensions:s,options:{errorIfExists:e},gitRepoPath:t.KLIPPER_DIR,relativePath,saveExtensions})},relativePath=e=>e.isKinematics?"klippy/kinematics":"klippy/extras",v=(0,d.Nd)({register:d.$y.input(u.z.object({json:k})).mutation(async({input:e})=>{let t=getExtensions(),{path:s,fileName:r,errorIfExists:n,extensionName:i}=e.json,o=E().join(s,r);if(!(0,l.existsSync)(o))throw new g.TRPCError({message:`File "${o}" does not exist`,code:"PRECONDITION_FAILED"});if(t.find(t=>t.extensionName===i||t.fileName===r&&!!t.isKinematics==!!e.json.isKinematics)){if(!0===n)throw new g.TRPCError({message:`${e.json.isKinematics?"A kinematic":"An"} extension called "${i}" with fileName "${r}" is already registered`,code:"PRECONDITION_FAILED"});return(0,a.j)().warn(`${e.json.isKinematics?"A kinematic":"An"} extension called "${i}" with the fileName "${r}" is already registered, ignoring...`),!0}return t.push(e.json),saveExtensions(t),!0}),unregister:d.$y.input(u.z.object({extensionName:u.z.string(),errorIfNotExists:u.z.boolean().optional()})).mutation(async({input:e})=>{let t=getExtensions(),{extensionName:s}=e,r=t.findIndex(e=>e.extensionName===s);if(-1===r){if(!0===e.errorIfNotExists)throw new g.TRPCError({message:`Extension with the name "${s}" is not registered`,code:"PRECONDITION_FAILED"});return(0,a.j)().warn(`Extension with the name "${s}" is not registered, ignoring...`),{result:"success",message:`Extension file "${s}" does not exist. Nothing to do.`}}let n=t.splice(r,1);if(1!==n.length)throw Error("Failed to remove extension");let i=await unlinkExtension({extension:n[0],gitRepoPath:N.Rz.parse(process.env).KLIPPER_DIR,relativePath});return"success"===i.result&&saveExtensions(t),i}),symlink:d.$y.input(u.z.object({errorIfExists:u.z.boolean().optional()})).mutation(async({input:e})=>await symlinkKlippyExtensions(e.errorIfExists)),unlink:d.$y.mutation(async()=>{let e=getExtensions();return await Promise.all(e.map(async e=>{let t=await unlinkExtension({extension:e,gitRepoPath:N.Rz.parse(process.env).KLIPPER_DIR,relativePath});return t}))}),list:d.$y.output(S).query(async()=>getExtensions())}),$=u.z.object({fileName:u.z.string(),path:u.z.string(),extensionName:u.z.string(),errorIfExists:u.z.boolean().optional()}),P=u.z.array($),moonraker_extensions_getExtensions=()=>{let e=N.Rz.parse(process.env),t=e.RATOS_DATA_DIR,s=E().join(t,"moonraker-extensions.json");(0,l.existsSync)(t)||(0,l.mkdirSync)(t),(0,l.existsSync)(s)||(0,l.writeFileSync)(s,"[]");let r=P.parse(JSON.parse((0,l.readFileSync)(s).toString()));return r},moonraker_extensions_saveExtensions=e=>{let t=N.Rz.parse(process.env),s=t.RATOS_DATA_DIR,r=E().join(s,"moonraker-extensions.json");(0,l.existsSync)(s)||(0,l.mkdirSync)(s),(0,l.writeFileSync)(r,JSON.stringify(e))},symlinkMoonrakerExtensions=async e=>{let t=N.Rz.parse(process.env),s=moonraker_extensions_getExtensions();return await symlinkExtensions({extensions:s,options:{errorIfExists:e},gitRepoPath:t.MOONRAKER_DIR,relativePath:()=>"moonraker/components",saveExtensions:moonraker_extensions_saveExtensions})},_=(0,d.Nd)({register:d.$y.input(u.z.object({json:$})).mutation(async({input:e})=>{let t=moonraker_extensions_getExtensions(),{path:s,fileName:r,errorIfExists:n}=e.json,i=E().join(s,r);if(!(0,l.existsSync)(i))throw(0,a.j)().error(`File "${i}" does not exist`),new g.TRPCError({message:`File "${i}" does not exist`,code:"PRECONDITION_FAILED"});if(t.find(e=>e.fileName===r)){if(!0===n)throw(0,a.j)().error(`An extension with the fileName "${r}" is already registered`),new g.TRPCError({message:`An extension with the fileName "${r}" is already registered`,code:"PRECONDITION_FAILED"});return(0,a.j)().warn(`An extension with the fileName "${r}" is already registered, ignoring...`),!0}return t.push(e.json),moonraker_extensions_saveExtensions(t),!0}),symlink:d.$y.input(u.z.object({errorIfExists:u.z.boolean().optional()})).mutation(async({input:e})=>await symlinkMoonrakerExtensions(e.errorIfExists)),unlink:d.$y.mutation(async()=>{let e=moonraker_extensions_getExtensions(),t=N.Rz.parse(process.env);return await Promise.all(e.map(async e=>{let s=await unlinkExtension({extension:e,gitRepoPath:t.MOONRAKER_DIR,relativePath:"moonraker/components"});return s}))}),unregister:d.$y.input(u.z.object({extensionName:u.z.string(),errorIfNotExists:u.z.boolean().optional()})).mutation(async({input:e})=>{let t=N.Rz.parse(process.env),s=moonraker_extensions_getExtensions(),{extensionName:r}=e,n=s.findIndex(e=>e.extensionName===r);if(-1===n){if(!0===e.errorIfNotExists)throw new g.TRPCError({message:`Extension with the name "${r}" is not registered`,code:"PRECONDITION_FAILED"});return(0,a.j)().warn(`Extension with the name "${r}" is not registered, ignoring...`),{result:"success",message:`Extension with the name "${r}" is not registered`}}let i=s.splice(n,1);if(1!==i.length)throw Error("Failed to remove extension");let o=await unlinkExtension({extension:i[0],gitRepoPath:t.MOONRAKER_DIR,relativePath:"moonraker/components"});return"success"===o.result&&moonraker_extensions_saveExtensions(s),o}),list:d.$y.output(P).query(async()=>moonraker_extensions_getExtensions())});var j=s(20236),z=s(81358);let A=(0,d.Nd)({version:d.$y.query(async()=>await (0,c.promisify)(p.exec)("git describe --tags --always",{cwd:process.env.RATOS_CONFIGURATION_PATH}).then(({stdout:e})=>e.trim())),klipperVersion:d.$y.query(async()=>await (0,c.promisify)(p.exec)("git describe --tags --always",{cwd:process.env.KLIPPER_DIR}).then(({stdout:e})=>e.trim())),osVersion:d.$y.query(async()=>{let e=(0,l.statSync)("/etc/ratos-release").isFile()?"/etc/ratos-release":"/etc/RatOS-release";return await (0,c.promisify)(p.exec)(`cat ${e}`).then(({stdout:e})=>e.trim().replace("RatOS ",""))}),ipAddress:d.$y.query(async()=>{let e=await getWirelessInterface(),t=null==e||""===e.trim()?"eth0":e.trim();return await (0,c.promisify)(p.exec)(`ip address | grep "${t}"`).then(({stdout:e})=>e.match(/inet\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/)?.[1])??"Unknown IP"}),resetCache:d.$y.mutation(async()=>(z.oA.flushAll(),{result:"success"})),kill:d.$y.query(async()=>{process.exit()}),reboot:d.$y.mutation(async()=>(setTimeout(()=>{(0,c.promisify)(p.exec)("reboot")},500),{result:"success"})),mcu:R.px,printer:j.Cu,wifi:w,"klippy-extensions":v,"moonraker-extensions":_}),b=require("@trpc/server/adapters/next"),O=b.createNextApiHandler({router:A,createContext:()=>({boards:[]}),onError:e=>{(0,a.j)().error(e.error)}}),q=(0,o.l)(r,"default"),D=(0,o.l)(r,"config"),T=new n.PagesAPIRouteModule({definition:{kind:i.x.PAGES_API,page:"/api/trpc/[trpc]",pathname:"/api/trpc/[trpc]",bundlePath:"",filename:""},userland:r})}};var t=require("../../../webpack-api-runtime.js");t.C(e);var __webpack_exec__=e=>t(t.s=e),s=t.X(0,[1022,1689,5215],()=>__webpack_exec__(37394));module.exports=s})();