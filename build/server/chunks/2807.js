"use strict";exports.id=2807,exports.ids=[2807],exports.modules={62807:(e,t,s)=>{s.d(t,{Y:()=>unlinkExtension,b:()=>symlinkExtensions});var i=s(57147),n=s(73292),o=s(71017),r=s.n(o),l=s(38316),a=s(22353),f=s(56368);l.z.object({fileName:l.z.string(),path:l.z.string(),extensionName:l.z.string()}),l.z.object({errorIfExists:l.z.boolean().optional(),errorIfNotExists:l.z.boolean().optional()});let symlinkExtensions=async e=>{let t=e.extensions.slice(),s=[];if(0===t.length)return{report:"No extensions registered, nothing to do.",cleanedUpExtensions:s,symlinkResults:[]};let o=r().resolve(r().join(e.gitRepoPath,".git","info","exclude")),l=await Promise.all(t.map(async t=>{if(!(0,i.existsSync)(r().resolve(r().join(t.path,t.fileName))))return{result:"error",message:`Extension file "${t.fileName}" does not exist in ${t.path} and has been removed from the list of registered extensions`};{s.push(t);let l=r().join("function"==typeof e.relativePath?e.relativePath(t):e.relativePath,t.fileName),m=r().resolve(r().join(e.gitRepoPath,l)),x=RegExp(`^${l}$`),c=await (0,a.M_)(o,x),g=(0,i.existsSync)(m);try{if(!1===g)await (0,n.symlink)(r().resolve(r().join(t.path,t.fileName)),m);else if(e.options?.errorIfExists)throw new f.TRPCError({code:"PRECONDITION_FAILED",message:`Symlink for "${t.fileName}" already exists.`});return!1===c&&await (0,n.appendFile)(o,`${l}
`),{result:"success",message:g?`Symlink for "${t.fileName}" already exists. Skipping.`:`Symlink for "${t.fileName}" created`}}catch(e){return{result:"error",message:`Failed to create symlink for "${t.fileName}"${e instanceof Error?`:
	${e.message}`:""}`}}}}));s.length!==t.length&&e.saveExtensions(s);let m=l.filter(e=>"success"===e.result).length,x=`Symlinked ${m}/${l.length} extension(s): 
`;return l.forEach(e=>{x+=`${e.message} 
`}),{report:x,cleanedUpExtensions:s,symlinkResults:l}},unlinkExtension=async e=>{let t=e.extension,s=r().join("function"==typeof e.relativePath?e.relativePath(t):e.relativePath,t.fileName),o=r().resolve(e.gitRepoPath,".git","info","exclude"),l=r().resolve(r().join(e.gitRepoPath,s));if(!(0,i.existsSync)(r().resolve(r().join(t.path,t.fileName))))return{result:"success",message:`Extension file "${t.fileName}" does not exist in ${t.path}. Nothing to do.`};{let r=RegExp(`^${s}$`);await (0,a.u5)(o,r,null);let m=(0,i.existsSync)(l);try{if(!0===m)await (0,n.unlink)(l);else if(e.options?.errorIfNotExists)throw new f.TRPCError({code:"PRECONDITION_FAILED",message:`Symlink for "${t.fileName}" doesn't exist.`});return{result:"success",message:m?`Symlink for "${t.fileName}" has been removed.`:`Symlink for "${t.fileName}" doesn't exist. Skipping.`}}catch(e){return{result:"error",message:`Failed to remove symlink for "${t.fileName}"`}}}}}};