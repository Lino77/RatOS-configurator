"use strict";exports.id=2618,exports.ids=[2618],exports.modules={42618:(e,t,a)=>{a.r(t),a.d(t,{default:()=>handler,getDebugZipFiles:()=>getDebugZipFiles});var r=a(71017),n=a.n(r),i=a(74169),o=a(54230),s=a(9227),l=a.n(s),g=a(73292),f=a(97926),d=a(57147);let getDebugZipFiles=async()=>{if(null==process.env.RATOS_CONFIGURATION_PATH)throw Error("RATOS_CONFIGURATION_PATH environment variable not set");let e=i.Rz.parse(process.env),t=await (0,o.glob)([`${e.RATOS_DATA_DIR}/*.+(cfg|json)`]);t=t.filter((e,a)=>t.indexOf(e)===a).filter(e=>{e.indexOf("printer_data/config/RatOS")});let a=await (0,o.glob)([`${e.KLIPPER_CONFIG_PATH}/../logs/*.log`,`${e.LOG_FILE}`]);a=a.filter((e,t)=>a.indexOf(e)===t);let r=await (0,o.glob)([`${e.KLIPPER_CONFIG_PATH}/+([a-z|A-Z]|-)+(+([0-9])*(_|-)*([0-9])).cfg`]),s=(await (0,o.glob)([`${e.KLIPPER_CONFIG_PATH}/*.cfg`])).filter(e=>!r.includes(e));s=s.filter((e,t)=>s.indexOf(e)===t);let l=await (0,o.glob)(["/var/log/ratos-configurator.log"]),gatherInfo=async(e,t,a)=>{let r=await (0,g.stat)(e),i=e;return r.isSymbolicLink()&&(i=n().resolve(n().dirname(e),await (0,g.readlink)(e)),r=await (0,g.stat)(i)),{path:i,orgPath:e,name:n().basename(e),size:r.size,isFile:r.isFile(),dest:a,source:t}},f=(await Promise.all(t.map(e=>gatherInfo(e,"RatOS","RatOS")).concat(a.map(e=>gatherInfo(e,"logs","logs"))).concat(s.map(e=>gatherInfo(e,"configs","configs"))).concat(l.map(e=>gatherInfo(e,"var/log","var/log"))))).filter(e=>e.isFile);return f};async function handler(e,t){try{if("GET"===e.method){let e=await getDebugZipFiles(),a=new(l());e.map((t,r)=>{(0,f.j)().info(t,`Adding file to zip... (${e.length-(r+1)} remaining)`),a.file(n().join(t.dest,t.name),(0,d.createReadStream)(t.path))});try{let e=a.generateNodeStream({type:"nodebuffer",streamFiles:!0});return t.setHeader("Content-Type","application/x-zip"),t.setHeader("Content-Disposition","attachment; filename=ratos-debug.zip"),t.status(200).send(e)}catch(e){return(0,f.j)().error(e instanceof Error?e.message:"Unknown error while generating debug zip"),t.status(200).json({result:"error",data:{message:"Something went wrong, the irony.."}})}}t.status(405).json({result:"error",data:{message:"Method not allowed"}})}catch(e){return(0,f.j)().error(e instanceof Error?e.message:"Unknown error while generating debug zip"),t.status(500).json({result:"error",data:{message:"Something went wrong, the irony.."}})}}}};