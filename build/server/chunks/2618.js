"use strict";exports.id=2618,exports.ids=[2618],exports.modules={42618:(e,t,n)=>{n.r(t),n.d(t,{default:()=>handler,getDebugZipFiles:()=>getDebugZipFiles});var a=n(71017),r=n.n(a),o=n(74169),i=n(54230),s=n(9227),l=n.n(s),g=n(73292),c=n(97926),f=n(57147);let getDebugZipFiles=async()=>{if(null==process.env.RATOS_CONFIGURATION_PATH)throw Error("RATOS_CONFIGURATION_PATH environment variable not set");let e=o.Rz.parse(process.env),t="+(cfg|json|ndjson|conf|log)",n=await (0,i.glob)([`${e.RATOS_DATA_DIR}/*.+(cfg|json|conf|log)`,`${e.RATOS_DATA_DIR}/**/*.+(cfg|json|conf|log)`]);n=n.filter((e,t)=>n.indexOf(e)===t);let a=await (0,i.glob)([`${e.KLIPPER_CONFIG_PATH}/../logs/*.${t}`,`${e.LOG_FILE}`,"/var/log/kern.+(log|log.1)"]);a=a.filter((e,t)=>a.indexOf(e)===t);let s=await (0,i.glob)([`${e.KLIPPER_CONFIG_PATH}/+([a-z|A-Z]|-)+(+([0-9])*(_|-)*([0-9])).${t}`]),l=(await (0,i.glob)([`${e.KLIPPER_CONFIG_PATH}/*.${t}`,`${e.KLIPPER_CONFIG_PATH}/**/*.${t}`])).filter(e=>!s.includes(e)&&-1===e.indexOf("printer_data/config/RatOS"));l=l.filter((e,t)=>l.indexOf(e)===t);let c=await (0,i.glob)(["/var/log/ratos-configurator.log"]),gatherInfo=async(e,t,n)=>{let a=await (0,g.stat)(e),o=e;return a.isSymbolicLink()&&(o=r().resolve(r().dirname(e),await (0,g.readlink)(e)),a=await (0,g.stat)(o)),{path:o,orgPath:e,name:r().basename(e),size:a.size,isFile:a.isFile(),dest:n,source:t}},f=(await Promise.all(n.map(e=>gatherInfo(e,"RatOS","RatOS")).concat(a.map(e=>gatherInfo(e,"logs","logs"))).concat(l.map(e=>gatherInfo(e,"configs","configs"))).concat(c.map(e=>gatherInfo(e,"var/log","var/log"))))).filter(e=>e.isFile);return f};async function handler(e,t){try{if("GET"===e.method){let e=await getDebugZipFiles(),n=new(l());e.map((t,a)=>{(0,c.j)().info(t,`Adding file to zip... (${e.length-(a+1)} remaining)`),n.file(r().join(t.dest,t.name),(0,f.createReadStream)(t.path))});try{return t.setHeader("Content-Type","application/x-zip"),t.setHeader("Content-Disposition","attachment; filename=ratos-debug.zip"),(0,c.j)().info("Sending zip to client..."),t.status(200).send(n.generateNodeStream({type:"nodebuffer",streamFiles:!0,compression:"DEFLATE",compressionOptions:{level:1}}))}catch(e){return(0,c.j)().error(e instanceof Error?e.message:"Unknown error while generating debug zip"),t.status(200).json({result:"error",data:{message:"Something went wrong, the irony.."}})}}t.status(405).json({result:"error",data:{message:"Method not allowed"}})}catch(e){return(0,c.j)().error(e instanceof Error?e.message:"Unknown error while generating debug zip"),t.status(500).json({result:"error",data:{message:"Something went wrong, the irony.."}})}}}};