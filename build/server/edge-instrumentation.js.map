{"version":3,"file":"edge-instrumentation.js","mappings":"yHAAO,IAAMA,EAAW,SAAY,CAqBpC","sources":["webpack://_N_E/./instrumentation.ts","webpack://_N_E/<anon>"],"sourcesContent":["export const register = async () => {\n\tif (process.env.NEXT_RUNTIME === 'nodejs') {\n\t\tconst { existsSync, mkdirSync } = await import('fs');\n\t\tconst { regenerateKlipperConfiguration } = await import('./server/routers/printer');\n\t\tconst { serverSchema } = await import('./env/schema.mjs');\n\n\t\tconst environment = serverSchema.parse(process.env);\n\t\tconst dataDir = environment.RATOS_DATA_DIR;\n\t\tif (!existsSync(dataDir)) {\n\t\t\tconsole.log('Creating RatOS data directory..');\n\t\t\tmkdirSync(dataDir);\n\t\t}\n\t\tconsole.log('Regenerating last known config');\n\t\ttry {\n\t\t\tawait regenerateKlipperConfiguration();\n\t\t} catch (e) {\n\t\t\tif (e instanceof Error) {\n\t\t\t\tconsole.log('Failed to regenerate config: ', e.message);\n\t\t\t}\n\t\t}\n\t}\n};\n"],"names":["register"],"sourceRoot":""}