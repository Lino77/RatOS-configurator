{"version":3,"file":"edge-instrumentation.js","mappings":"yHAAO,IAAMA,EAAW,SAAY,CAoDpC","sources":["webpack://_N_E/./instrumentation.ts","webpack://_N_E/<anon>"],"sourcesContent":["export const register = async () => {\n\tif (process.env.NEXT_RUNTIME === 'nodejs') {\n\t\tconst { getLogger } = await import('./server/helpers/logger');\n\t\tconst { existsSync, mkdirSync } = await import('fs');\n\t\tconst { regenerateKlipperConfiguration } = await import('./server/routers/printer');\n\t\tconst { serverSchema } = await import('./env/schema.mjs');\n\t\tconst { symlinkKlippyExtensions } = await import('./server/routers/klippy-extensions');\n\t\tconst { symlinkMoonrakerExtensions } = await import('./server/routers/moonraker-extensions');\n\t\tconst { klipperRestart } = await import('./server/helpers/klipper');\n\t\tconst dns = await import('dns');\n\t\tdns.setDefaultResultOrder('ipv4first');\n\t\tconst logger = getLogger();\n\n\t\tconst environment = serverSchema.parse(process.env);\n\t\tconst dataDir = environment.RATOS_DATA_DIR;\n\t\tif (!existsSync(dataDir)) {\n\t\t\tlogger.info('Creating RatOS data directory..');\n\t\t\tmkdirSync(dataDir);\n\t\t}\n\t\ttry {\n\t\t\tlogger.info('Symlinking klippy extensions...');\n\t\t\tlogger.info((await symlinkKlippyExtensions()).report);\n\t\t} catch (e) {\n\t\t\tif (e instanceof Error) {\n\t\t\t\tlogger.error(`Failed to symlink klippy extensions: ${e.message}`);\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\tlogger.info('Symlinking moonraker extensions...');\n\t\t\tlogger.info((await symlinkMoonrakerExtensions()).report);\n\t\t} catch (e) {\n\t\t\tif (e instanceof Error) {\n\t\t\t\tlogger.error(`Failed to symlink moonraker extensions: ${e.message}`);\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\tlogger.info('Regenerating last known config...');\n\t\t\tawait regenerateKlipperConfiguration();\n\t\t\tlogger.info('Config regenerated!');\n\t\t} catch (e) {\n\t\t\tif (e instanceof Error) {\n\t\t\t\tlogger.error(`Failed to regenerate config: ${e.message}`);\n\t\t\t}\n\t\t}\n\t\tlogger.info('Restart klipper..');\n\t\tconst restarted = await klipperRestart();\n\t\tif (restarted) {\n\t\t\tlogger.info('Klipper restarted!');\n\t\t} else {\n\t\t\tlogger.info(`Klipper was in a busy state. Please restart manually.`);\n\t\t}\n\t}\n};\n"],"names":["register"],"sourceRoot":""}